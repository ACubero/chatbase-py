On Fetch Table (tab as char)
begin
end

Private changeFoto()
begin
   bmp.Bitmap =
     "\cosmos\projects\personal\cara"
    + personal.foto
    + ".bmp";
end

On Exit cFoto
begin
    changeFoto;
end

On RowChanged Table(tab as Char)
begin
    changeFoto;
end

On SpinUp spinFoto
begin
    ++(personal.foto);
    changeFoto;
end

On SpinDown spinFoto
begin
    if personal.foto > 1
    then begin
        --(personal.foto);
        changeFoto;
    end
end

On New Table(tab as Char)
begin
   bmp.Bitmap =
     "\cosmos\projects\personal\unknow2.bmp";
end

On Command Query
begin
    Query;
    changeFoto;
end
main begin
    stmt.SqlExec("database personal");
    formPersonal.Run;
end

main
objects begin
    Excel Hoja1  Range as ActiveX
    lCur as SqlCursor
    lCliente as integer
    lInValor as Decimal(20)
    lFacturado as Decimal
    lSmLinea as smallint
    lChFichero as char
    xlColumns as integer default 1

end
begin
    PutEnv("DBPATH", CosmosDir+"\projects\almafac");
    Sql.Connect("almafac");
    if Sql.Error <> 0 
    then begin
      MessageBox("Error al conectar a la base de datos", Module.Name);
      return;
    end

    Excel.CreateActiveXFromProgID("Excel.Application");
    Excel.SetProperty("Visible",true); 
    
    Excel.GetObject("Workbooks").Invoke("Add");
    
    Excel.GetObject("ActiveWorkbook").GetObject("ActiveSheet").SetProperty( "Name","Mi Ejemplo");
    

    Excel.GetObject("ActiveWorkbook").GetObject("Sheets").GetProperty( "Item",Hoja1, "Mi Ejemplo");
    Hoja1.Invoke("Activate");  //Se activa la hoja con la que vamos a trabajar

    Hoja1.Invoke("Select");  //lo seleccionamos        
    Excel.GetObject("ActiveWorkbook").GetObject("ActiveSheet").SetProperty( "Format", Hoja1, "Texto");  

    Hoja1.GetProperty("Range",Range, "A1");        
    Range.Invoke("Select");    
    Range.SetProperty("Value","Cliente");
    
    Hoja1.GetProperty("Range",Range, "B1");
    Range.Invoke("Select");
    Range.SetProperty("Value","Importe Facturado");

    Hoja1.GetProperty("Range", Range, "B:B"); 
    Range.Invoke("Select");
    Range.SetProperty("NumberFormat", "#.##0,00");   

    Range.GetObject("EntireColumn").Invoke("AutoFit");

    lCur.Prepare("select cliente, sum(precio) "+
                 " from albaranes, lineas "+
                 "   where albaranes.albaran = lineas.albaran "+
                 "   group by cliente ");

    lCur.Into(lCliente, lFacturado);
    lCur.Open();
    lSmLinea = 1;
    while lCur.Fetch().Found() do
    begin
        ++lSmLinea;
        Hoja1.GetProperty("Range",Range, "A"+lSmLinea.Char);
        Range.Invoke("Select");        
        Range.SetProperty("Value", lCliente);
        
        Hoja1.GetProperty("Range",Range, "B"+lSmLinea.Char);
        Range.Invoke("Select");
        Range.SetProperty("Value", lFacturado);
    end

    lCur.Close().Free();


    Hoja1.GetProperty("Range",Range, "A2:A10");
    Range.Invoke("Select");
    Excel.GetObject("WorksheetFunction").Invoke("Min", lInValor, Range);
    Hoja1.GetProperty("Range",Range, "D1");
    Range.Invoke("Select");
    Range.SetProperty("Value",lInValor);    

    Hoja1.GetProperty("Range",Range, "A2;B10");
    Range.Invoke("Select");
    Excel.GetObject("WorksheetFunction").Invoke("Sum", lInValor, Range);
    Hoja1.GetProperty("Range",Range, "D2");
    Range.Invoke("Select");
    Range.SetProperty("Value",lInValor);    
    
    Excel.GetObject("Charts").Invoke("Add");
    Excel.GetObject("ActiveWorkbook").GetObject("ActiveChart").Invoke("Activate");

    Hoja1.GetProperty("Range",Range, "B2:B"+lSmLinea.Char);
    
        Excel.GetObject("ActiveWorkbook").GetObject("ActiveChart").Invoke("SetSourceData", null, Range, xlColumns);
 
    Excel.GetObject("ActiveWorkbook").GetObject("ActiveChart").SetProperty("HasTitle", true);  
    Excel.GetObject("ActiveWorkbook").GetObject("ActiveChart").GetObject("ChartTitle").SetProperty("Text", "Facturación clientes");  

    lChFichero = ProjectDir+"\ejemplo_excel.xlsx";

    Excel.GetObject("ActiveWorkbook").Invoke( "SaveAs", null, lChFichero,  //nombre del fichero
                          null, //formato de grabación
                           "",   //Contraseña a asignar al archivo
                           "",   //Contraseña contra escritura
                          False,   //Recomendado ReadOnly (no en este caso)
                          False,   //Crear copia de seguridad
                          null,   //Añadir a lista de documentos visitados (por defecto no).
                          null,   //TextCodePage?
                          null    //TextVisualLayout
                            );
    Excel.GetObject("ActiveWorkbook").SetProperty("Saved",true);
    Excel.GetObject("ActiveWorkbook").Invoke("Close",true, lChFichero,false);
    Excel.GetObject("Workbooks").Invoke("Save");
    Excel.GetObject("ActiveWorkbook").GetObject("ActiveSheet").Invoke("Save",true);
    Excel.GetObject("ActiveWorkbook").GetObject("Sheets").Invoke("Save",true);
    Excel.GetObject("ActiveWorkbook").GetObject("ActiveSheet").SetProperty("Saved",true);
    Excel.GetObject("ActiveWorkbook").GetObject("Sheets").SetProperty("Saved",true);
    Excel.GetObject("ActiveWorkbook").GetObject("ActiveSheet").SetProperty("Close",true);
    Excel.GetObject("ActiveWorkbook").GetObject("Sheets").SetProperty("Close",true);
    Excel.GetObject("Workbooks").Invoke("Close",true);
     

    Excel.Invoke("Select");
    Excel.Invoke("Quit");

end


On Open
objects begin
    str as char
    id00 id01 as integer
end
begin
    {
    El identificador devuelto por el método AddCustomColors podrá ser utilizado en cualquier módulo de la aplicación. 
    Es posible ejecutar múltiples veces el método AddCustomColors con distintos ficheros de definición de «Custom Colors»,
    ya que cada vez que se ejecuta retorna un identificador distinto, y utilizar para distintos controles diferentes definiciones de «Custom Colors».
    }
    id00 = Module.AddCustomColors(ProjectDir() + "themes\theme_blue.ini");
    id01 = Module.AddCustomColors(ProjectDir() + "\themes\theme_green.ini");

    box_02.SetCustomColors(id01, TRUE);
    box_03.SetCustomColors(id01, FALSE);

end

main
begin
    Module.LoadCustomColors(ProjectDir() + "\themes\theme_blue.ini");


    ejecuta();
end

private function ejecuta()
objects begin
    f as frm
end
begin
    f.Run();
end

On Open
objects begin
    id00 id01 as integer
end
begin
{
AddCustomControls. Permite cargar, en tiempo de ejecución, la definición de una nueva sección «Custom Controls», 
                    que podrá ser utilizada posteriormente por el método SetCustomControls. 
                    De esta manera, será posible que los controles de la aplicación puedan ser visualizados 
                    con un esquema de propiedades distinto al definido con el método LoadCustomControls.
}
    id00 = Module.AddCustomControls(ProjectDir() + "\CustomControls\CustomControls_02.ini");
    id01 = Module.AddCustomControls(ProjectDir() + "\CustomControls\CustomControls_03.ini");
{
SetCustomControls. Asigna a un control y opcionalmente a sus hijos una plantilla de «Custom Controls» 
                   cargada previamente con el método AddCustomControls.
}
    box_02.SetCustomControls(id00, TRUE);
    box_03.SetCustomControls(id01, TRUE);
    box_04.SetCustomControls(id01, FALSE);
end


main
objects begin
    ficheroCustomControls as char
end
begin
    ejecuta();
end

private function ejecuta()
objects begin
    f as frm
end
begin
    f.Run();
end

On Open
begin   
    vCh= "Texto edit Field para copiar";
end
main
objects
begin
    o as fr
end
begin
    PutEnv("ALLOWCOPYCONTROLDATA", "TRUE");
    o.Run;
end



On Open
begin
    
    SetEditMode(true);
    Query();
    id_grid.AllowGridMultiSelect(TRUE);
    p_coment.Text = "Permitir seleccionar un rango de filas.";
end

main
objects
begin
    oCGrid as CGrid
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("Stock");
    oCGrid.Run;
    Sql.Disconnect;
    Sql.DettachConnection;
end

On Open
Begin
    Query;
End


On Command Activar
Begin
    grd.SetProperty("AllowShiftColumns",true);
End


On Command Desactivar
Begin
    grd.SetProperty("AllowShiftColumns",false);
End
main
objects
begin
     o_f as Frm
end
begin
    Sql.AttachConnection();
    Sql.Connect("stock");
    o_f.Run;
    Sql.Disconnect;
end

public dll "inwords.dll" sp_inwords(num as Char, VAR str as Char, femen as boolean)
On Click ctr_mostrar
begin
    dibuja();
end
On Open
begin

end
private function dibuja
objects begin
    x y j as integer
    numero as char(200)
    label as char(200)
    memo as char(200)
    font1 as char
    font2 as char
    labelFont as char
    propvalue as char
end
begin
    bmp_planta.Bitmap = ProjectDir() + "\almacen.png";
    oArray.add(bmp_planta.BitmapAddItem("almacen", 1,1, 31, 139 ,"altavoces", "Este es el texto del campo memo", "Ref 12584", "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 2,2, 31, 230 {73}, "altavoz2", memo, "Ref 12580", "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 3,3, 31, 320, "Ref 12000", memo, "Ref 12000", "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 4,4, 31, 410, "Ref 12012", memo, "Ref 12012", "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 5,5, 31, 500, "Ref 45681", memo, "Ref 45681", "Tahoma;Size=8;", Rgb(0,0,0)));
    
    oArray.add(bmp_planta.BitmapAddItem("almacen", 6,6, 148, 139, "camaras", memo, "Ref 45685", "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 7,7, 148, 230, "cd", memo, "Ref 48681", "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 8,8, 148, 320, "crucigramas", memo, "Ref 45981", "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 9,9, 148, 410, "discos", memo, "Ref 300", "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 10,10, 148, 500, "gomas", memo,"Ref 200" , "Tahoma;Size=8;", Rgb(0,0,0)));
    
    oArray.add(bmp_planta.BitmapAddItem("almacen", 11,11, 265, 139, "Ref 45200", memo,"Ref 45200" , "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 12,12, 265, 230, "Ref 44520", memo, "Ref 44520", "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 13,13, 265, 320, "Ref 36981", memo, "Ref 36981" ,  "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 14,14, 265, 410, "Ref 89650", memo, "Ref 89650", "Tahoma;Size=8;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("almacen", 15,15, 265, 500, "Ref 89650", memo, "Ref 89650", "Tahoma;Size=8;", Rgb(0,0,0)));


    oArray.add(bmp_planta.BitmapAddItem("comida", 3,3, 370, 524, "Ref 22222", memo, "Ref 22222", "Tahoma;Size=6;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("comida", 4,4, 450, 545, "Ref 11111", memo, "Ref 11111", "Tahoma;Size=6;", Rgb(0,0,0)));

    
    oArray.add(bmp_planta.BitmapAddItem("papeleria", 1,1, 437, 260, "Ref 21654", memo, "Ref 21654", "Tahoma;Size=6;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("papeleria", 2,2, 437, 314, "Ref 5433", memo, "Ref 5433", "Tahoma;Size=6;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("papeleria", 3,3, 437, 368, "Ref 3333", memo, "Ref 3333", "Tahoma;Size=6;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("papeleria", 7,7, 437, 422, "Ref 265", memo, "Ref 265", "Tahoma;Size=6;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("papeleria", 5,5, 437, 474, "Ref 3533", memo, "Ref 3533", "Tahoma;Size=6;", Rgb(0,0,0)));

    oArray.add(bmp_planta.BitmapAddItem("papeleria", 6,6, 369, 314, "Ref 526", memo, "Ref 526", "Tahoma;Size=6;", Rgb(0,0,0)));
    
    oArray.add(bmp_planta.BitmapAddItem("papeleria", 8,8, 369, 368, "Ref 98124", memo, "Ref 98124", "Tahoma;Size=6;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("papeleria", 9,9, 369, 422, "Ref 5832", memo, "Ref 5832", "Tahoma;Size=6;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("papeleria", 10,10, 369, 474, "Ref 5995", memo, "Ref 5995", "Tahoma;Size=6;", Rgb(0,0,0)));

    oArray.add(bmp_planta.BitmapAddItem("varios", 2,1, 365, 41, "Ref 00001", memo,null , "Tahoma;Size=6;", Rgb(0,0,0)));
    oArray.add(bmp_planta.BitmapAddItem("varios", 3,2, 365, 145,"Ref 00003", memo,null , "Tahoma;Size=6;", Rgb(0,0,0)));


end



On event Click control bmp_planta(id as event)
objects begin
    x y as integer
    icoFile as Char 
    icon as Smallint 
    iconAlt as Smallint
    posX as Smallint 
    posY as Smallint
    tooltip as Char
    label as Char
    labelFont as Char
    memo as Char
    iColor as integer
end

begin
    bmp_planta.BitmapGetItemInfo(id.GetItem(), icoFile, icon, iconAlt, posX, posY, tooltip, memo, label, labelFont, iColor);
    if icon == 1 then begin
       bmp_planta.BitmapUpdateItem(id.GetItem() ,icoFile ,21  ,iconAlt ,posX ,posY ,tooltip ,memo ,label ,labelFont, iColor );
    end
end

On event Click control bmp_stock(e as event)
objects begin
    x y i as integer
    icoFile as Char 
    icon as Smallint 
    iconAlt as Smallint
    posX as Smallint 
    posY as Smallint
    tooltip as Char
    label as Char
    labelFont as Char
    memo as Char
    iColor as integer
end
begin
    for i = 1 to oArray.Size() do begin
        label = null;  
        memo  = null;
        bmp_planta.BitmapGetItemInfo(oArray[i], icoFile, icon, iconAlt, posX, posY, tooltip, memo, label, labelFont,  iColor); 
        if i in (1 ,3 ,7) then begin
            icon = 16;
            memo = 'pedido';
        end    
        if i in (9, 10, 15, 23) then begin
            icon = 17;
            memo = 'pedido';
        end    
        if i in (17) then begin
            icon = 2;
            memo = 'pedido';
        end    
        bmp_planta.BitmapUpdateItem(oArray[i] ,icoFile ,icon  ,iconAlt ,posX ,posY ,tooltip ,memo ,label ,labelFont, iColor );                
            

    end 
    panel_msg.Text = "Productos con bajo stock";    
    Yield;
end

On event RClick control bmp_planta(id as event)
begin
    
    bmp_stock.BitmapDeleteItem(1);
    Mimenu.Track(self);
    gItem = id.GetItem;
   
end

On Command CmdRealizarPedido
objects begin
    x y i as integer
    icoFile as Char 
    icon as Smallint 
    iconAlt as Smallint
    posX as Smallint 
    posY as Smallint
    tooltip as Char
    label as Char
    labelFont as Char
    memo as Char
    iColor as integer
end
begin
    bmp_planta.BitmapGetItemInfo(gItem, icoFile, icon, iconAlt, posX, posY, tooltip, memo, label, labelFont, iColor);
    if memo == 'pedido' then begin
 
        bmp_planta.BitmapUpdateItem(gItem ,icoFile ,iconAlt  ,iconAlt ,posX ,posY ,tooltip ,memo ,label ,labelFont, iColor );  
    end
    else begin
        "Producto con Stock suficiente".Trace();
    end    
    Yield;
end
Public add (item as integer)
begin
    self[self.Size()] = item;
    self.Resize(self.Size()+1);
    
end 
Public GetValue(id as integer) return integer
begin
    return self[id];
end
main
objects
begin
      of as frm
end
begin
     of.Run();
end

On Open
begin
    lst.LoadSelect("select customer, company, surname, fname, phone from customers");
    lst.AlternateBackColor((  Rgb(254, 247, 224) * (-1)), Rgb(207, 207, 207) * (-1), 2);
end
main
objects
begin
    o as frm
end
begin
    Sql.SetValue("DBPATH" ,ProjectDir());
     Sql.Connect("stock");
    o.Run;
    Sql.Disconnect;
end



On Open
objects begin
    legendbackboxcolor as integer
end
begin
    CreateChart();
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "2009|2010|2011|2012|2013|");
    DoBarChart();    
    legendbackboxcolor = Rgb(255,255,255);
    legendStr = legendStr2 +legendStr3+legendStr4;
    ChartAddLegend(ctr_chart1.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);
    
    ChartSetMultiBarType(ctr_chart1.Hwnd(),1);
  
end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart1.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart1.Hwnd());
    
    ChartEnableBlur(ctr_chart1.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart1.Hwnd(),Rgb(255,255,255));
    ctr_chart1.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart1.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
    ChartSetTitle(ctr_chart1.Hwnd(), "Barras Agrupadas", "MS Sans Seriff", Rgb(255,255,255));


    if ctr_chart1.SetUserProc("ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end

public function DoBarChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
   
    colorlabellinea as integer  
    maxValue as smallint
end
begin


    NewChartLayer(ctr_chart1.Hwnd(), 2, 1);
    
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(0, 200, 200);
    micolorto = Module.Rgb(0, 255, 255);
    value = 4.5   ;

        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(0, maxValue);
            NewChartElement(ctr_chart1.Hwnd(),2, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
            

        end
    legendStr2 = "IBIZA|" + micolorto + "|";
    
    ChartLayerSet3D(ctr_chart1.Hwnd(), 2, TRUE);    


    
    NewChartLayer(ctr_chart1.Hwnd(), 3, 1);
    colorlabellinea = Rgb(200, 100, 100);
    micolorfrom = Module.Rgb(200, 100, 100);
    micolorto = Module.Rgb(123, 100, 255);
    value = 3.5   ;

        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(0, maxValue);
            NewChartElement(ctr_chart1.Hwnd(),3, value, micolorfrom, micolorto, value.Char , colorlabellinea);

        end
    legendStr3 = "TOLEDO|" + micolorto + "|";    
    
    ChartLayerSet3D(ctr_chart1.Hwnd(),3, TRUE);    


    
    NewChartLayer(ctr_chart1.Hwnd(), 4, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(250, 250, 050);
    micolorto = Module.Rgb(251, 125, 0);
    value = 4.5   ;
        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(4, maxValue);
            NewChartElement(ctr_chart1.Hwnd(), 4, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);

        end
    legendStr4 = "LEON|" + micolorto + "|";
    ChartLayerSet3D(ctr_chart1.Hwnd(), 4, TRUE);    
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorto = Module.Rgb(255, 255, 255);
    micolorfrom = Module.Rgb(200,200,200);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end



On event Click control btn_exportImagen(e as event)
begin
   ChartExportImage(ctr_chart1.Hwnd(),ProjectDir() + "\exporta\chart_ChartExportImage.bmp", "BMP");

   ChartExportImage(ctr_chart1.Hwnd(),ProjectDir() + "\exporta\chart_ChartExportImage.jpg", "jpg");

end
main
objects
begin
    o as frm
end
begin

    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    o.Run();
    Sql.Disconnect();
end

main
begin
    showSize("a","b","c","d","e");
end

public function showSize(VAR aCharArgList as aChar)
begin
    aCharArgList[1].Trace;
    aCharArgList[2].Trace;
    aCharArgList[3].Trace;
    aCharArgList.Size.Trace;     
end

main
objects begin
    a as aArray
end
begin
    a[1]=2;
    a[2]=4;
    a[3]=6;
    showSize(a);
end

public function showSize(a as aArray)
begin
    a[1].Trace;
    a[2].Trace;
    a[3].Trace;
    a.Size.Trace;     
end


On Open
begin
    SetEditMode(true);
    SetOption("AUTOEDITMODE", TRUE);
    Query();
    p_coment.Text = "1.- Edite un registro. " + 10.Character() +" 2.- Modifíquelo " + 10.Character() + " 3.- Pulse flecha abajo";
end

On Command AcceptEdit
begin
   dl_inf.Selected = dl_inf.AddString("Comando AcceptEdit");
    AcceptEdit();
end

On Command CancelEdit
begin
    dl_inf.Selected = dl_inf.AddString("Comando CancelEdit");
    CancelEdit();
    
end
On Command EditUpdate
begin
    dl_inf.Selected = dl_inf.AddString("Comando EditUpdate");
    MasterTable().EditUpdate();
end

On Command EditNew
begin
    dl_inf.Selected = dl_inf.AddString("Comando EditNew");
    MasterTable().EditNew();
end

On Edit Table states
begin
   dl_inf.Selected = dl_inf.AddString("on Edit"); 
end
main
objects
begin
oCAutoEditMode as CAutoEditMode
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("Stock");
    oCAutoEditMode.Run;
    Sql.Disconnect;
    Sql.DettachConnection;
end


On Open
begin
    Query();
    SetOption("AUTOEDITMODE", TRUE);
end

On Command Update
begin
    dl_inf.Selected = dl_inf.AddString("Comando Update");
    MasterTable().Update();
end
main
objects
begin
oCAutoEditMode as CAutoEditMode
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("Stock");
    oCAutoEditMode.Run;
    Sql.Disconnect;
    Sql.DettachConnection;
end

On Command (cmd as char)
begin
    switch cmd
    begin
        case "cmd_payforms":
            oFPayform.Run(Self);
        case "cmd_payformsL":
            oFPayformL.Run(Self);
        case "cmd_states":
            oStates.Run(Self);
        case "cmd_statesL":
            oStatesL.Run(Self);
    end
end
On Open
begin
    SetEditMode;
end
On Open
begin
    SetEditMode;
end

On Open
begin
    SetEditMode;
    if states.Status == "New" then
        Query;
end
On Open
begin
    SetEditMode;
    if payforms.Status == "New" then
        Query;
end
main(doRun as boolean default TRUE)
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.SqlExec("database stock");
    if doRun then
      menuAux.Run;
    else
      menuAux.Open;
    Sql.SqlExec("close database");    
end

On Click bfore
begin
    Mitab.Foreground = Rgb(255,0,0); // change the foreground color
    Yield;
end

On Click bbackground
begin
    Mitab.Background = Rgb(0,255,0); // change the background color    
    "No se puede modificar el color si está seleccionado el estilo XP".Trace();  
end

Main 
objects begin
    Miform as fr
end
begin
    Miform.Run;  
end

main
begin
    "First instruction".Trace;

    begin
        "Begin instruction".Trace;
        ;
        ;
        ;
        "End instruction".Trace;
    end

    "Last instruction".Trace;
end

main
objects begin
    n as smallint
    b as boolean
end
begin
    n = 3;
    if 5 between 1 and 12
    then
        "5 are between 1 and 12".Trace;
    else
        "5 aren't between 1 and 12".Trace;
end

On Click (sender as char)
objects begin
  s as char(60)
end
begin
    switch sender
    begin
        case "bmp1":
        begin
            bmp.Bitmap = CosmosDir + "\samples\imagenes\Felicidad.bmp";
            s=bmp.Bitmap;
            s.Trace;
        end
  
        case "bmp2":
        begin
            bmp.Bitmap = CosmosDir + "\samples\imagenes\card.bmp"; 
            s=bmp.Bitmap;
            s.Trace;
        end
    end
end
main
objects begin
    f as MiForm
end
begin
    f.Run;
end

On Click (sender as char)
begin
    switch sender
    begin
        case "bmp1":
        begin
            bmp.Bitmap = CosmosDir + "\samples\imagenes\Felicidad.bmp";
        end
        case "bmp2":
        begin
            bmp.Bitmap =  CosmosDir + "\samples\imagenes\card.bmp"; 
        end
        case "stron":
        begin
            bmp.Stretch = TRUE; 
        end
        case "stroff":
        begin
            bmp.Stretch = FALSE; 
        end
    end
end
main
objects begin
f as MiForm
end
begin
    f.Run;  
end



public boolchar(b as boolean) return char
begin
    switch  b begin 
        case TRUE:
            return "True";
        case FALSE:
            return "False";
        default:
            return "Null";
    end
end

public test(p as MPage)
objects begin
 a b bnull as boolean
 ind as smallint
end
begin           
    ind = 0;
    for a as TRUE, FALSE, bnull do begin
        for b as TRUE, FALSE, bnull do begin
            ++ind;
            p.tab.CurrentRow = ind;
            p.va = boolchar(a);
            p.vb = boolchar(b);
            p.vnota = boolchar(not a);
            p.vaandb = boolchar(a and b);
            p.vaorb = boolchar(a or b);
            p.vaxorb = boolchar(a xor b);
            p.PrintVars;
        end         
    end
end


main
objects begin
    p as MPage
    imp as prndocument
end
begin
    imp.SetDocName("Boolean");
    imp.SetBufferPages(25);
    test(p);
    imp.SendPage(p);
    imp.Preview; 
end

main
objects
begin
    c as char
end
begin
    c = "Hello world";
    call c = "Hello world";
    
    c.Trace;
    c.Trace();
    call c.Trace;
    call c.Trace();

    (c + "!!").Trace;
    (c + "!!").Trace();
    call (c + "!!").Trace;
    call (c + "!!").Trace();
end


On Open
begin
    DoCenterSlideXShiftChart();
    DoCenterSlideXShiftLegend();
    DoPolarChart();
end

public function DoPolarChart()
objects begin
    xsize as integer
    ysize as integer
    legend as Char
    legendbackboxcolor as integer
    colorlabel as integer
    colorElement as integer
    i as integer
    layer as integer
    
    supCastillaLeon supAndalucia supCastillaLaMancha supAragon supExtremadura supCatalunya supGalicia as integer
    colorCastillaLeon colorExtremadura colorCastillaLaMancha colorAragon colorAndalucia colorCatalunya colorGalicia as integer
end
begin
   
    supCastillaLeon = 94224;
    supAndalucia = 87599;
    supCastillaLaMancha = 79461;
    supAragon = 47720;
    supExtremadura = 41634;
    supCatalunya = 32113;
    supGalicia = 29575;
    
    colorCastillaLeon = Rgb(255,0,0);
    colorExtremadura = Rgb(0,255,0);
    colorCastillaLaMancha = Rgb(0,0,255);
    colorAragon = Rgb(255,0,255);
    colorAndalucia = Rgb(255,255,0);
    colorCatalunya = Rgb(0,255,255);
    colorGalicia = Rgb(128,128,0);

    NewPieChart(ctr_chart1.Hwnd());

    SetBackColor(ctr_chart1.Hwnd());
    
    ctr_chart1.GetSize(xsize,ysize);
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize);

    if ctr_chart1.SetUserProc("ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

    ChartSetTitle(ctr_chart1.Hwnd(), "Superficie", "Calibri", Rgb(0,0,0));
    legend = 
            "CASTILLA-LEÓN (" +  SuperficieStrFromNumber(supCastillaLeon) +  ")|"+ colorCastillaLeon + 
            "|EXTREMADURA (" +  SuperficieStrFromNumber(supExtremadura) +  ")|"+ colorExtremadura + 
            "|CASTILLA LA MANCHA (" +  SuperficieStrFromNumber(supCastillaLaMancha) +  ")|"+ colorCastillaLaMancha + 
            "|ARAGÓN (" +  SuperficieStrFromNumber(supAragon) +  ")|"+ colorAragon + 
            "|ANDALUCÍA (" +  SuperficieStrFromNumber(supAndalucia) +  ")|"+ colorAndalucia + 
            "|CATALUÑA (" +  SuperficieStrFromNumber(supCatalunya) +  ")|"+ colorCatalunya + 
            "|GALICIA (" +  SuperficieStrFromNumber(supGalicia) +  ")|"+ colorGalicia + 
            "|";

    legendbackboxcolor = Rgb(255,255,255);
    ChartAddLegend(ctr_chart1.Hwnd(), legend, 2, 0, legendbackboxcolor, 0);

    
    ChartEnableBlur(ctr_chart1.Hwnd(), False);
    
    NewChartLayer(ctr_chart1.Hwnd(), 1, 7);

    colorlabel = Rgb(0,0,0);
    NewChartElement(ctr_chart1.Hwnd(), 1, supCastillaLeon, colorCastillaLeon, colorCastillaLeon, SuperficieStrFromNumber(supCastillaLeon), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supExtremadura, colorExtremadura, colorExtremadura, SuperficieStrFromNumber(supExtremadura), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supCastillaLaMancha, colorCastillaLaMancha, colorCastillaLaMancha, SuperficieStrFromNumber(supCastillaLaMancha), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supAragon, colorAragon, colorAragon, SuperficieStrFromNumber(supAragon), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supAndalucia, colorAndalucia, colorAndalucia, SuperficieStrFromNumber(supAndalucia), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supCatalunya, colorCatalunya, colorCatalunya, SuperficieStrFromNumber(supCatalunya), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supGalicia, colorGalicia, colorGalicia, SuperficieStrFromNumber(supGalicia), colorlabel);


    
    ChartSetXAxisColorLabel(ctr_chart1.Hwnd(), Module.Rgb(255, 0, 0));
    
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(90, 100, 102);
    micolorto = Module.Rgb(130,130, 130);

    micolorfrom =  micolorto = Module.Rgb(252,231,230);

    SetChartBackColor(hwnd, micolorfrom, micolorto);
end

On event Click control ctrSlideXShiftChart(e as event)
objects begin
    pos as integer
    xshift as decimal
    min max centerpos as smallint
end
begin
    pos = ctrSlideXShiftChart.Pos();
    min = ctrSlideXShiftChart.Min();
    max = ctrSlideXShiftChart.Max();
    centerpos = (max - min)/2;
    
    xshift = (pos - centerpos)/10;
    ChartGraphSetXShift(ctr_chart1.Hwnd(), xshift);
    
    txtShiftGraph.Text = xshift;
end

private function DoCenterSlideXShiftChart()
objects begin
    min max centerpos as smallint
end
begin
    min = ctrSlideXShiftChart.Min();
    max = ctrSlideXShiftChart.Max();
    centerpos = (max - min)/2;    
    ctrSlideXShiftChart.SetPos(centerpos);
end

On event Click control ctrSlideXShiftLegend(e as event)
objects begin
    pos as integer
    xshift as decimal
    min max centerpos as smallint
end
begin
    pos = ctrSlideXShiftLegend.Pos();
    min = ctrSlideXShiftLegend.Min();
    max = ctrSlideXShiftLegend.Max();
    centerpos = (max - min)/2;
    
    xshift = (pos - centerpos)/10;
    
    ChartLegendSetXShift(ctr_chart1.Hwnd(), xshift);
    
    txtShiftLegend.Text = xshift;
end

private function DoCenterSlideXShiftLegend()
objects begin
    min max centerpos as smallint
end
begin
    min = ctrSlideXShiftLegend.Min();
    max = ctrSlideXShiftLegend.Max();
    centerpos = (max - min)/2;    
    ctrSlideXShiftLegend.SetPos(centerpos);
end

private function SuperficieStrFromNumber(superficie as integer) return char
objects begin
    ret as char
    retK as integer
end
begin
    retK = (superficie/1000);
    ret = retK;
    ret += "K km2";
    
    return ret;
end

main
objects
begin
    o as frmPieChart
end
begin
    o.Run();
end


On Open
objects begin
    legendbackboxcolor as integer
end
begin
    
    CreateChart();
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "2009|2010|2011|2012|2013|");
    DoBarChart();    
    legendbackboxcolor = Rgb(255,255,255);
    legendStr = legendStr2 +legendStr3+legendStr4;
    ChartAddLegend(ctr_chart1.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);
    
    ChartSetMultiBarType(ctr_chart1.Hwnd(),1);
  
end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart1.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart1.Hwnd());
    
    ChartEnableBlur(ctr_chart1.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart1.Hwnd(),Rgb(255,255,255));
    ctr_chart1.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart1.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
    ChartSetTitle(ctr_chart1.Hwnd(), "Barras Agrupadas", "MS Sans Seriff", Rgb(255,255,255));


    if ctr_chart1.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end

public function DoBarChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
   
    colorlabellinea as integer  
    maxValue as smallint
end
begin


    NewChartLayer(ctr_chart1.Hwnd(), 2, 1);
    
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(0, 200, 200);
    micolorto = Module.Rgb(0, 255, 255);
    value = 4.5   ;

        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(0, maxValue);
            NewChartElement(ctr_chart1.Hwnd(),2, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
            

        end
    legendStr2 = "IBIZA|" + micolorto + "|";
    
    ChartLayerSet3D(ctr_chart1.Hwnd(), 2, TRUE);    


    
    NewChartLayer(ctr_chart1.Hwnd(), 3, 1);
    colorlabellinea = Rgb(200, 100, 100);
    micolorfrom = Module.Rgb(200, 100, 100);
    micolorto = Module.Rgb(123, 100, 255);
    value = 3.5   ;

        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(0, maxValue);
            NewChartElement(ctr_chart1.Hwnd(),3, value, micolorfrom, micolorto, value.Char , colorlabellinea);

        end
    legendStr3 = "TOLEDO|" + micolorto + "|";    
    
    ChartLayerSet3D(ctr_chart1.Hwnd(),3, TRUE);    


    
    NewChartLayer(ctr_chart1.Hwnd(), 4, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(250, 250, 050);
    micolorto = Module.Rgb(251, 125, 0);
    value = 4.5   ;
        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(4, maxValue);
            NewChartElement(ctr_chart1.Hwnd(), 4, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);

        end
    legendStr4 = "LEON|" + micolorto + "|";
    ChartLayerSet3D(ctr_chart1.Hwnd(), 4, TRUE);    
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorto = Module.Rgb(255, 255, 255);
    micolorfrom = Module.Rgb(200,200,200);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end


main
objects
begin
    o as frmBarrasAgrupadas
end
begin
    o.Run();
end


On Open
objects begin
    legendbackboxcolor as integer
end
begin
    
    CreateChart();
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "2009||2011||2013|");
    DoBarChart();    
    legendbackboxcolor = Rgb(255,255,255);
    legendStr = legendStr2 +legendStr3+legendStr4;
    ChartAddLegend(ctr_chart1.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);
    
    ChartSetMultiBarType(ctr_chart1.Hwnd(),1);
    ChartHideLineOnNullLabel(ctr_chart1.Hwnd(),TRUE) ;
end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart1.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart1.Hwnd());
    
    ChartEnableBlur(ctr_chart1.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart1.Hwnd(),Rgb(255,255,255));
    ctr_chart1.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart1.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
    ChartSetTitle(ctr_chart1.Hwnd(), "Barras Agrupadas", "MS Sans Seriff", Rgb(255,255,255));


    if ctr_chart1.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end

public function DoBarChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
   
    colorlabellinea as integer  
    maxValue as smallint
end
begin


    NewChartLayer(ctr_chart1.Hwnd(), 2, 1);
    
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(0, 200, 200);
    micolorto = Module.Rgb(0, 255, 255);
    value = 4.5   ;

        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(0, maxValue);
            NewChartElement(ctr_chart1.Hwnd(),2, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
            

        end
    legendStr2 = "IBIZA|" + micolorto + "|";
    
    ChartLayerSet3D(ctr_chart1.Hwnd(), 2, TRUE);    


    
    NewChartLayer(ctr_chart1.Hwnd(), 3, 1);
    colorlabellinea = Rgb(200, 100, 100);
    micolorfrom = Module.Rgb(200, 100, 100);
    micolorto = Module.Rgb(123, 100, 255);
    value = 3.5   ;

        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(0, maxValue);
            NewChartElement(ctr_chart1.Hwnd(),3, value, micolorfrom, micolorto, value.Char , colorlabellinea);

        end
    legendStr3 = "TOLEDO|" + micolorto + "|";    
    
    ChartLayerSet3D(ctr_chart1.Hwnd(),3, TRUE);    


    
    NewChartLayer(ctr_chart1.Hwnd(), 4, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(250, 250, 050);
    micolorto = Module.Rgb(251, 125, 0);
    value = 4.5   ;
        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(4, maxValue);
            NewChartElement(ctr_chart1.Hwnd(), 4, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);

        end
    legendStr4 = "LEON|" + micolorto + "|";
    ChartLayerSet3D(ctr_chart1.Hwnd(), 4, TRUE);    
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorto = Module.Rgb(255, 255, 255);
    micolorfrom = Module.Rgb(200,200,200);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end


main
objects
begin
    o as frmBarrasAgrupadas
end
begin
    o.Run();
end


On Open
objects begin
    legendbackboxcolor as integer
end
begin
    
    CreateChart();
    ChartSetXAxysLabels(ctr_chart2.Hwnd(), "2009|2010|2011|2012|2013|");
    DoBarChart();    
    legendbackboxcolor = Rgb(255,255,255);
    legendStr = legendStr1 + legendStr2 +legendStr3+legendStr4;
    ChartAddLegend(ctr_chart2.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);
    
    ChartSetMultiBarType(ctr_chart2.Hwnd(),2);
end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart2.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart2.Hwnd());
    
    ChartEnableBlur(ctr_chart2.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart2.Hwnd(), -1);
    ctr_chart2.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart2.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart2.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
    ChartSetTitle(ctr_chart2.Hwnd(), "Barras Apiladas", "MS Sans Seriff", Rgb(255,255,255));

    if ctr_chart2.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end


public function DoBarChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
   
    colorlabellinea as integer  
    maxValue as smallint
end
begin


    NewChartLayer(ctr_chart2.Hwnd(), 2, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(0, 255, 255);
    value = 4.5   ;

        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = maxValue + Module.Random(0, maxValue);
            NewChartElement(ctr_chart2.Hwnd(),2, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
            
        end
    legendStr2 = "IBIZA|" + micolorto + "|";
    
    ChartLayerSet3D(ctr_chart2.Hwnd(), 2, FALSE);    


    
    NewChartLayer(ctr_chart2.Hwnd(), 3, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(123, 100, 255);
    value = 3.5   ;

        maxValue = 3000;
        for i = 1 to 5 do
        begin
            value = maxValue + Module.Random(0, maxValue);
            NewChartElement(ctr_chart2.Hwnd(),3, value, micolorfrom, micolorto, value.Char , colorlabellinea);
        end
    legendStr3 = "TOLEDO|" + micolorto + "|";    
    
    ChartLayerSet3D(ctr_chart2.Hwnd(),3, FALSE);    


    
    NewChartLayer(ctr_chart2.Hwnd(), 4, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(251, 125, 0);
    value = 4.5   ;
        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = maxValue + Module.Random(4, maxValue);
            NewChartElement(ctr_chart2.Hwnd(), 4, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
        end
    legendStr4 = "LEON|" + micolorto + "|";
    ChartLayerSet3D(ctr_chart2.Hwnd(), 4, FALSE);    
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(130,130, 130);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end

main
objects
begin
    o as frmBarrasApiladas
end
begin
    o.Run();
end


On Open
objects begin
    legendbackboxcolor as integer
end
begin
    
    CreateChart();
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "2009|2010|2011|2012|2013|");
    DoBarChart();    
    legendbackboxcolor = Rgb(255,255,255);
    legendStr =  legendStr1 + legendStr2 +legendStr3+legendStr4;
    ChartAddLegend(ctr_chart1.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);
    
    ChartSetMultiBarType(ctr_chart1.Hwnd(),3);

end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart1.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart1.Hwnd());
    
    ChartEnableBlur(ctr_chart1.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart1.Hwnd(), -1);
    ctr_chart1.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart1.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
    ChartSetTitle(ctr_chart1.Hwnd(), "Gráficos de Barras Porcentuales", "MS Sans Seriff", Rgb(250,250,250));

    if ctr_chart1.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end

public function DoBarChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
    
    colorlabellinea as integer  
    maxValue as smallint
end
begin


    NewChartLayer(ctr_chart1.Hwnd(), 2, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(0, 255, 255);
    value = 4.5   ;

        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(0, maxValue);
            NewChartElement(ctr_chart1.Hwnd(),2, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
        end
    legendStr2 = "IBIZA|" + micolorto + "|";
    
    ChartLayerSet3D(ctr_chart1.Hwnd(), 2, TRUE);    


    
    NewChartLayer(ctr_chart1.Hwnd(), 3, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(123, 100, 255);
    value = 3.5   ;

        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(0, maxValue);
            NewChartElement(ctr_chart1.Hwnd(),3, value, micolorfrom, micolorto, value.Char , colorlabellinea);
        end
    legendStr3 = "TOLEDO|" + micolorto + "|";    
    
    ChartLayerSet3D(ctr_chart1.Hwnd(),3, TRUE);    


    
    NewChartLayer(ctr_chart1.Hwnd(), 4, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(251, 125, 0);
    value = 4.5   ;
        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = Module.Random(4, maxValue);
            NewChartElement(ctr_chart1.Hwnd(), 4, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
        end
    legendStr4 = "LEON|" + micolorto + "|";
    ChartLayerSet3D(ctr_chart1.Hwnd(), 4, TRUE);    
end


public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(230,230, 230);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end


main
objects
begin
    o as frmBarrasPorcentuales
end
begin
    o.Run();
end


On Open
objects begin
    legendbackboxcolor as integer
end
begin
    
    CreateChart();
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "2009|2010|2011|2012|2013|");
    DoBarChart();    
    DoLineChart();
    legendbackboxcolor = Rgb(255,255,255);
    legendStr = legendStr1 + legendStr2 +legendStr3+legendStr4;
    ChartAddLegend(ctr_chart1.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);
    
    ChartSetMultiBarType(ctr_chart1.Hwnd(),1);
    ChartSetShortYAxisLabel(ctr_chart1.Hwnd(), false, true);
    ChartSetShortYAxisLabel(ctr_chart1.Hwnd(), true, true);
    
    ChartSetTitleScale(ctr_chart1.Hwnd(),3);
    ChartSetYAxisColorLabel(ctr_chart1.Hwnd(), true, Rgb(0,0,0));
    ChartSetYAxisColorLabel(ctr_chart1.Hwnd(), false, Rgb(255,0,0));
end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart1.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart1.Hwnd());
    
    ChartEnableBlur(ctr_chart1.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart1.Hwnd(), -1);
    ctr_chart1.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart1.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
    ChartSetTitle(ctr_chart1.Hwnd(), "Gráficos Combinados (Barras y Líneas)", "MS Sans Seriff", Rgb(0,0,0));


    if ctr_chart1.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end

public function DoBarChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
    
    colorlabellinea as integer  
    maxValue as smallint
end
begin


    NewChartLayer(ctr_chart1.Hwnd(), 2, 1);
    colorlabellinea = Module.Rgb(0, 100, 255);
    micolorfrom = Module.Rgb(0, 100, 255);
    micolorto = Module.Rgb(0, 255, 255);



    maxValue = 1000;
    for i = 1 to 5 do
    begin
        value = Module.Random(0, maxValue);
            
        NewChartElement(ctr_chart1.Hwnd(),2, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
        
        LFnContabilizarVentas(i,2, value);
    end
    
    legendStr2 = "IBIZA|" + micolorto + "|";
    
    ChartLayerSet3D(ctr_chart1.Hwnd(), 2, FALSE);    


    
    NewChartLayer(ctr_chart1.Hwnd(), 3, 1);
    colorlabellinea = Module.Rgb(251, 125, 0);
    micolorfrom = Module.Rgb(251, 125, 0);
    micolorto = Module.Rgb(255, 255, 255);


    maxValue = 1000;
    for i = 1 to 5 do
    begin
        value = Module.Random(0, maxValue);
        NewChartElement(ctr_chart1.Hwnd(),3, value, micolorfrom, micolorto, value.Char , colorlabellinea);
        LFnContabilizarVentas(i,3, value);
    end
    legendStr3 = "TOLEDO|" + micolorfrom + "|";    
    
    ChartLayerSet3D(ctr_chart1.Hwnd(),3, FALSE);    


end

public function DoLineChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
    legendStr as Char default ""    
    legendbackboxcolor as integer
    colorlabellinea as integer  
    maxValue as smallint
end
begin

    NewChartLayer(ctr_chart1.Hwnd(), 1, 2);

    ChartLayerShiftToSecondaryYAxis(ctr_chart1.Hwnd(), 1, TRUE);    //Escala de valores en el eje de ordenadas secundario
    colorlabellinea = Module.Rgb(255, 0, 0);
    micolorfrom = Module.Rgb(255, 0, 0);
    micolorto = Module.Rgb(255, 0, 0);
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Using(4),  colorlabellinea);
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT2, micolorfrom, micolorto, valueT2.Using(4),  colorlabellinea);    
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT3, micolorfrom, micolorto, valueT3.Using(4),  colorlabellinea);    
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT4, micolorfrom, micolorto, valueT4.Using(4),  colorlabellinea);
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT5, micolorfrom, micolorto, valueT5.Using(4),  colorlabellinea);    
        legendStr1 = "Total facturado|" + micolorfrom + "|";

    legendbackboxcolor = Rgb(255,255,255);
    ChartLayerSet3D(ctr_chart1.Hwnd(), 1, FALSE);
    ChartLayerSetLineWidth(ctr_chart1.Hwnd(), 1, 0);
    ChartLayerSetDot(ctr_chart1.Hwnd(), 1, 10, 0, 1);
    
end


public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(230,230, 230);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end


Private LFnContabilizarVentas(i as smallint,pSerie as smallint, pvalue as decimal)
Objects begin
    lDcPrecio as decimal
end
begin
    
    switch pSerie
    begin
        case 2://IBIZA
            lDcPrecio = 12500;
        case 3:
            lDcPrecio = 12900;
        case 4:
            lDcPrecio = 13900;
        default:
            ;
    end

    switch i
    begin
        case 1:begin //2009
            valueT1 = (valueT1+(pvalue*lDcPrecio));
        end    
        case 2:begin
            valueT2 = (valueT2+(pvalue*lDcPrecio));
        end    
        case 3:begin
            valueT3 = (valueT3+(pvalue*lDcPrecio));
        end    
        case 4:begin
            valueT4 = (valueT4+(pvalue*lDcPrecio));
        end    
        case 5:begin
            
            valueT5 = (valueT5+(pvalue*lDcPrecio));
        end
    end

    
end

main
objects
begin
    o as frmBarraslineas
end
begin
    o.Run();
end


On Open
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart1.Hwnd());
    SetBackColor(ctr_chart1.Hwnd());
    ChartEnableBlur(ctr_chart1.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart1.Hwnd(),-1);
    ctr_chart1.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart1.Hwnd(), FALSE);
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize);
    ChartSetTitle(ctr_chart1.Hwnd(), "ChartHideLineOnNullLabel", "MS Sans Seriff", Rgb(255,255,255));
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "Ene||Mar||May||Jul||Sept||Nov||");
    
    if ctr_chart1.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end
    DoBarChart();    
    
end

public function DoBarChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
    legendStr as Char default ""    
    legendbackboxcolor as integer
    colorlabellinea as integer  
    maxValue as smallint
end
begin
    
    NewChartLayer(ctr_chart1.Hwnd(), 1, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(0, 213, 111);
    micolorto = Module.Rgb(0, 111, 111);
    colorlabellinea = Module.Rgb(0, 0, 0);
    value = 1.5   ;
    maxValue = 15;
    for i = 1 to 12 do
    begin
        value = Module.Random(0, maxValue);
        NewChartElement(ctr_chart1.Hwnd(), 1, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
    end

    legendbackboxcolor = Rgb(255,255,255);
    ChartLayerSet3D(ctr_chart1.Hwnd(), 1, FALSE);    
    ChartAddLegend(ctr_chart1.Hwnd(), legendStr, 1, 0, legendbackboxcolor,0);


    NewChartLayer(ctr_chart1.Hwnd(), 5, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(0, 255, 255);
    micolorto = Module.Rgb(0, 255, 255);
    colorlabellinea = Module.Rgb(0, 0, 0);;
    value = 4.5   ;
    maxValue = 15;
    for i = 1 to 12 do
    begin
        value = Module.Random(0, maxValue);
        NewChartElement(ctr_chart1.Hwnd(), 5, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
    end

    legendbackboxcolor = Rgb(255,255,255);
    ChartLayerSet3D(ctr_chart1.Hwnd(), 5, FALSE);    
    ChartAddLegend(ctr_chart1.Hwnd(), legendStr, 1, 0, legendbackboxcolor,0);

    NewChartLayer(ctr_chart1.Hwnd(), 7, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(123, 100, 255);
    micolorto = Module.Rgb(123, 100, 255);
    colorlabellinea = Module.Rgb(0, 0, 0);;;
    value = 3.5   ;
        maxValue = 15;
        for i = 1 to 12 do
        begin
            value = Module.Random(0, maxValue);
            NewChartElement(ctr_chart1.Hwnd(), 7, value, micolorfrom, micolorto, value.Char , colorlabellinea);
        end

    legendbackboxcolor = Rgb(255,255,255);
    ChartLayerSet3D(ctr_chart1.Hwnd(),7, FALSE);    
    ChartAddLegend(ctr_chart1.Hwnd(), legendStr, 1, 0, legendbackboxcolor,0);


end



public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(255, 255, 255);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end
On Click btn_labelhideline
begin

    ChartHideLineOnNullLabel(ctr_chart1.Hwnd(), not ChartIsHiddenLineOnNullLabel(ctr_chart1.Hwnd()));

end

main
objects
begin
end
begin

    f.Run;
end

private Dll "kernel32.dll" LoadLibraryA
    (
    aDllName as char
    )
    return integer

private Dll "kernel32.dll" FreeLibrary
    (
    aHandle as integer
    )
    return boolean
    

public Start
begin
    ChDir(CosmosDir+"\bin");
    aDllHandle = LoadLibraryA("ttchartdll.dll");
end

public ending
begin
    FreeLibrary(aDllHandle);
end


On Open
objects begin
    legendbackboxcolor as integer
end
begin
    
    CreateChart();
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "2009|2010|2011|2012|2013|");
    DoLineChart();
    legendbackboxcolor = Rgb(255,255,255);
    legendStr = legendStr1 ;
    ChartAddLegend(ctr_chart1.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);
    ChartSetShortYAxisLabel(ctr_chart1.Hwnd(),true, true);

end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart1.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart1.Hwnd());
    
    ChartEnableBlur(ctr_chart1.Hwnd(), true);
    ChartSetPanelBackColor(ctr_chart1.Hwnd(), Rgb(255,255,255));
    ctr_chart1.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart1.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
 


    if ctr_chart1.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end



public function DoLineChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
    legendStr as Char default ""    
    legendbackboxcolor as integer
    colorlabellinea as integer  
    maxValue as smallint
end
begin

    NewChartLayer(ctr_chart1.Hwnd(), 1, 2);

     
    colorlabellinea = Module. Rgb(255, 0, 0);
    micolorfrom = Module.Rgb(0,0,255);
    micolorto = Module.Rgb(0,0,255);
    for i = 1 to 5 do begin
        valueT1 = (100 * Random(i));
        NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    end
        legendStr1 = "Total facturado|" + micolorfrom + "|";


   

end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(255, 130, 60);
    micolorto = Module.Rgb(255,255, 225);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end

On Click btn_dots
objects begin
    is3d as boolean
    i as integer
    dotsize as integer
end
begin
    dotsize = 10; 
    ChartElementSetDot(ctr_chart1.Hwnd(), 1, 0, dotsize, Module.Rgb(255, 0, 0), 1);
    ChartElementSetDot(ctr_chart1.Hwnd(), 1, 1, dotsize, Module.Rgb(255, 0, 0), 1);
    ChartElementSetDot(ctr_chart1.Hwnd(), 1, 2, dotsize, Module.Rgb(255, 0, 0), 1);
    ChartElementSetDot(ctr_chart1.Hwnd(), 1, 4, dotsize, Module.Rgb(255, 0, 0), 1);
    
    
end
On event Click control btn_DotCapa(e as event)
begin
    ChartElementSetDot(ctr_chart1.Hwnd(), 1, 0, 0, Module.Rgb(255, 0, 0), 1);
    ChartElementSetDot(ctr_chart1.Hwnd(), 1, 1, 0, Module.Rgb(255, 0, 0), 1);
    ChartElementSetDot(ctr_chart1.Hwnd(), 1, 2, 0, Module.Rgb(255, 0, 0), 1);
    ChartElementSetDot(ctr_chart1.Hwnd(), 1, 4, 0, Module.Rgb(255, 0, 0), 1);
    
    ChartLayerSetDot(ctr_chart1.Hwnd(), 1, 10, Module.Rgb(255, 0, 0), 2);
end

On event Click control btn_espesor(e as event)
begin
    ChartLayerSetLineWidth(ctr_chart1.Hwnd(), 1, 5);
end
main
objects
begin
    o as frmLineasConMarcadores
end
begin
    o.Run();
end


On Open
objects begin
    legendbackboxcolor as integer
end
begin
    
    CreateChart();
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "2009|2010|2011|2012|2013|");
    DoLineChart();
    legendbackboxcolor = Rgb(255,255,255);
    legendStr = legendStr1 ;
    ChartAddLegend(ctr_chart1.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);

end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart1.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart1.Hwnd());
    
    ChartEnableBlur(ctr_chart1.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart1.Hwnd(), -1);
    ctr_chart1.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart1.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
    ChartSetTitle(ctr_chart1.Hwnd(), "Líneas Curvas (3D)", "MS Sans Seriff", Rgb(0,0,0));


    if ctr_chart1.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end



public function DoLineChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
    legendStr as Char default ""    
    legendbackboxcolor as integer
    colorlabellinea as integer  
    maxValue as smallint
end
begin

    NewChartLayer(ctr_chart1.Hwnd(), 1, 2);

     
    colorlabellinea = Module.Rgb(140, 70, 0);
    micolorfrom = Module.Rgb(255, 100, 0);
    micolorto = Module.Rgb(255, 100, 0);
    for i = 1 to 5 do begin
        valueT1 = (100 * Random(i));
        if i == 1 then valueT1 = 9000000;
        if i == 2 then valueT1 = 1000000;
        if i == 3 then valueT1 = 900000;
        NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    end
        legendStr1 = "Total facturado|" + micolorfrom + "|";

    legendbackboxcolor = Rgb(255,255,255);
    ChartLayerSet3D(ctr_chart1.Hwnd(), 1, TRUE);
    ChartLayerSetCurvedLine(ctr_chart1.Hwnd(),  1, TRUE);

end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(252, 252, 252);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end


main
objects
begin
    o as frmLineasCurvas
end
begin
    o.Run();
end

On Open
begin
    DoPieChart();
end

public function DoPieChart()
objects begin
    xsize as integer
    ysize as integer
    legend as Char
    legendbackboxcolor as integer
    colorlabel as integer
    colorElement as integer
    i as integer
end
begin
    NewPieChart(ctr_chart1.Hwnd());
    SetBackColor(ctr_chart1.Hwnd());
    
    ctr_chart1.GetSize(xsize,ysize);
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize);
    ChartSetTitle(ctr_chart1.Hwnd(), "Tooltip en Chart tipo Pie", "Arial Narrow", Rgb(0,0,0));
    legend = "Niños menores de 1 año|"+ Rgb(255,0,0) + "|Niños entre de 2 y 5 años|"+Rgb(0,255,0)+"|Niños entre de 6 y 10 años|"+Rgb(129,129,129)+"|Niños entre de 10 y 15 años|" + Rgb(0,0,255) + "|";
    
    ChartSetPanelBackColor(ctr_chart1.Hwnd(), Rgb(14, 237, 177));
    
    legendbackboxcolor = Rgb(255,255,255);
    ChartAddLegend(ctr_chart1.Hwnd(), legend, 1, 0, legendbackboxcolor, 0);
    if ctr_chart1.SetUserProc("ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end
    
    ChartSetPanelBackColor(ctr_chart1.Hwnd(), Rgb(0,255,0));
    
    
    NewChartLayer(ctr_chart1.Hwnd(), 1, 3);    
    colorlabel = Rgb(255,0,0);
    colorElement = Rgb(255,0,0);
    NewChartElement(ctr_chart1.Hwnd(), 1, 25, colorElement, colorElement,"Porcentaje: 25%", colorlabel);
    
    colorlabel = Rgb(0,255,0);    
    colorElement = Rgb(0,255,0);
    NewChartElement(ctr_chart1.Hwnd(), 1, 45, colorElement, colorElement,"Porcentaje: 45%|Niños 2-5 años", colorlabel);
    
    colorlabel = Rgb(129,129,129);
    colorElement = Rgb(129,129,129);
    NewChartElement(ctr_chart1.Hwnd(), 1, 10,colorElement, colorElement,"Porcentaje: 10%|Niños 6-10 años", colorlabel);

    colorlabel = Rgb(0,0,255);
    colorElement =  Rgb(0,0,255);
    NewChartElement(ctr_chart1.Hwnd(), 1, 30,colorElement,colorElement,"Porcentaje: 30%|Niños 10-15 años", colorlabel);

    ChartShowElementLabelAsTooltip(ctr_chart1.Hwnd(), True);
    
    ctr_txt.SetTextVerticalAlign(1);
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(90, 100, 102);
    micolorto = Module.Rgb(130,130, 130);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end
main
objects
begin
    o as frmPieChart
end
begin
    o.Run();
end

On Open
begin
    DoPolarChart();
end

public function DoPolarChart()
objects begin
    xsize as integer
    ysize as integer
    legend as Char
    legendbackboxcolor as integer
    colorlabel as integer
    colorElement as integer
    i as integer
    layer as integer
    
    supCastillaLeon supAndalucia supCastillaLaMancha supAragon supExtremadura supCatalunya supGalicia as integer
    colorCastillaLeon colorExtremadura colorCastillaLaMancha colorAragon colorAndalucia colorCatalunya colorGalicia as integer
end
begin
   
    supCastillaLeon = 94224;
    supAndalucia = 87599;
    supCastillaLaMancha = 79461;
    supAragon = 47720;
    supExtremadura = 41634;
    supCatalunya = 32113;
    supGalicia = 29575;
    
    colorCastillaLeon = Rgb(255,0,0);
    colorExtremadura = Rgb(0,255,0);
    colorCastillaLaMancha = Rgb(0,0,255);
    colorAragon = Rgb(255,0,255);
    colorAndalucia = Rgb(255,255,0);
    colorCatalunya = Rgb(0,255,255);
    colorGalicia = Rgb(128,128,0);

    NewPieChart(ctr_chart1.Hwnd());
    SetBackColor(ctr_chart1.Hwnd());
    
    ctr_chart1.GetSize(xsize,ysize);
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize);

    if ctr_chart1.SetUserProc("ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

    ChartSetTitle(ctr_chart1.Hwnd(), "CCAA con mayor superficie", "Calibri", Rgb(0,0,0));
    legend = "CASTILLA-LEÓN (" +  SuperficieStrFromNumber(supCastillaLeon) +  ")|"+ colorCastillaLeon + 
            "|EXTREMADURA (" +  SuperficieStrFromNumber(supExtremadura) +  ")|"+ colorExtremadura + 
            "|CASTILLA LA MANCHA (" +  SuperficieStrFromNumber(supCastillaLaMancha) +  ")|"+ colorCastillaLaMancha + 
            "|ARAGÓN (" +  SuperficieStrFromNumber(supAragon) +  ")|"+ colorAragon + 
            "|ANDALUCÍA (" +  SuperficieStrFromNumber(supAndalucia) +  ")|"+ colorAndalucia + 
            "|CATALUÑA (" +  SuperficieStrFromNumber(supCatalunya) +  ")|"+ colorCatalunya + 
            "|GALICIA (" +  SuperficieStrFromNumber(supGalicia) +  ")|"+ colorGalicia + 
            "|";

    legendbackboxcolor = Rgb(255,255,255);
    ChartAddLegend(ctr_chart1.Hwnd(), legend, 2, 0, legendbackboxcolor, 0);

    
    ChartEnableBlur(ctr_chart1.Hwnd(), False);
    
    NewChartLayer(ctr_chart1.Hwnd(), 1, 7);

    colorlabel = Rgb(0,0,0);
    NewChartElement(ctr_chart1.Hwnd(), 1, supCastillaLeon, colorCastillaLeon, colorCastillaLeon, SuperficieStrFromNumber(supCastillaLeon), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supExtremadura, colorExtremadura, colorExtremadura, SuperficieStrFromNumber(supExtremadura), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supCastillaLaMancha, colorCastillaLaMancha, colorCastillaLaMancha, SuperficieStrFromNumber(supCastillaLaMancha), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supAragon, colorAragon, colorAragon, SuperficieStrFromNumber(supAragon), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supAndalucia, colorAndalucia, colorAndalucia, SuperficieStrFromNumber(supAndalucia), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supCatalunya, colorCatalunya, colorCatalunya, SuperficieStrFromNumber(supCatalunya), colorlabel);
    NewChartElement(ctr_chart1.Hwnd(), 1, supGalicia, colorGalicia, colorGalicia, SuperficieStrFromNumber(supGalicia), colorlabel);

    
    ChartSetXAxisColorLabel(ctr_chart1.Hwnd(), Module.Rgb(255, 0, 0));
    
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin

    micolorfrom =  micolorto = Module.Rgb(252,231,230);

    SetChartBackColor(hwnd, micolorfrom, micolorto);
end


private function SuperficieStrFromNumber(superficie as integer) return char
objects begin
    ret as char
    retK as integer
end
begin
    retK = (superficie/1000);
    ret = retK;
    ret += "K km2";
    
    return ret;
end

main
objects
begin
    o as frmPieChart
end
begin
    o.Run();
end

On Open
begin
    DoRadarChart_01();
end

public function DoRadarChart_01()
objects begin
    xsize as integer
    ysize as integer
    legend as Char
    legendbackboxcolor as integer
    colorlabel as integer
    colorElement as integer
    layer as integer
    itemValue as integer
    layer_1_color as integer
    layer_2_color as integer
end
begin

    NewPieChart(ctr_chart1.Hwnd());

    SetBackColor(ctr_chart1.Hwnd());
    
    ctr_chart1.GetSize(xsize,ysize);
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize);

    ChartSetTitle(ctr_chart1.Hwnd(), "Distribución ventas por producto y año", "Calibri", Rgb(0,0,0));

    layer_1_color = Rgb(255, 99, 132);
    layer_2_color = Rgb(54, 62,235);
    
    legend = "Año 2021|"+ layer_1_color + 
            "|Año 2022|"+ layer_2_color +
            "|";
    ChartSetPanelBackColor(ctr_chart1.Hwnd(), Rgb(14, 237, 177));
    
    legendbackboxcolor = Rgb(255,255,255);
    ChartAddLegend(ctr_chart1.Hwnd(), legend, 2, 0, legendbackboxcolor, 0);

    if ctr_chart1.SetUserProc("ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end
    
    ChartEnableBlur(ctr_chart1.Hwnd(), False);
    ChartSetPanelBackColor(ctr_chart1.Hwnd(), Rgb(0,255,0));
    
    NewChartLayer(ctr_chart1.Hwnd(), 1, 8);  
    AddElementsToLayer(1, layer_1_color, 65, 59, 90, 81, 56, 55, 40); 
    ChartLayerSetDot(ctr_chart1.Hwnd(), 1, 10, layer_1_color, 1);

    NewChartLayer(ctr_chart1.Hwnd(), 2, 8);    
    AddElementsToLayer(2, layer_2_color, 28, 48, 40, 19, 96, 27, 100);
    ChartLayerSetDot(ctr_chart1.Hwnd(), 2, 10, layer_2_color, 2);

    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "Acelgas|Patatas|Tomates|Pepinos|Cebollas|Garbanzos|Judías|");
    ChartSetXAxisColorLabel(ctr_chart1.Hwnd(), Module.Rgb(0, 0, 128));
    
end

private function AddElementsToLayer(layerNumber as integer, colorLayer as integer, valores as arglist of decimal)
objects begin
    i num as integer
    val as decimal
    colorlabel colorElement as integer
end
begin
    colorElement = colorLayer;
    colorlabel = Rgb(0,0,0);
    num = valores.Size();
    for i = 1 to num do begin
        val = valores[i];
        NewChartElement(ctr_chart1.Hwnd(), layerNumber, val, colorElement, colorElement, val.Char, colorlabel);
    end
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = micolorto =  Module.Rgb(255,255, 255);
    micolorfrom =  micolorto = Module.Rgb(252,231,230);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end

On event Click control chkScaleType(e as event)
objects begin
    scaleType as integer
end
begin
    if chkScaleType.Checked then begin
        scaleType = 2;
    end else begin
        scaleType = 1;
    end
    ChartGraphRadarSetScaleType(ctr_chart1.Hwnd(), scaleType);
end
main
objects
begin
    o as frmPieChart
end
begin
    o.Run();
end


On Open
objects begin
    valor as integer
    micolor as integer
    i as integer
end
begin

    DoBarChart();
    DoLineChart();
    DoDonutChart();
    DoAreaChart();
    DoPieChart();
    DoLineStepChart();
end




On Click ctr_swap3d
begin
    if ChartLayerIs3D(ctr_chart1.Hwnd(),1) then
    begin
        ChartLayerSet3D(ctr_chart1.Hwnd(), 1, FALSE);
    end else begin
        ChartLayerSet3D(ctr_chart1.Hwnd(), 1, TRUE);
    end


    if ChartLayerIs3D(ctr_chart2.Hwnd(), 1) then
        ChartLayerSet3D(ctr_chart2.Hwnd(), 1, FALSE);
    else 
        ChartLayerSet3D(ctr_chart2.Hwnd(), 1, TRUE);

    if ChartLayerIs3D(ctr_chart3.Hwnd(), 1) then
        ChartLayerSet3D(ctr_chart3.Hwnd(), 1, FALSE);
    else 
        ChartLayerSet3D(ctr_chart3.Hwnd(), 1, TRUE);

    if ChartLayerIs3D(ctr_chart4.Hwnd(), 1) then
        ChartLayerSet3D(ctr_chart4.Hwnd(), 1, FALSE);
    else 
        ChartLayerSet3D(ctr_chart4.Hwnd(), 1, TRUE);

    if ChartLayerIs3D(ctr_chart5.Hwnd(), 1) then
        ChartLayerSet3D(ctr_chart5.Hwnd(), 1, FALSE);
    else 
        ChartLayerSet3D(ctr_chart5.Hwnd(), 1, TRUE);
        
    if ChartLayerIs3D(ctr_chart6.Hwnd(), 1) then
        ChartLayerSet3D(ctr_chart6.Hwnd(), 1, FALSE);
    else 
        ChartLayerSet3D(ctr_chart6.Hwnd(), 1, TRUE);

end

on Click ctr_swaphorizontal
begin
    if ChartIsHorizontal(ctr_chart1.Hwnd()) then
    begin
        ChartSwapXY(ctr_chart1.Hwnd(), FALSE);
    end else begin
        ChartSwapXY(ctr_chart1.Hwnd(), TRUE);
    end
    if ChartIsHorizontal(ctr_chart2.Hwnd()) then
    begin
        ChartSwapXY(ctr_chart2.Hwnd(), FALSE);
    end else begin
        ChartSwapXY(ctr_chart2.Hwnd(), TRUE);
    end
    if ChartIsHorizontal(ctr_chart4.Hwnd()) then
    begin
        ChartSwapXY(ctr_chart4.Hwnd(), FALSE);
    end else begin
        ChartSwapXY(ctr_chart4.Hwnd(), TRUE);
    end
    if ChartIsHorizontal(ctr_chart6.Hwnd()) then
    begin
        ChartSwapXY(ctr_chart6.Hwnd(), FALSE);
    end else begin
        ChartSwapXY(ctr_chart6.Hwnd(), TRUE);
    end
end

public function DoDonutChart()
objects begin
    xsize as integer
    ysize as integer
    legendbackboxcolor as integer
    legend as Char
end
begin
    NewPieChart(ctr_chart5.Hwnd());
    SetBackColor(ctr_chart5.Hwnd());
    
    ctr_chart5.GetSize(xsize,ysize);
    InitChartWindow(ctr_chart5.Hwnd(), xsize, ysize);
    ChartSetTitle(ctr_chart5.Hwnd(), "Chart tipo Donut", "Arial", Rgb(0,0,0));
    legendbackboxcolor = Rgb(255,255,255);
    legend = "Uno|"+ Rgb(255,0,0) + "|Dos|"+Rgb(255,255,0)+"|Tres|"+Rgb(127,0,0)+"|Cuatro|" + Rgb(127,127,0) + "|Cinco|" +Rgb(0,255,0) +    "|seis|" + Rgb(0,255,255) + "|siete|" + Rgb(0,127,0) + "|ocho|" + Rgb(0,127,127) + "|nueve|" + Rgb(0,0,127) + "|";
    ChartAddLegend(ctr_chart5.Hwnd(), legend, 1, 1, legendbackboxcolor, 0);
    ChartEnableBlur(ctr_chart5.Hwnd(), FALSE);
    if ctr_chart5.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end
    NewChartLayer(ctr_chart5.Hwnd(), 1, 5);    
    NewChartElement(ctr_chart5.Hwnd(), 1, 20, Rgb(255,0,0),Rgb(255,0,0), "20", Rgb(0, 0, 0));
    NewChartElement(ctr_chart5.Hwnd(), 1, 12, Rgb(255,255,0), Rgb(255,255,0), "12", Rgb(0, 0, 0));
    NewChartElement(ctr_chart5.Hwnd(), 1, 20, Rgb(127,0,0), Rgb(127,0,0), "20", Rgb(0, 0, 0));
    NewChartElement(ctr_chart5.Hwnd(), 1, 15, Rgb(127,127,0), Rgb(127,127,0),"15", Rgb(0, 0, 0));
    NewChartElement(ctr_chart5.Hwnd(), 1, 22, Rgb(0,255,0),Rgb(0,255,0),"22", Rgb(0, 0, 0));
    NewChartElement(ctr_chart5.Hwnd(), 1, 35, Rgb(0,255,255),Rgb(0,255,255),"35", Rgb(0, 0, 0));
    NewChartElement(ctr_chart5.Hwnd(), 1, 37, Rgb(0,127,0),Rgb(0,127,0),"37", Rgb(0, 127, 0));
    NewChartElement(ctr_chart5.Hwnd(), 1, 18, Rgb(0,127,127),Rgb(0,127,127),"18", Rgb(0, 0, 0));
    NewChartElement(ctr_chart5.Hwnd(), 1, 10, Rgb(0,0,127),Rgb(0,0,127),"10", Rgb(0, 0, 0));
    ChartLayerSet3D(ctr_chart5.Hwnd(), 1, TRUE);
end

public function DoBarChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as integer
    labelStr as Char
    legendStr as Char default ""    
    legendbackboxcolor as integer
    colorlabellinea as integer
end
begin

    NewXYChart(ctr_chart1.Hwnd());
    SetBackColor(ctr_chart1.Hwnd());
    
    ctr_chart1.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart1.Hwnd(), TRUE);
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize);
    ChartSetTitle(ctr_chart1.Hwnd(), "Chart tipo Barra", "MS Sans Seriff", Rgb(0,0,0));
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "uno|dos|tres|cuatro|cinco|seis|siete|");
    if ctr_chart1.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end
    NewChartLayer(ctr_chart1.Hwnd(), 1, 1);
    colorlabellinea = Rgb(0, 0, 0);
    NewChartLayer(ctr_chart1.Hwnd(), 3, 2);
    for i = 1 to 7 do
    begin
        micolorfrom = Module.Rgb(Random(0, 255), Random(0, 255), Random(0, 255));
        micolorto = micolorfrom;
        value = Random(-100, 100);
        labelStr = value;
        NewChartElement(ctr_chart1.Hwnd(), 1, value, micolorfrom, micolorto, labelStr, micolorfrom);
        NewChartElement(ctr_chart1.Hwnd(), 3, value, Rgb(0,0,255),Rgb(0,0,255),"", colorlabellinea);
        if i == 1 then begin
            legendStr = "Item " + i+ "|" + micolorfrom + "|";
        end else begin
            legendStr = legendStr + "Item " + i + "|" + micolorfrom + "|";
        end
    end
    legendbackboxcolor = Rgb(255,255,255);
    ChartLayerSet3D(ctr_chart1.Hwnd(), 1, FALSE);
    ChartAddLegend(ctr_chart1.Hwnd(), legendStr, 1, 0, legendbackboxcolor,0);
end

public function DoLineChart()
objects begin
    xsize as integer
    ysize as integer
    legend as Char
    legendbackboxcolor as integer
end
begin
    NewXYChart(ctr_chart2.Hwnd());
    SetBackColor(ctr_chart2.Hwnd());
    ctr_chart2.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart2.Hwnd(), TRUE);
    InitChartWindow(ctr_chart2.Hwnd(), xsize, ysize);
    ChartSetTitle(ctr_chart2.Hwnd(), "Chart tipo Linea", "Courier New", Rgb(0,0,0));
    ChartSetXAxysLabels(ctr_chart2.Hwnd(), "uno||tres||cinco||seis||ocho||diez||");
    legend = "Azul|"+ Module.Rgb(0, 0, 255) + "|Rojo|"+Module.Rgb(255,0, 0)+"|No existe|"+Module.Rgb(0, 255, 0)+"|";
    legendbackboxcolor = Rgb(255, 255, 255);
    ChartAddLegend(ctr_chart2.Hwnd(), legend, 1, 1, legendbackboxcolor, 0);
    if ctr_chart2.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

    NewChartLayer(ctr_chart2.Hwnd(), 2, 2);
    NewChartElement(ctr_chart2.Hwnd(), 2, 16, Rgb(0,0,255),Rgb(0,0,255),"16", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 24, Rgb(0,0,255),Rgb(0,0,255),"24", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 12, Rgb(0,0,255),Rgb(0,0,255),"12", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 17, Rgb(0,0,255),Rgb(0,0,255),"17", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 90, Rgb(0,0,255),Rgb(0,0,255),"90", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 44, Rgb(0,0,255),Rgb(0,0,255),"44", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 33, Rgb(0,0,255),Rgb(0,0,255),"33", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 25, Rgb(0,0,255),Rgb(0,0,255),"25", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 98, Rgb(0,0,255),Rgb(0,0,255),"98", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 12, Rgb(0,0,255),Rgb(0,0,255),"12", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 14, Rgb(0,0,255),Rgb(0,0,255),"14", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 2, 38, Rgb(0,0,255),Rgb(0,0,255),"38", Rgb(0, 0, 0));
    ChartLayerSet3D(ctr_chart2.Hwnd(), 2, TRUE);
    NewChartLayer(ctr_chart2.Hwnd(), 1, 2);
    NewChartElement(ctr_chart2.Hwnd(), 1, -16, Rgb(255,0,0),Rgb(255,0,0),"-16", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -24, Rgb(255,0,0),Rgb(255,0,0),null, Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -12, Rgb(255,0,0),Rgb(255,0,0),"-12", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -17, Rgb(255,0,0),Rgb(255,0,0),"-17", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -90, Rgb(255,0,0),Rgb(255,0,0),"-90", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -44, Rgb(255,0,0),Rgb(255,0,0),"-44", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -33, Rgb(255,0,0),Rgb(255,0,0),"-33", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -25, Rgb(255,0,0),Rgb(255,0,0),"-25", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -98, Rgb(255,0,0),Rgb(255,0,0),"-98", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -12, Rgb(255,0,0),Rgb(255,0,0),"-12", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -14, Rgb(255,0,0),Rgb(255,0,0),"-14", Rgb(0, 0, 0));
    NewChartElement(ctr_chart2.Hwnd(), 1, -38, Rgb(255,0,0),Rgb(255,0,0),"-38", Rgb(0, 0, 0));    
 
end

public function DoLineStepChart()
objects begin
    xsize as integer
    ysize as integer
    colorlabel as integer
    legendbackboxcolor as integer
    legend as Char
end
begin
    NewXYChart(ctr_chart6.Hwnd());
    SetBackColor(ctr_chart6.Hwnd());
    
    ctr_chart6.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart6.Hwnd(), TRUE);
    InitChartWindow(ctr_chart6.Hwnd(), xsize, ysize);
    ChartSetTitle(ctr_chart6.Hwnd(), "Chart tipo Linea Step", "Times New Roman", Rgb(0,0,0));
    ChartSetXAxysLabels(ctr_chart6.Hwnd(), "uno||tres||cinco||siete||nueve||once||");
    legendbackboxcolor = Rgb(255, 255, 255);
    legend = "Azul|"+ Module.Rgb(0, 0, 255) + "|Rojo|"+ Module.Rgb(255, 0, 0) +"|";
    ChartAddLegend(ctr_chart6.Hwnd(), legend, 0, 1, legendbackboxcolor, 0);
    if ctr_chart6.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

    NewChartLayer(ctr_chart6.Hwnd(), 2, 6);
    colorlabel = Rgb(0, 0, 0);
    NewChartElement(ctr_chart6.Hwnd(), 2, 16, Rgb(0,0,255),Rgb(0,0,255),"16", Rgb(0, 0, 0));
    NewChartElement(ctr_chart6.Hwnd(), 2, 24, Rgb(0,0,255),Rgb(0,0,255),"24", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 2, 12, Rgb(0,0,255),Rgb(0,0,255),"12", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 2, 17, Rgb(0,0,255),Rgb(0,0,255),"17", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 2, 90, Rgb(0,0,255),Rgb(0,0,255),"90", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 2, 44, Rgb(0,0,255),Rgb(0,0,255),"44", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 2, 33, Rgb(0,0,255),Rgb(0,0,255),"33", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 2, 25, Rgb(0,0,255),Rgb(0,0,255),"25", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 2, 98, Rgb(0,0,255),Rgb(0,0,255),"98", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 2, 12, Rgb(0,0,255),Rgb(0,0,255),"12", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 2, 14, Rgb(0,0,255),Rgb(0,0,255),"14", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 2, 38, Rgb(0,0,255),Rgb(0,0,255),"38", colorlabel);
    ChartLayerSet3D(ctr_chart6.Hwnd(), 2, TRUE);
    NewChartLayer(ctr_chart6.Hwnd(), 1, 6);
    NewChartElement(ctr_chart6.Hwnd(), 1, -16, Rgb(255,0,0),Rgb(255,0,0),"-16", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -24, Rgb(255,0,0),Rgb(255,0,0),"-24", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -12, Rgb(255,0,0),Rgb(255,0,0),"-12", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -17, Rgb(255,0,0),Rgb(255,0,0),"-17", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -90, Rgb(255,0,0),Rgb(255,0,0),"-90", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -44, Rgb(255,0,0),Rgb(255,0,0),"-44", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -33, Rgb(255,0,0),Rgb(255,0,0),"-33", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -25, Rgb(255,0,0),Rgb(255,0,0),"-25", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -98, Rgb(255,0,0),Rgb(255,0,0),"-98", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -12, Rgb(255,0,0),Rgb(255,0,0),"-12", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -14, Rgb(255,0,0),Rgb(255,0,0),"-14", colorlabel);
    NewChartElement(ctr_chart6.Hwnd(), 1, -38, Rgb(255,0,0),Rgb(255,0,0),"-38", colorlabel);
end

public function DoPieChart()
objects begin
    xsize as integer
    ysize as integer
    legend as Char
    legendbackboxcolor as integer
    colorlabel as integer
end
begin
    NewPieChart(ctr_chart3.Hwnd());
    SetBackColor(ctr_chart3.Hwnd());
    
    ctr_chart3.GetSize(xsize,ysize);
    InitChartWindow(ctr_chart3.Hwnd(), xsize, ysize);
    ChartSetTitle(ctr_chart3.Hwnd(), "Chart tipo Pie", "Arial Narrow", Rgb(0,0,0));
    legend = "Uno|"+ Rgb(255,0,0) + "|Dos|"+Rgb(255,255,0)+"|Tres|"+Rgb(127,0,0)+"|Cuatro|" + Rgb(127,127,0) + "|Cinco|" +Rgb(0,255,0) +    "|seis|" + Rgb(0,255,255) + "|siete|" + Rgb(0,127,0) + "|ocho|" + Rgb(0,127,127) + "|nueve|" + Rgb(0,0,127) + "|";
    
    ChartSetPanelBackColor(ctr_chart2.Hwnd(), Rgb(14, 237, 177));
    
    legendbackboxcolor = Rgb(255,255,255);
    ChartAddLegend(ctr_chart3.Hwnd(), legend, 1, 0, legendbackboxcolor, 0);
    if ctr_chart3.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end
    colorlabel = Rgb(255,0,0);
    NewChartLayer(ctr_chart3.Hwnd(), 1, 3);    
    NewChartElement(ctr_chart3.Hwnd(), 1, 20.3, Rgb(255,0,0),Rgb(255,0,0),"20 uno", colorlabel);
    colorlabel = Rgb(255,255,0);    
    NewChartElement(ctr_chart3.Hwnd(), 1, 12.45, Rgb(255,255,0),Rgb(255,255,0),"12 dos", colorlabel);
    colorlabel = Rgb(127,0,0);
    NewChartElement(ctr_chart3.Hwnd(), 1, 20.11, Rgb(127,0,0),Rgb(127,0,0),"20 tres", colorlabel);
    colorlabel = Rgb(127,127,0);
    NewChartElement(ctr_chart3.Hwnd(), 1, 15, Rgb(127,127,0),Rgb(127,127,0),"15 cuatro", colorlabel);
    colorlabel = Rgb(0,255,0);
    NewChartElement(ctr_chart3.Hwnd(), 1, 22.8, Rgb(0,255,0),Rgb(0,255,0),"22 cinco", colorlabel);
    colorlabel = Rgb(0,255,255);
    NewChartElement(ctr_chart3.Hwnd(), 1, 35.98, Rgb(0,255,255),Rgb(0,255,255),"35 seis", colorlabel);
    colorlabel = Rgb(0,0,0);
    NewChartElement(ctr_chart3.Hwnd(), 1, 37.04, Rgb(0,127,0),Rgb(0,127,0),"37 siete", colorlabel);
    colorlabel = Rgb(0,127,127);
    NewChartElement(ctr_chart3.Hwnd(), 1, 18.3, Rgb(0,127,127),Rgb(0,127,127),"18 ocho", colorlabel);
    colorlabel = Rgb(0,0,127);
    NewChartElement(ctr_chart3.Hwnd(), 1, 10.1, Rgb(0,0,127),Rgb(0,0,127),"10 nueve", colorlabel);
    ChartLayerSet3D(ctr_chart3.Hwnd(), 1, TRUE);
end

public function DoAreaChart()
objects begin
    xsize as integer
    ysize as integer
    colorlabelarea1 as integer
    colorlabelarea2 as integer
    colorlabellinea as integer
    legendbackboxcolor as integer
end
begin
    NewXYChart(ctr_chart4.Hwnd());
    SetBackColor(ctr_chart4.Hwnd());
    
    ctr_chart4.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart4.Hwnd(), TRUE);
    InitChartWindow(ctr_chart4.Hwnd(), xsize, ysize);
    ChartSetXAxysLabels(ctr_chart4.Hwnd(), "uno||tres||cinco||seis||ocho||diez||");
    ChartSetTitle(ctr_chart4.Hwnd(), "Chart tipo Area", "Verdana", Rgb(0,0,0));
    if ctr_chart4.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end
    colorlabelarea1 = Rgb(0, 0, 0);
    NewChartLayer(ctr_chart4.Hwnd(), 2, 4);
    NewChartElement(ctr_chart4.Hwnd(), 2, 10, Rgb(255,0,0), Rgb(255,0,0),"10", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, 20, Rgb(255,0,0), Rgb(255,0,0),"20", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, 10, Rgb(255,0,0), Rgb(255,0,0),"10", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, 12, Rgb(255,0,0), Rgb(255,0,0),"12", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, 5, Rgb(255,0,0), Rgb(255,0,0),"5", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, 18, Rgb(255,0,0), Rgb(255,0,0),"18", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, 66, Rgb(255,0,0), Rgb(255,0,0),"66", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, 33, Rgb(255,0,0), Rgb(255,0,0),"33", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, 11, Rgb(255,0,0), Rgb(255,0,0),"11", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, -77, Rgb(255,0,0), Rgb(255,0,0),"-77", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, 54, Rgb(255,0,0), Rgb(255,0,0),"54", colorlabelarea1);
    NewChartElement(ctr_chart4.Hwnd(), 2, 59, Rgb(255,0,0), Rgb(255,0,0),"59", colorlabelarea1);

    colorlabelarea2 = Rgb(0, 0, 255);
    NewChartLayer(ctr_chart4.Hwnd(), 1, 4);
    NewChartElement(ctr_chart4.Hwnd(), 1, 30, Rgb(255,255,0),Rgb(255,255,0),"30", colorlabelarea2);
    NewChartElement(ctr_chart4.Hwnd(), 1, 60, Rgb(255,255,0),Rgb(255,255,0),"60", colorlabelarea2);
    NewChartElement(ctr_chart4.Hwnd(), 1, 40, Rgb(255,255,0),Rgb(255,255,0),"40", colorlabelarea2);
    NewChartElement(ctr_chart4.Hwnd(), 1, 30, Rgb(255,255,0),Rgb(255,255,0),"30", colorlabelarea2);
    NewChartElement(ctr_chart4.Hwnd(), 1, 100, Rgb(255,255,0),Rgb(255,255,0),"100", colorlabelarea2);

    
    ChartLayerSet3D(ctr_chart4.Hwnd(), 1, TRUE);
    
    legendbackboxcolor = Rgb(255,255,255);
    ChartAddLegend(ctr_chart4.Hwnd(), "Area Roja|" + Rgb(255, 0, 0) + "|Area Amarilla|" + Rgb(0, 0, 255) + "|", 1, 0, legendbackboxcolor, 0);
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(245, 245, 245);
    micolorto = micolorfrom;
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end

On Click ctr_drop_element
begin
    RemoveChartElement(ctr_chart1.Hwnd(), 1, 1);// return boolean
end

On Click ctr_update_element
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as integer
    labelStr as Char
    legendStr as Char default ""    
    legendbackboxcolor as integer
    colorlabellinea as integer
end
begin
        micolorfrom = Module.Rgb(Random(0, 255), Random(0, 255), Random(0, 255));
        micolorto = Module.Rgb(Random(0, 255), Random(0, 255), Random(0, 255));
        value = Random(-100, 100);
        labelStr = value;
        UpdateChartElement(ctr_chart1.Hwnd(), 1, 2, value, micolorfrom, micolorto, labelStr, micolorfrom);
end
main
objects
begin
end
begin

    f.Run;
end

private Dll "kernel32.dll" LoadLibraryA
    (
    aDllName as char
    )
    return integer

private Dll "kernel32.dll" FreeLibrary
    (
    aHandle as integer
    )
    return boolean
    

public Start
begin
    ChDir(CosmosDir+"\bin");
end

public ending
begin
end

On Open
objects begin
    legendbackboxcolor as integer
end
begin
    
    CreateChart();
    ChartSetXAxysLabels(ctr_chart2.Hwnd(), "2009|2010|2011|2012|2013|");
    DoBarChart();    
    legendbackboxcolor = Rgb(255,255,255);
    legendStr = legendStr1 + legendStr2 +legendStr3+legendStr4;
    ChartAddLegend(ctr_chart2.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);
    
    
    ChartSetXAxisColorLabel(ctr_chart2.Hwnd(), 250);
    ChartSetXAxisColorLine(ctr_chart2.Hwnd(), 250);
    ChartSetYAxisColorLine(ctr_chart2.Hwnd(), 250);
    
    ChartSetMultiBarType(ctr_chart2.Hwnd(),2);
    
end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart2.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart2.Hwnd());
    
    ChartEnableBlur(ctr_chart2.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart2.Hwnd(), -1);
    ctr_chart2.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart2.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart2.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
    ChartSetTitle(ctr_chart2.Hwnd(), "Barras Apiladas", "MS Sans Seriff", Rgb(255,255,255));

    if ctr_chart2.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end


public function DoBarChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
   
    colorlabellinea as integer  
    maxValue as smallint
end
begin


    NewChartLayer(ctr_chart2.Hwnd(), 2, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(0, 255, 255);
    value = 4.5   ;

        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = maxValue + Module.Random(0, maxValue);
            NewChartElement(ctr_chart2.Hwnd(),2, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
            
        end
    legendStr2 = "IBIZA|" + micolorto + "|";
    
    ChartLayerSet3D(ctr_chart2.Hwnd(), 2, FALSE);    


    
    NewChartLayer(ctr_chart2.Hwnd(), 3, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(123, 100, 255);
    value = 3.5   ;

        maxValue = 3000;
        for i = 1 to 5 do
        begin
            value = maxValue + Module.Random(0, maxValue);
            NewChartElement(ctr_chart2.Hwnd(),3, value, micolorfrom, micolorto, value.Char , colorlabellinea);
        end
    legendStr3 = "TOLEDO|" + micolorto + "|";    
    
    ChartLayerSet3D(ctr_chart2.Hwnd(),3, FALSE);    


    
    NewChartLayer(ctr_chart2.Hwnd(), 4, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(251, 125, 0);
    value = 4.5   ;
        maxValue = 1000;
        for i = 1 to 5 do
        begin
            value = maxValue + Module.Random(4, maxValue);
            NewChartElement(ctr_chart2.Hwnd(), 4, value, micolorfrom, micolorto, value.Char ,  colorlabellinea);
        end
    legendStr4 = "LEON|" + micolorto + "|";
    ChartLayerSet3D(ctr_chart2.Hwnd(), 4, FALSE);    
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(130,130, 130);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end

main
objects
begin
    o as frmBarrasApiladas
end
begin
    o.Run();
end


On Open
begin
    
    CreateChart(ctr_chart1);
    CreateChart(ctr_chart2);
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "2009|2010|2011|2012|2013|");
    ChartSetXAxysLabels(ctr_chart2.Hwnd(), "2009|2010|2011|2012|2013|");
    DoLineChart(ctr_chart1);
    DoLineChart(ctr_chart2);


end

Private CreateChart( pCtrChart as SimpleControl)
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(pCtrChart.Hwnd()); //Solo pinta el area

    SetBackColor(pCtrChart.Hwnd());
    
    ChartEnableBlur(pCtrChart.Hwnd(), true);
    ChartSetPanelBackColor(pCtrChart.Hwnd(), Rgb(255,255,255));
    pCtrChart.GetSize(xsize,ysize);
    ChartSwapXY(pCtrChart.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(pCtrChart.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
 


    if pCtrChart.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end



public function DoLineChart(pCtrChart as SimpleControl)
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
    legendStr as Char default ""    
    legendbackboxcolor as integer
    colorlabellinea as integer  
    maxValue as smallint
end
begin

    NewChartLayer(pCtrChart.Hwnd(), 1, 2);

     
    colorlabellinea = Module. Rgb(255, 0, 0);
    micolorfrom = Module.Rgb(0,0,255);
    micolorto = Module.Rgb(0,0,255);
    
    valueT1 = (0.000001 * 15234);
    NewChartElement(pCtrChart.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = (0.000001 * 20883);
    NewChartElement(pCtrChart.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = (0.000001 * 18046);
    NewChartElement(pCtrChart.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = (0.000001 * 2851);
    NewChartElement(pCtrChart.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = (0.000001 * 14597);
    NewChartElement(pCtrChart.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);


    if pCtrChart.Name == "ctr_chart1" then begin
        ChartSetYAxisLabelScale(pCtrChart.Hwnd(),5, true);
    end
    ChartSetViewDataRange(pCtrChart.Hwnd(),TRUE, TRUE, 0, 0.05);
   

end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(255, 130, 60);
    micolorto = Module.Rgb(255,255, 225);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end

main
objects
begin
    o as frmLineas
end
begin
    o.Run();
end


On Open
objects begin
    legendbackboxcolor as integer
end
begin
    ctr_txt1.SetTextVerticalAlign(1);
    ctr_txt3.SetTextVerticalAlign(1);
    
    CreateChart();
    ChartSetXAxysLabels(ctr_chart2.Hwnd(), "2009|2010|2011|2012|2013|");
    DoBarChart();    
    legendbackboxcolor = Rgb(255,255,255);
    legendStr = legendStr1 + legendStr2 +legendStr3+legendStr4;
    ChartAddLegend(ctr_chart2.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);
    ChartShowElementLabelAsTooltip(ctr_chart2.Hwnd(), true); 
    ChartSetMultiBarType(ctr_chart2.Hwnd(),2);
end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart2.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart2.Hwnd());
    
    ChartEnableBlur(ctr_chart2.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart2.Hwnd(), -1);
    ctr_chart2.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart2.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart2.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
    ChartSetTitle(ctr_chart2.Hwnd(), "Tooltip en gráficos", "MS Sans Seriff", Rgb(255,255,255));

    if ctr_chart2.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end


public function DoBarChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
   
    colorlabellinea as integer  
    maxValue as smallint
    
    annoStr as char
    tooltipBodyStr as char
    tooltipTitleStr as char
    tooltipStr as char
end
begin


    NewChartLayer(ctr_chart2.Hwnd(), 2, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(0, 126, 255);
    micolorto = Module.Rgb(0, 255, 255);

    value = 4.5   ;

    maxValue = 1000;
    for i = 1 to 5 do
    begin
        value = maxValue + Module.Random(0, maxValue);
        annoStr = (2008 + i).Char;
        tooltipBodyStr =  "Valor: " + value.Char + 13.Character() + 10.Character()+ "Año: " + annoStr;
        tooltipTitleStr = "Modelo: Ibiza";
        tooltipStr = tooltipBodyStr + "|" + tooltipTitleStr;        
        NewChartElement(ctr_chart2.Hwnd(),2, value, micolorfrom, micolorto, tooltipStr,  colorlabellinea);
    end

    legendStr2 = "IBIZA|" + micolorto + "|";
    ChartLayerSet3D(ctr_chart2.Hwnd(), 2, FALSE);    

    
    NewChartLayer(ctr_chart2.Hwnd(), 3, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(123, 100, 255);
    micolorto = Module.Rgb(123, 100, 255);

    value = 3.5   ;

    maxValue = 3000;
    for i = 1 to 5 do
    begin
        value = maxValue + Module.Random(0, maxValue);
        NewChartElement(ctr_chart2.Hwnd(),3, value, micolorfrom, micolorto, value.Char , colorlabellinea);
    end

    legendStr3 = "TOLEDO|" + micolorto + "|";    
    ChartLayerSet3D(ctr_chart2.Hwnd(),3, FALSE);    


    
    NewChartLayer(ctr_chart2.Hwnd(), 4, 1);
    colorlabellinea = Rgb(0, 0, 0);
    micolorfrom = Module.Rgb(255, 255, 255); //Blanco. El color de fondo del Tooltip será el indicado en el SO
    micolorto = Module.Rgb(251, 125, 0);

    value = 4.5   ;
        maxValue = 1000;
    for i = 1 to 5 do
    begin
        value = maxValue + Module.Random(4, maxValue);
        annoStr = (2008 + i).Char;
        tooltipBodyStr =  "Valor: " + value.Char + 13.Character() + 10.Character()+ "Año: " + annoStr;
        tooltipTitleStr = "Modelo: León";
        tooltipStr = tooltipBodyStr + "|" + tooltipTitleStr;
        NewChartElement(ctr_chart2.Hwnd(), 4, value, micolorfrom, micolorto, tooltipStr ,  colorlabellinea);
    end
    legendStr4 = "LEON|" + micolorto + "|";
    ChartLayerSet3D(ctr_chart2.Hwnd(), 4, FALSE);    
end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(130,130, 130);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end

main
objects
begin
    oFrmBarras as frmBarrasApiladas
end
begin
    oFrmBarras.Run();
end

On Click (sender as char)
begin
    switch sender
    begin
        case "butcheck":
        begin
           micheck.Checked = TRUE;
        end
        case "butuncheck": 
        begin
           micheck.Checked = FALSE;
        end
    end
end
main
objects begin
    Miform as fr
end
begin
    Miform.Run;
end

On Click(s as char)
begin
    "The global notification is called".Trace;
end

On Click idmok
objects begin
    s as char
end
begin
    s="The idmok notification has been sent when pressing the button";
    s.Trace;
end

On command pp
objects begin
    s as char
end
begin
    s= "The command button is clicked";
    s.Trace;
end

main
objects begin
    Miform as ff
end
begin
    Miform.Run; 
end



main
objects
begin
    oMiArray as MiArray
    i as smallint
    fichero as char
    miArraySize as Integer
    miStream as Stream
end
begin
    miArraySize = oMiArray.Size();
    fichero = "SortArraySmallint.txt";
    for i = 1 to miArraySize  do
    begin
        if i%5 == 0 then continue;
        oMiArray[i] = i;
    end
    
    oMiArray.Sort(TRUE);
    
   
    miStream.Open(ProjectDir()+"\" + fichero, 2);
    for i = 1 to miArraySize do
    begin
        miStream.Write(oMiArray[i]).NewLine();
    end
    miStream.Close();
    

    CreaArrayEstructura("SortArrayStructCodigo.txt" , TRUE);
    BusquedaBinaria("SortArrayStructApellido_2.txt",TRUE);
end

public function CreaArrayEstructura(fichero as char, ascending as boolean)
objects
begin
    miArray as CArrayStruct
    miArraySize as integer
    i as integer
    miRegistro as CRegisterStruct
    miStream as Stream
    
    pos as integer
end
begin
    miArraySize = 100;
    miArray.Resize(miArraySize);
    
    for i = 1 to miArraySize do
    begin
        miArray[i].codigo = Random(1, miArraySize);
        miArray[i].nombre = "nombre_" + i.Char;
        miArray[i].apellido_1 = "apellido_1_" +Random(1, i).Char ;
        miArray[i].apellido_2 = "apellido_2_" + i.Char;
    end
    
    miArray.Sort(ascending, "codigo");

    miStream.Open(ProjectDir()+"\" + fichero, 2);
    for i = 1 to miArraySize do
    begin
        miStream.Write(miArray[i].codigo).NewLine();
    end
    miStream.Close();
    

    
end

Public BusquedaBinaria(fichero as char, ascending as boolean)
objects
begin
    miArray as CArrayStruct
    miArraySize as integer
    i as integer
    miRegistro as CRegisterStruct
    miStream as Stream
    
    pos as integer
end
begin
    miArraySize = 100;
    miArray.Resize(miArraySize);
    
    for i = 1 to miArraySize do
    begin
        miArray[i].codigo = Random(1, miArraySize);
        miArray[i].nombre = "nombre_" + i.Char;
        miArray[i].apellido_1 = "apellido_1_" +Random(1, i).Char ;
        miArray[i].apellido_2 = "apellido_2_" + i.Char;
    end
    miStream.Open(ProjectDir()+"\" + fichero, 2);
    for i = 1 to miArraySize do
    begin
        miStream.Write(miArray[i].apellido_2).NewLine();
    end
    miStream.Close();
    

    
    miArray.Sort(TRUE, "apellido_2");
    miArray.BinarySearch("apellido_2_77" , TRUE , pos , "apellido_2");
    pos.Trace();
end

main
objects
begin
    lCh as char
end
begin
    lCh= "Ññáéí";
    lCh.AnsiToUTF8(1252).Trace;
    lCh.UTF8ToAnsi(1252).Trace;
end

public function CreaJSon_Ejemplo1
objects
begin
    mijson as json
    charJson as char
    charStr as char
    fecha as date
    otrojson as json
end
begin
    charJson = '{ "employees" : [' +
    '{ "firstName":"John" , "lastName":"Doe" },' +
    '{ "firstName":"Anna" , "lastName":"Smith" },' +
    '{ "firstName":"Peter" , "lastName":"Jones" } ]}';
    
    charJson.Trace();
    mijson.LoadFromChar(charJson);
    mijson.SaveToFile(ProjectDir() + "\salida.json");    
    mijson.SaveToFile(ProjectDir() + "\salida_formateada.json", TRUE);
    mijson.SaveToFile(ProjectDir() + "\salida_noformateada.json", FALSE);
    mijson.Trace();    
    
    otrojson.LoadFromFile(ProjectDir() + "\salida_noformateada.json");
    otrojson.Trace();
    
    charStr = mijson;
    charStr.Trace();
    
    charStr = mijson.GetString(TRUE);
    charStr.Trace();
    charStr = mijson.GetString(FALSE);
    charStr.Trace();
    mijson.Trace();
end



Public CargarJsonDesdeFichero() 
begin
    LoadFromFile(ProjectDir()+"\\salida_noformateada.json");
    Trace;
    Clear();
end    


Public CreaFicheroJsonArray()
Objects begin
    jsonElement as json
    jsonArray as json
end
Begin
    jsonArray.SetAsArray();
    jsonElement.Set("AMERICAN SOFTWARE DESIGN", "2356.23");
    jsonElement.Set("CSP BUSINESS INC", "6354.20");
    jsonArray.AddArrayElement(jsonElement);
    jsonElement.Set("arrayClientes", jsonArray);
    jsonElement.SaveToFile(ProjectDir + "\JsonArray.json");
    OpenFileWithDefaultApp(ProjectDir + "\JsonArray.json");
    jsonArray.GetType().Trace();
    jsonArray.Clear();
end
Public CreaFicheroJson()
Begin
    Set("AMERICAN SOFTWARE DESIGN", "2356.23");
    Set("CSP BUSINESS INC", "6354.20");
    SaveToFile(ProjectDir + "\Json.json");
    OpenFileWithDefaultApp(ProjectDir + "\Json.json");
    Trace;
    Clear();
        
end


Public DeleteFicheroJson()
Begin
    Set("AMERICAN SOFTWARE DESIGN", "2356.23");
    Set("CSP BUSINESS INC", "6354.20");
    Trace;
    Delete("CSP BUSINESS INC");
    Trace;
    Clear();
    
end

main
objects begin

end
begin
    oCJson.CreaJSon_Ejemplo1();
    oCJson.CreaFicheroJsonArray();
    oCJson.CreaFicheroJson();
    
    oCJson.CargarJsonDesdeFichero();
    oCJson.DeleteFicheroJson();
end    

main
objects
begin
end
begin
    Module.SetExecStatus(100);
    Module.GetExecStatus().Trace();
end



On event Click control btn_Cws(e as event)
begin
    
    System(CosmosDir()+"\bin\cosmoswebserver.exe -ini "+ CosmosDir()+"\etc\cwsdemo.ini");
    
end

On event Click control btn_Get(e as event)
begin
    Box_respuesta.Reset();
    panel_codhttp.Reset();
    Box_respuesta.Page = 1;
    PeticionGet();
end

On event Click control btn_Post(e as event)
begin
    Box_respuesta.Reset();
    panel_codhttp.Reset();
    Box_respuesta.Page = 1;
    PeticionPostCreate();
end

On event Click control btn_Post2(e as event)
begin
    Box_respuesta.Reset();
    panel_codhttp.Reset();
    Box_respuesta.Page = 1;
    PeticionPost_resultCount();
end


On event Click control btn_Post3(e as event)
begin
    panel_codhttp.Reset();
    PeticionPost_resultList();
end

On event Click control btn_delete(e as event)
begin
    panel_codhttp.Reset();
    PeticionDelete();
end


private function PeticionGet()
objects
begin
    httpreq as integer
    httpres as integer
    serverUrl as Char
    useSSL as boolean
    bodyFile as char
    oJSonRespuesta as Json
end
begin
    useSSL = FALSE;
    
    httpreq = CosHttpNewRequest(); //Crea la petición en el servidor

    CosHttpSetTimeout(httpreq,10);
    
    serverUrl = "http://localhost:8080/stock/rest/states/"+vState_Get;
    CosHttpRequestSetUrl(httpreq, serverUrl);//En esta función se indicará la url a la que se van a realizar las peticiones.
    
    CosHttpRequestSetMethod(httpreq, "GET"); //En esta función se indicará el método que ejecutará la petición.
    
    CosHttpSetResponseFile(httpreq, ProjectDir() + "\bodyResponseCWS.xml"); //Esta función se indica el fichero donde se dejará el cuerpo de la respuesta del servidor.
    
    CosHttpSetResponseHeaderFile(httpreq,ProjectDir() + "\headerResponseCWS.txt");//Esta función se indica el fichero donde se dejará la cabecera de la respuesta del servidor.

    CosHttpSendRequest(httpreq, false); //Envía la petición al servidor. Se craen el/los fichero/s donde se podrá leer la respuesta del servidor.

    httpres = CosHttpGetReturnCode(httpreq); // Esta función retorna el código de estado del protocolo http.
    panel_codhttp.Text = "" + httpres ; 

    
    oJSonRespuesta.LoadFromFile(ProjectDir() + "\bodyResponseCWS.xml");
    oFrm.Respuesta = oJSonRespuesta.GetString(true).UTF8ToAnsi(1252); 
    Yield;
    CosHttpFreeRequest(httpreq); //Libera la petición

end



private function PeticionPostCreate()
objects
begin
    httpreq as integer
    httpres as integer
    serverUrl as Char
    useSSL as boolean
    bodyFile as char
    oJSon oJSonRespuesta  js as Json
    bodyStr as char
end
begin
    useSSL = FALSE;
    Delete(ProjectDir() + "\bodyResponseCWS.xml");
    Delete(ProjectDir() + "\\headerResponseCWS.txt");
    
    
    oJSon.Set("state", vstate);
    oJSon.Set("sname", vsname);

    bodyStr=oJSon;
    js.LoadFromChar(bodyStr);
    
    httpreq = CosHttpNewRequest(); //Crea la petición en el servidor

    CosHttpSetTimeout(httpreq,10);
    
    serverUrl = "http://localhost:8080/stock/rest/states";
    CosHttpRequestSetUrl(httpreq, serverUrl);//En esta función se indicará la url a la que se van a realizar las peticiones.
    CosHttpRequestAddHeaderStr(httpreq, 'Content-Type: text/html; charset=ISO-8859-1');

    CosHttpRequestSetBody(httpreq, bodyStr, FALSE); //En esta función se indicará el cuerpo que se enviará al servidor. En este ejemplo será un objeto char
    
    CosHttpRequestSetMethod(httpreq, "POST"); //En esta función se indicará el método que ejecutará la petición.
    
    CosHttpSetResponseFile(httpreq, ProjectDir() + "\bodyResponseCWS.xml"); //Esta función se indica el fichero donde se dejará el cuerpo de la respuesta del servidor.
    
    CosHttpSetResponseHeaderFile(httpreq,ProjectDir() + "\headerResponseCWS.txt");//Esta función se indica el fichero donde se dejará la cabecera de la respuesta del servidor.

    CosHttpSendRequest(httpreq, false); //Envía la petición al servidor. Se craen el/los fichero/s donde se podrá leer la respuesta del servidor.

    httpres = CosHttpGetReturnCode(httpreq); // Esta función retorna el código de estado del protocolo http.
 
    panel_codhttp.Text = "" + httpres ; 

    oJSonRespuesta.LoadFromFile(ProjectDir() + "\bodyResponseCWS.xml");
    oFrm.Respuesta = oJSonRespuesta.GetString(true); 

    CosHttpFreeRequest(httpreq);
end

private function PeticionPost_resultCount()
objects
begin
    httpreq as integer
    httpres as integer
    serverUrl as Char
    useSSL as boolean
    bodyFile as char
    oJSon oJSonRespuesta as Json
    bodyStr as char
end
begin
    useSSL = FALSE;
    Delete(ProjectDir() + "\bodyResponseCWS.xml");
    Delete(ProjectDir() + "\\headerResponseCWS.txt");
    
    
    oJSon.Set("state", "MA");

    bodyStr=oJSon;
    
    httpreq = CosHttpNewRequest(); //Crea la petición en el servidor

    CosHttpSetTimeout(httpreq,10);
    
    serverUrl = "http://localhost:8080/stock/rest/states/resultCount";
    CosHttpRequestSetUrl(httpreq, serverUrl);//Url a la que se van a realizar las peticiones.
    CosHttpRequestAddHeaderStr(httpreq, 'Content-Type: text/html; charset=ISO-8859-1');
    CosHttpRequestSetBody(httpreq, bodyStr, FALSE); //En esta función se indicará el cuerpo que se enviará al servidor. En este ejemplo será un objeto char
    
    CosHttpRequestSetMethod(httpreq, "POST"); //En esta función se indicará el método que ejecutará la petición.
    
    CosHttpSetResponseFile(httpreq, ProjectDir() + "\bodyResponseCWS.xml"); //Esta función se indica el fichero donde se dejará el cuerpo de la respuesta del servidor.
    
    CosHttpSetResponseHeaderFile(httpreq,ProjectDir() + "\headerResponseCWS.txt");//Esta función se indica el fichero donde se dejará la cabecera de la respuesta del servidor.

    CosHttpSendRequest(httpreq, false); //Envía la petición al servidor. Se craen el/los fichero/s donde se podrá leer la respuesta del servidor.

    httpres = CosHttpGetReturnCode(httpreq); // Esta función retorna el código de estado del protocolo http.
 
    oJSonRespuesta.LoadFromFile(ProjectDir() + "\bodyResponseCWS.xml");
    oFrm.Respuesta = "Número de registro : " +oJSonRespuesta.GetString(true); 
    Yield;
    CosHttpFreeRequest(httpreq);
end

private function PeticionDelete()
objects
begin
    httpreq as integer
    httpres as integer
    serverUrl as Char
    useSSL as boolean
    bodyFile as char
    oJSonRespuesta as Json

end
begin
    useSSL = FALSE;
    
    httpreq = CosHttpNewRequest(); //Crea la petición en el servidor

    
    CosHttpSetTimeout(httpreq,10);
    
    serverUrl = "http://localhost:8080/stock/rest/states/"+vstate_del;
    CosHttpRequestSetUrl(httpreq, serverUrl);//Url a la que se van a realizar las peticiones.
    CosHttpRequestAddHeaderStr(httpreq, 'Content-Type: text/html; charset=ISO-8859-1');    
    CosHttpRequestSetMethod(httpreq, "DELETE"); //petición.
    
    CosHttpSetResponseFile(httpreq, ProjectDir() + "\bodyResponseCWS.xml"); //Esta función se indica el fichero donde se dejará el cuerpo de la respuesta del servidor.
    
    CosHttpSetResponseHeaderFile(httpreq,ProjectDir() + "\headerResponseCWS.txt");//Esta función se indica el fichero donde se dejará la cabecera de la respuesta del servidor.

    CosHttpSendRequest(httpreq, false); //Envía la petición al servidor. 

    httpres = CosHttpGetReturnCode(httpreq); // Esta función retorna el código de estado del protocolo http.
    panel_codhttp.Text = "" + httpres ; 

    oJSonRespuesta.LoadFromFile(ProjectDir() + "\bodyResponseCWS.xml");
    
    oFrm.Respuesta = oJSonRespuesta.GetString(true).UTF8ToAnsi(1252);
    
    Yield;
    CosHttpFreeRequest(httpreq); //Libera la petición
    
end

private function PeticionPost_resultList()
objects
begin
    httpreq as integer
    httpres as integer
    serverUrl as Char
    useSSL as boolean
    bodyFile as char
    oJSon oJSonRespuesta js as Json
    bodyStr as char
    state sname as char
    i as integer
end
begin
    useSSL = FALSE;
    Delete(ProjectDir() + "\bodyResponseCWS.xml");
    Delete(ProjectDir() + "\\headerResponseCWS.txt");
    
    lst_state.FieldSeparator = "|"    ;
    
    httpreq = CosHttpNewRequest(); //Crea la petición en el servidor

    CosHttpSetTimeout(httpreq,10);
    
    serverUrl = "http://localhost:8080/stock/rest/states/resultList?firstResult=0&maxResults=70";
    CosHttpRequestSetUrl(httpreq, serverUrl);//En esta función se indicará la url a la que se van a realizar las peticiones.
    CosHttpRequestAddHeaderStr(httpreq, 'Content-Type: text/html; charset=ISO-8859-1');  
    
    CosHttpRequestSetMethod(httpreq, "POST"); //Método que ejecutará la petición.
    
    CosHttpSetResponseFile(httpreq, ProjectDir() + "\bodyResponseCWS.xml"); //Esta función se indica el fichero donde se dejará el cuerpo de la respuesta del servidor.
    
    CosHttpSetResponseHeaderFile(httpreq,ProjectDir() + "\headerResponseCWS.txt");//Esta función se indica el fichero donde se dejará la cabecera de la respuesta del servidor.

    CosHttpSendRequest(httpreq, false); //Envía la petición al servidor. Se craen el/los fichero/s donde se podrá leer la respuesta del servidor.

    httpres = CosHttpGetReturnCode(httpreq); // Esta función retorna el código de estado del protocolo http.
    panel_codhttp.Text = "" + httpres ; 
 
    Box_respuesta.Page = 2;
    
    oJSonRespuesta.LoadFromFile(ProjectDir() + "\bodyResponseCWS.xml");
    oFrm.Respuesta = oJSonRespuesta.GetString(true); 
    for i = 1 to oJSonRespuesta.GetSize() do begin
        state = oJSonRespuesta.Get("["+i+"].state");
        sname =  oJSonRespuesta.Get("["+i+"].sname");
        lst_state.Selected = lst_state.AddString(state +"|"+ sname.UTF8ToAnsi(1252) );
    end    

    Yield;
    CosHttpFreeRequest(httpreq);
end




{
    Ejemplo de Cliente WebServer
}
main begin
    oFrm.Run();
    
end 


main
objects begin
    s s1 s2 as char
end
begin
    s = "Hello             ";
    s1 = "     how are you?";
    s.RTrim;
    s.Trace;
    s1.LTrim;
    s1.Trace;
    s2 = s+" "+ s1;
    s2.Trace;
    (s2.Length).Trace;
    (s2.VarLength).Trace;
    (s2.SubString(1,4)).Trace;
    (s2.Ascii).Trace;
    (s2.Locate("Hello")).Trace;
end


main
begin
    Module.LoadCustomColors(ProjectDir() + "\themes\theme_tabcontrol.ini");
    RunWindow();
end

Private RunWindow()
objects
begin
    o as frm
end
begin
   o.Run();
    
end

On Click bcomment
objects begin
end
begin
    miedit.Comment="Write your name";
end
Main 
objects begin
    Miform as fr
end
begin
    Miform.Run;     
end

main
objects begin
    st as sqlstatement 
    i as smallint
    str as char(20)
end
begin
    Sql.AttachConnection; 
    Sql.Connect("stock"); 
    if Sql.Error >=0 then 
    begin
        st.AttachServer(Sql);
        i = 8;
        st.SqlExec("delete from customers where customers.customer = ?",i);
        "Row deleted".Trace; 
        Sql.Disconnect; 
        st.Free; 
    end
end


main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i =46;
    Sql.AttachConnection;
    Sql.Connect("stock"); 
    if Sql.Error >=0 then 
    begin
        scursor.AttachServer(Sql);
        scursor.Prepare("select customer, surname from customers where customers.customer < ?");
        scursor.Open(i);
        scursor.Fetch(code1,name); 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Fetch(code1,name); 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Close;  
        scursor.Free;   
        Sql.Disconnect; 
    end
end

main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i =46;
    Sql.AttachConnection;// Connect to the default server 
    Sql.Connect("stock"); 
    if Sql.Error >=0 then 
    begin
        scursor.AttachServer(Sql);
        scursor.Prepare("select customer, surname from customers where customers.customer < ?");
        scursor.Open(i);
        scursor.Into(code1,name); 
        scursor.Fetch; 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Fetch; 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Close;  
        scursor.Free;   
        Sql.Disconnect; 
    end
end


main
objects begin
    st as sqlstatement 
    i as smallint
    str as char(20)
end
begin
    Sql.AttachConnection;  
    Sql.Connect("stock");
    if Sql.Error >=0 then 
    begin
        i = 2;
        st.SqlExec("select * from customers where customers.customer = ?",i);
        Sql.Disconnect; 
        st.Free; 
    end else
        Sql.ErrMsg.Trace; 
end

main
objects begin
    st as sqlstatement 
    i as smallint
    str as char(20)
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock"); 
    if Sql.Error >=0 then 
    begin 
        i = 8;
        st.SqlExec("delete customers where customers.customer = ?",i);
        if st.Error >=0 then
            "There was no error".Trace();
        else
            st.ErrMsg.Trace; // Display the error 
        st.Free; // Free the statement       
        Sql.Disconnect; 
    end
end

main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i = 8;
    Sql.AttachConnection("stock");
    Sql.SetValue("DBPATH", "c:\tmp");
    Sql.Connect("stock");
    if Sql.Error >=0 then begin
        scursor.AttachServer(Sql); 
        scursor.Prepare("select customer, surname fro customers where customers.customer <= ?");
        if scursor.Error >=0 then begin
            scursor.Open(i);
            scursor.Fetch(code1,name);
            (name + " "+ code1).Trace;
            scursor.Close; 
            scursor.Free;  
        end 
        else
            scursor.ErrMsg.Trace;
    end
    else begin
        Sql.ErrMsg().Trace;
    end     
    Sql.Disconnect; 
end



main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i = 10;
    Sql.AttachConnection; 
    Sql.Connect("stock");  
    if Sql.Error >=0 then 
    begin
        scursor.AttachServer(Sql); 
        scursor.Prepare("select surname from customers where customers.customer = ?");
        scursor.Open();
        scursor.Into(name);
        scursor.Execute(1);
        scursor.Found().Trace();
        scursor.Into(name);
        scursor.Close;
        scursor.Free;
        Sql.Disconnect;// Disconnect the server 
    end
end

main
objects begin
    scursor as sqlcursor 
    st as sqlstatement
    i as smallint
    item1 as char(40)
    description1 as char(50)
    str as char (100)
    cost_price1 as Money
end
begin
    i = 8;
    PutEnv("DBPATH", ProjectDir());
    st.AttachServer(Sql); 
    Sql.Connect("stock");
    Sql.SelectWindow(NULL,"select item, description, cost_price from items where item <=30",0,"Items",1); 
    if Sql.Error >=0 then begin 
        scursor.AttachServer(Sql);
        str="select item, description, cost_price from items where item <=? for update";
        str.Trace;
        scursor.Prepare(str);
        scursor.Putname("Update1");
        scursor.Open(i);
        scursor.Fetch(item1, description1, cost_price1);
        while scursor.Found do begin 
            st.SqlExec("update items set cost_price=3000 where current of Update1");
            str = item1;
            str += " ";
            str += description1;
            str += " ";
            str +=  cost_price1;
            str.Trace;
            scursor.Fetch(item1, description1, cost_price1);
        end
        scursor.Close;
        scursor.Free;
        Sql.SelectWindow(NULL,"select item, description, cost_price from items where item <=9",0,"Items",1); 
        Sql.Disconnect; 
    end
end

main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i =46;
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock"); 
    if Sql.Error >=0 then 
    begin
        scursor.AttachServer(Sql);
        scursor.Prepare("select customer, surname from customers where customers.customer < ?");
        scursor.Open(i);
        scursor.Into(code1,name); 
        scursor.Fetch; 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Fetch; 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Close;  
        scursor.Free;   
        Sql.Disconnect; 
    end
end


main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i = 8;
    PutEnv("DBPATH", ProjectDir());   
    Sql.Connect("stock"); 
    if Sql.Error >=0 then begin
        scursor.AttachServer(Sql); 
        scursor.Prepare("select customer, surname from customers where customers.customer <= ?");
        scursor.Open(i); 
        scursor.FetchFirst(code1,name); 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.ScrollFetch(2,code1,name); //Se posiciona y lee 2 registro de la tabla derivada devuelta por el cusor. Es este caso lee el 3 registro
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.FetchLast(code1,name);
        scursor.ScrollFetch(-2,code1,name);
        
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Close;  
        scursor.Free;   
        Sql.Disconnect;
    end
end

main
objects begin
    st as sqlstatement 
    i as smallint
    str as char(20)
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");   // Connect to stock database
    if Sql.Error >=0 then 
    begin
        st.AttachServer(Sql); 
        i = 8;
        st.Prepare("delete from customers where customers.customer = ?");
        st.Execute(i);  // Execute the instruction
        st.Free;        // Free the statement
        st.Execute(i); 
        st.Error.Trace;
        Sql.Disconnect; // Disconnect the server
    end
end

main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i =46;
    Sql.AttachConnection; 
    Sql.Connect("stock"); 
    if Sql.Error >=0 then
    begin
        scursor.AttachServer(Sql);
        scursor.Prepare("select customer, surname from customers where customers.customer < ?");
        scursor.Open(i);
        scursor.FetchFirst(code1,name); 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Close;  
        scursor.Free;   
        Sql.Disconnect; 
    end
end

main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i =46;
    Sql.AttachConnection;
    Sql.Connect("stock"); 
    if Sql.Error >=0 then 
    begin
        scursor.AttachServer(Sql);
        scursor.Prepare("select customer, surname from customers where customers.customer < ?");
        scursor.Open(i);
        scursor.FetchLast(code1,name); 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Close;  
        scursor.Free;   
        Sql.Disconnect; 
    end
end

main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i =46;
    Sql.AttachConnection;
    Sql.Connect("stock"); 
    if Sql.Error >=0 then 
    begin
        scursor.AttachServer(Sql);
        scursor.Prepare("select customer, surname from customers where customers.customer < ?");
        scursor.Open(i);
        scursor.FetchLast(code1,name); 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.FetchPrev(code1,name); 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Close;  
        scursor.Free;   
        Sql.Disconnect; 
    end
end


main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i =46;
    Sql.AttachConnection; 
    Sql.Connect("stock"); 
    if Sql.Error >=0 then 
    begin
        scursor.AttachServer(Sql);
        scursor.Prepare("select customer, surname from customers where customers.customer < ?");
        scursor.Open(i);
        scursor.FetchFirst(code1,name); 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.FetchNext(code1,name); 
        str = " ";
        str += code1 ;
        str += " ";
        str += name;
        str.Trace;
        scursor.Close;  
        scursor.Free;   
        Sql.Disconnect; 
    end
end



main
OBJECTS begin
    i x y as smallint
end
begin
    i=12;
    y=1;

    while  --i > 0 do begin
        x=i*2;
        if  x==16 then
        begin
            ("x=" + x).Trace;
            continue; 
        end
        y += x*x;
    end
    ("y=" +y).Trace;
end

on Click miboton
objects begin
    x y x1 y1 as integer
end
begin
    mcheck.GetPos(x,y);
    ("the co-ordinates of the Check box with respect to client area of the Box are:" +
      
     "("+ x +","+y +")").Trace;

    mcheck.GetScreenPos(x1,y1);
    ("The absolute co-ordinates of the Check box on the screen are:" +
      
     "("+ x1 +","+y1 +")").Trace;
     
    mcheck.GetSize(x,y);
    ("The dimensions of the Check box are:" +
      
     "("+ x +","+y +")").Trace;
     
    mbox.ScreenToCoord(x1,y1);
    ("The relative co-ordinates of the Check box are:" +
      
     "("+ x1 +","+y1 +")").Trace;
      
end
main
objects begin
    miform as fr 
end
begin
    miform.Run;
end

main 
objects begin
    s as char 
    i as smallint
end
begin
    i=1;
    s = "number " + i.conversor Char;
    s = "number " + i.Char;
    s.Trace ; 
end

On Open
begin
    Query();
    id_grid.AllowGridMultiSelect(TRUE);
    p_coment.Text = "Selecciona y rango de filas y pulse el botón de copiar";
end

On Command CmdCopiar
begin
    id_grid.CopyGridSelectedRows();
end
main
objects
begin
oCAutoEditMode as CGrid
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("Stock");
    oCAutoEditMode.Run;
    Sql.Disconnect;
    Sql.DettachConnection;
end

main 
objects begin
    s as char
    s1 as char
end
begin

    s="Hello World";
{
    s.Trace;
    s1=s[1,4];
    s1.Trace;
}    
    s1=s[-5,-5];
    ("'" + s1 +"'").Trace;
    s1=s[-5,5];
    s1.Trace;
    s1=s[4,-4];
    s1.Trace;
end


On Open begin
    rb_nivel.Selected = 6;
end
On event Click control btn1(e as event)
begin
    btn1.Text = Module.BrowseForFolder("c:\tmp");
    
end
On event Click control btn_Aceptar(e as event)
Objects begin
    lChFormato as char
    lInNivel as integer
end
Begin

    if btn1.Text is null then begin
        "Indique el directorio a comprimir".Trace;
        btn1.SetFocus();
        return;
    end
    if btn_fileNameCompress.Text is null then begin
        "Indique el nombre del fichero".Trace;
        btn_fileNameCompress.SetFocus();
        return;
    end
    switch rb_format.Selected
    begin
        case 1:begin
            lChFormato = "zip";
        end
        case 2:begin
            lChFormato = "7z";
        end
 
    end
    if lChFormato == "zip" then 
        lInNivel = rb_nivel.Selected;
    else lInNivel = 0;
    
    switch rb_TipoEjecucion.Selected
    begin
        case 1:
            Comprime_No_Recursivo(btn1.Text, lChFormato, lInNivel, btn_fileNameCompress.Text); //Carpeta y subcarpetas
        case 2:
            Comprime_Recursivo(btn1.Text, lChFormato, lInNivel, btn_fileNameCompress.Text); //Carpeta y subcarpetas
    end    
end

   
public function Comprime_Recursivo(folder as char, formato as char, nivel as integer, nameFile as char)
objects begin
    zipId_01 as integer
end
begin
    zipId_01 = CosCompressNew();

    RecorreCarpetaySubCarpertas(folder, "", zipId_01);
    if nivel > 0 then //Si formato es 7z no tiene nivel de compresión
       CosCompressSetZipLevel(zipId_01, nivel);
    CosCompressSave(zipId_01, "c:\tmp\"+nameFile +"."+formato, formato, true).Trace();

    CosCompressFree(zipId_01);
end
public function RecorreCarpetaySubCarpertas(folder as char, rootFolder as char, zipId as integer)
objects begin
    folderId as integer
    auxId as integer
    fileName as char
    ret as integer
    ext as char

end
begin
    Yield;
    folderId = Module.OpenDir(folder , fileName);
    if folderId is NULL then return;
    
    while TRUE do begin
        if TestFile(folder + "\" + fileName, "d") then begin
            ret = CosCompressCreateFolder(zipId,  rootFolder + "\" + fileName);
            RecorreCarpetaySubCarpertas(folder + "\" + fileName, rootFolder + "\" + fileName, zipId);
        end else begin
            ret = CosCompressAddFile(zipId,  folder + "\" + fileName, rootFolder + "\" + fileName);
            
        end

        if ReadDir(folderId, fileName) == 0 then break;
   
        
    end
    Module.CloseDir(folderId);
end


public function Comprime_No_Recursivo(folder as char, formato as char, nivel as integer, nameFile as char)
objects begin
    zipId_01 as integer
end
begin
    zipId_01 = CosCompressNew();
    RecorreCarpeta(folder, "", zipId_01);
    CosCompressSetZipLevel(zipId_01, nivel);
    CosCompressSave(zipId_01, "c:\tmp\"+nameFile+"."+formato,formato, true).Trace();
    CosCompressFree(zipId_01);
end



public function RecorreCarpeta(folder as char, rootFolder as char, zipId as integer)
objects begin
    folderId as integer
    auxId as integer
    fileName as char
    ret as integer
end
begin
    Yield;
    folderId = Module.OpenDir(folder , fileName);
    if folderId is NULL then return;
    
    while TRUE do begin
        if TestFile(folder + "\" + fileName, "d") then begin
            ret = CosCompressAddFolder(zipId,  folder + "\" + fileName, rootFolder + "\" + fileName);;
        end else begin
            ret = CosCompressAddFile(zipId,  folder + "\" + fileName, rootFolder + "\" + fileName);
        end

        if ReadDir(folderId, fileName) == 0 then break;
        
    end
    Module.CloseDir(folderId);
end

On event Click control rb_format(e as event)
begin
    switch rb_format.Selected
    begin
        case 1:begin
      
            rb_nivel.Disabled = FALSE;
        end
        case 2:begin
 
            rb_nivel.Disabled = TRUE;
        end
 
    end
end
main
objects
begin
    f as frm
end
begin
    f.Run;

end



On Open begin
 
end
On event Click control ed_extractFile(e as event)
begin
    ed_extractFile.Text = Module.TreeWalk("c:\tmp" ,"7z");
    
end
On event Click control btn_Aceptar(e as event)
Objects begin
    lChExtenxion as char
    lChFichero as char default null
    lChDirTo as char
end
Begin
    lChFichero = ed_extractFile.Text;
    lChDirTo = EditField_ExtractTo.Text;
    if lChDirTo is null then begin
        "Indique el directorio destino".Trace();
        return;
    end
    if not TestFile(lChDirTo, "d") then begin
        Module.MkDir(lChDirTo);
    end
    lChExtenxion = lChFichero.GetWord(".",2);
   
    CosCompressExtract(lChFichero, lChDirTo,lChExtenxion, true).Trace;
end


main
objects
begin
    o as frm
end
begin

    o.Run;

end


On Open begin
 
end
On event Click control ed_extractFile(e as event)
begin
    ed_extractFile.Text = Module.TreeWalk(ProjectDir() ,"zip");
    
end
On event Click control btn_Aceptar(e as event)
Objects begin
    lChExtenxion as char
    lChFichero as char default null
    lChDirTo as char
end
Begin
    lChFichero = ed_extractFile.Text;
    lChDirTo = EditField_ExtractTo.Text;
    if ed_extractFile.Text is null then begin
        "Indique el directorio destino".Trace();
        return;
    end
    lChExtenxion = lChFichero.GetWord(".",lChFichero.NumWords("."));
    if vPassword is null then begin
        "El campo contraseña es obligatorio".Trace();
        return;
    end
    CosCompressExtractEx(lChFichero, lChDirTo ,lChExtenxion, true, vPassword).Trace;
end



On event Click control EditField_ExtractTo(e as event)
begin
    EditField_ExtractTo.Text = Module.BrowseForFolder("c:\tmp");
end
main
objects
begin
    o as frm
end
begin

    o.Run;

end


On Open begin
    rb_nivel.Selected = 6;
end
On event Click control btn1(e as event)
begin
    btn1.Text = Module.BrowseForFolder(ProjectDir());
    
end
On event Click control btn_Aceptar(e as event)
Objects begin
    lChFormato as char
    lInNivel as integer
    lChFichero as char
end
Begin

    if btn1.Text is null then begin
        "Indique el directorio a comprimir".Trace;
        btn1.SetFocus();
        return;
    end
    if ed_fileNameCompress.Text is null then begin
        "Indique el nombre del fichero".Trace;
        ed_fileNameCompress.SetFocus();
        return;
    end

    
    switch rb_format.Selected
    begin
        case 1:begin
            lChFormato = "zip";
        end
        case 2:begin
            lChFormato = "7z";
        end
 
    end
    if lChFormato == "zip" then 
        lInNivel = rb_nivel.Selected;
    else lInNivel = 0;

    lChFichero =ProjectDir() + "\" + ed_fileNameCompress.Text + "." + lChFormato ;
    if TestFile (lChFichero, "f") then begin
        Delete(lChFichero);
        ("Fichero "+lChFichero+ " borrado").Trace();
    end

    
     Comprime_No_Recursivo(btn1.Text, lChFormato, lInNivel, ed_fileNameCompress.Text); //Carpeta y subcarpetas
     
end


public function Comprime_No_Recursivo(folder as char, formato as char, nivel as integer, nameFile as char)
objects begin
    zipId_01 as integer
end
begin
    zipId_01 = CosCompressNew();
    
    CosCompressSetPassword(zipId_01, vPasswd);
    if vPasswd is null then begin
        "Indicar contraseña".Trace();
        return;
    end
    RecorreCarpeta(folder, "", zipId_01);
    CosCompressSetZipLevel(zipId_01, nivel);
    CosCompressSave(zipId_01, ProjectDir()+"\"+nameFile+"."+formato,formato, true).Trace();
    CosCompressFree(zipId_01);
end



public function RecorreCarpeta(folder as char, rootFolder as char, zipId as integer)
objects begin
    folderId as integer
    auxId as integer
    fileName as char
    ret as integer
end
begin
    Yield;
    folderId = Module.OpenDir(folder , fileName);
    if folderId is NULL then return;
    
    while TRUE do begin
        if TestFile(folder + "\" + fileName, "d") then begin
            ret = CosCompressAddFolder(zipId,  folder + "\" + fileName, rootFolder + "\" + fileName);;
        end else begin
            ret = CosCompressAddFile(zipId,  folder + "\" + fileName, rootFolder + "\" + fileName);
        end

        if ReadDir(folderId, fileName) == 0 then break;
        
    end
    Module.CloseDir(folderId);
end

On event Click control rb_format(e as event)
begin
    switch rb_format.Selected
    begin
        case 1:begin
      
            rb_nivel.Disabled = FALSE;
        end
        case 2:begin
 
            rb_nivel.Disabled = TRUE;
        end
 
    end
end
main
objects
begin
    f as frm
end
begin
    f.Run;

end




{
    Se ha modificado el ejemplo CallWebService2 de la versión 4.4.4 de Cosmos para que en lugar de utilizar el método CallWebService 
    utilice la nueva dll coshttpdll
}
main begin
    CallServioWebMunicipios();
end 

private function CallServioWebMunicipios()
objects
begin
    httpreq as integer
    httpres as integer
    bodyStr as char
    serverUrl as Char
    useSSL as boolean
    bodyFile as char

end
begin
    Module.Delete(ProjectDir() + "\bodyResponse.xml");
    Module.Delete(ProjectDir() + "\headerResponse.txt");
    useSSL = FALSE;
    oFrm.ChProvin = 'madrid';
    
    bodyStr = '  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:q0="http://www.catastro.meh.es/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> '+
        '  <soapenv:Body> '+
        '  <q0:Provincia>'+oFrm.ChProvin+'</q0:Provincia>  '+
        '  <q0:Municipio></q0:Municipio>  '+ //sin valor consulta todos los municipios de la provincia
        '  </soapenv:Body> '+
        '  </soapenv:Envelope> ';

    
    httpreq = CosHttpNewRequest(); //Crea la petición en el servidor

    CosHttpSetTimeout(httpreq,10);
    
    serverUrl = "http://ovc.catastro.meh.es/ovcservweb/OVCSWLocalizacionRC/OVCCallejero.asmx?WSDL";
    CosHttpRequestSetUrl(httpreq, serverUrl);//En esta función se indicará la url a la que se van a realizar las peticiones.

    
    CosHttpRequestAddHeaderStr(httpreq, "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/msword, application/vnd.ms-powerpoint, */*");
    CosHttpRequestAddHeaderStr(httpreq, "Accept-Language: en-us"); //Esta función permite añadir un parámetro a la cabecera de la petición http.

    CosHttpRequestAddHeaderStr(httpreq, "Accept-Encoding: gzip, deflate"); //Esta función permite añadir un parámetro a la cabecera de la petición http.
    CosHttpRequestAddHeaderStr(httpreq, "User-Agent: Mozilla/4.0"); //Esta función permite añadir un parámetro a la cabecera de la petición http.
    CosHttpRequestAddHeaderStr(httpreq, "Content-Length: "+bodyStr.Length);
    CosHttpRequestAddHeaderStr(httpreq, 'SOAPAction: "http://tempuri.org/OVCServWeb/OVCCallejero/ConsultaMunicipio"');
    CosHttpRequestAddHeaderStr(httpreq, 'Host: OVC.CATASTRO.MEH.ES');
    CosHttpRequestAddHeaderStr(httpreq, 'Content-Type: text/xml; charset=utf-8');
    
    CosHttpRequestSetBody(httpreq, bodyStr, FALSE); //En esta función se indicará el cuerpo que se enviará al servidor. En este ejemplo será un objeto char
    
    CosHttpRequestSetMethod(httpreq, "POST"); //En esta función se indicará el método que ejecutará la petición.
    
    CosHttpSetResponseFile(httpreq, ProjectDir() + "\bodyResponse.xml"); //Esta función se indica el fichero donde se dejará el cuerpo de la respuesta del servidor.
    
    CosHttpSetResponseHeaderFile(httpreq,ProjectDir() + "\headerResponse.txt");//Esta función se indica el fichero donde se dejará la cabecera de la respuesta del servidor.

    CosHttpSendRequest(httpreq, false); //Envía la petición al servidor. Se craen el/los fichero/s donde se podrá leer la respuesta del servidor.

    httpres = CosHttpGetReturnCode(httpreq); // Esta función retorna el código de estado del protocolo http.
 
    if httpres == 200 then begin
        RecorreXml(ProjectDir() + "\bodyResponse.xml");   
        oFrm.ChProvin.Upcase(); 
        oFrm.Run();
    end    
    else begin
        getTxtCodeHttp(httpres).Trace;
        CosHttpFreeRequest(httpreq); //Libera la petición
        return;
    end
    CosHttpFreeRequest(httpreq);
    Delete(ProjectDir() + "\bodyResponse.xml");
    Delete(ProjectDir() + "\headerResponse.txt");
 
end

private function RecorreXml(outFile as char) return integer
objects begin
    doc as integer
end
begin
    doc = TTXmlOpenDoc(outFile);
    if doc == 0 then begin
        "No se puede abrir el fichero".Trace();
        return 0;
    end
    NavigateTree(doc);
    return 1;
end
private function NavigateTree(doc as integer)
objects begin
    rootnode as integer
    node as integer
    curnode as integer
end
begin
    rootnode = TTXmlGetDocRootNode(doc);
    curnode = rootnode;
    NavigateElement(doc, curnode, 0);
end
private function NavigateElement(doc as integer, node as integer, level as integer)
objects begin
    curnode as integer
    nodeName as Char
    propValue as Char
    nodeType as integer
    nodeText as Char
end
begin

    curnode = node;
    while TRUE do
    begin
        if curnode == 0 then begin
            break;
        end else begin

            nodeType = TTXmlGetNodeType(doc, curnode);
            switch nodeType begin
                case 1: begin //elemento
                    nodeName = TTXmlGetNodeName(doc, curnode);
                    if nodeName == 'nm' then begin
                        oFrm.list_municipios.AddString(TTXmlGetEncodedNodeText(doc, curnode, 10)) ;
                    end
                    if nodeName == 'err' then begin
                        RecorrerNodoErr(doc, curnode);
                    end
                end   //case elemento             
            end//Switch
        end //else 
        NavigateElement(doc, TTXmlGetFirstChildNode(doc, curnode), level + 1);    
        curnode = TTXmlGetNextNode(doc, curnode);
    end //while
    
    
end
private RecorrerNodoErr(doc as integer, curnode as integer) 
Objects begin
    nodeName as Char
    nodeType as integer
end
begin
    while TRUE do
    begin
        if curnode == 0 then begin
            break;
        end else begin

            nodeType = TTXmlGetNodeType(doc, curnode);
            switch nodeType begin
                case 1: begin //elemento
                    nodeName = TTXmlGetNodeName(doc, curnode);
                    if nodeName == 'des' then begin
                        oFrm.list_municipios.AddString(TTXmlGetEncodedNodeText(doc, curnode, 10));     
                    end
                end   //case elemento             
            end//Switch
        end //else 
        RecorrerNodoErr(doc, TTXmlGetFirstChildNode(doc, curnode));    
        curnode = TTXmlGetNextNode(doc, curnode);
    end //while
end


On Open 
begin
    Usr= "";
    Passwd = "";
    ChUrl = "https://www.base100.com/es/notastec/cosmos_56.html";
    Box_usuario.Disabled = true;
end


On Command CmdEnviar
Objects begin
    ok as integer
end
begin
     doGetAutenticado();
end

private function doGetAutenticado()
objects
begin
    httpreq as integer
    httpres as integer
    TipoAuth as integer
    useSSL as boolean
end
begin
    useSSL = FALSE; 
    httpreq = CosHttpNewRequest(); //Esta función crea el objeto que se usará para realizar la petición (request) al servidor.
    

    CosHttpRequestSetUrl(httpreq, ChUrl); // En esta función se indicará la url a la que se van a realizar las peticiones. 
    
    CosHttpRequestSetMethod(httpreq, "GET"); //En esta función se indicará el método que ejecutará la petición. 
    
    listBox_cab.Reset();
    Module.Delete(ProjectDir() + "\cabeceraauten.txt");
    listbox_body.Reset();    
    Module.Delete(ProjectDir() + "\cuerpoauten.html");

    CosHttpSetResponseHeaderFile(httpreq, ProjectDir() + "\cabeceraauten.txt"); //Función en la que se indicará el fichero donde se retornará el encabezado de la respuesta del servidor.
    CosHttpSetResponseFile(httpreq, ProjectDir() + "\cuerpoauten.html"); //En esta función se indicará el fichero donde se retornará la respuesta del servidor al recurso solicitado al servidor.


    CosHttpSetAuthUser(httpreq, Usr);//Función en la que se indicará el usuario con el que se valida en el servidor al realizar la petición. 
    CosHttpSetAuthPasswd(httpreq, Passwd); //Función en la que se especifica la contraseña con la que se identifica en el servidor el usuario indicado en la función CosHttpSetAuthUser.
    TipoAuth = rb_autenticacion.Selected - 1;
    CosHttpSetAuthMethod(httpreq, TipoAuth); //1 es basic. // Esta función especifica el tipo de autenticación que se usará en la petición contra el servidor.

    CosHttpUseSSL(httpreq, useSSL);
    
    switch 
    begin
        case rb_recibirCuerpo.Selected == 1:
            CosHttpSendRequest(httpreq, false); //Esta función envía al servidor la petición especificada en la función CosHttpRequestSetMethod y se crearán las ficheros \cabeceraauten.txt y  cuerpoauten.html
        case rb_recibirCuerpo.Selected == 2: 
            CosHttpSendRequest(httpreq, true); //Esta función envía al servidor la petición especificada en la función CosHttpRequestSetMethod y solo se creará el fichero cabeceraauten.txt     
    end
    httpres = CosHttpGetReturnCode(httpreq); ////Esta función retorna el código de estado del protocolo http.
    CosHttpGetErrorStr(httpreq);
    httpres = CosHttpGetReturnCode(httpreq);
    CosHttpFreeRequest(httpreq);
    listBox_cab.ListFile = ProjectDir() + "\cabeceraauten.txt";
    listbox_body.ListFile = ProjectDir() + "\cuerpoauten.html";
    OpenFileWithDefaultApp(ProjectDir() + "\cuerpoauten.html");
    panel_txt=getTxtCodeHttp(httpres);

end

On event Click control rb_autenticacion(e as event)
begin
    if rb_autenticacion.Selected == 1 then
        Box_usuario.Disabled = TRUE;
    else   
        Box_usuario.Disabled = FALSE;
end


main
objects
begin
    o as frm
end
begin
    o.Run();
    Delete(ProjectDir() + "\cuerpoauten.html");
    Delete(ProjectDir() + "\cabeceraauten.txt");
end



On Open begin
    lstjava.ListFile= ProjectDir()+"\jars\Test1.java";
end

On Click btnRunJavaMethods
objects
begin
   i as integer
   a as char
   lDecimal as Decimal(12,6)
   lDecimal2 as Decimal(12,6)
   strFile as char default "c:\tmp\salidajava.txt"
end
begin     
    
    Module.Delete(strFile);
    lstjava.SetFocus();
    lstjava.Selected = 9;
    FuncionJava1();
    lstSalida.ListFile = strFile;
    lstSalida.Selected = 1;
    Sleep(2);
    lstjava.Selected = 14;
    FuncionJava2("Paso un string");
    lstSalida.ListFile = strFile;
    lstSalida.Selected = 2;
    Sleep(2);
    
    lstjava.Selected = 19;
    FuncionJava3("Paso un string", "Paso un string".Length());
    lstSalida.ListFile = strFile;
    lstSalida.Selected = 3;
    Sleep(2);
    
    lstjava.Selected = 23;
    FuncionJava4("Paso un string", "Paso un string".Length(), 3, 42.3266);
    
    lstSalida.ListFile = strFile;
    lstSalida.Selected = 4;

    Sleep(2);
    lstjava.Selected = 28;
     FuncionJava5("PASO UN STRING");
    
    lstSalida.ListFile = strFile;
    lstSalida.Selected = 5;
    
    
    lDecimal = 125.111111;
    lDecimal2 = 200.222222;

    Sleep(2);
    lstjava.Selected =34;
     FuncionJava6(lDecimal, lDecimal2);
    lstSalida.ListFile = strFile;
    lstSalida.Selected = 6;


    
end


public javaclass "Test1" FuncionJava1 () 
public javaclass "Test1" FuncionJava2 (campo1 as char)
public javaclass "Test1" FuncionJava3 (campo1 as char, campo2 as integer)
public javaclass "Test1" FuncionJava4 (campo1 as char, campo2 as integer, campo3 as smallint, campo4 as decimal)
public javaclass "Test1" FuncionJava5 (campo1 as char) return char
public javaclass "Test1" FuncionJava6 (JavaObject campo1 as decimal , campo2 as decimal ) return decimal 
main
objects
begin
end
begin
    f.Run;
end

On Error begin
    
end

private Dll "kernel32.dll" LoadLibraryA
    (
    aDllName as char
    )
    return integer

private Dll "kernel32.dll" FreeLibrary
    (
    aHandle as integer
    )
    return boolean
    

public Start
begin
    ChDir(CosmosDir+"\bin");
    aDllHandle = LoadLibraryA("cosjavadll.dll");
    if aDllHandle == 0 then begin
        MessageBox("Verificar: "+13.Character()+10.Character() +
            "1.- Máquina virtual instalada"+13.Character()+10.Character() +
            "2.- Variable de entorno path "+13.Character()+10.Character(), "ERROR" );
    end
end

public ending
begin
    FreeLibrary(aDllHandle);
end

On Open begin
    txt_1.Text = 
        "Este ejemplo muestra la posibilidad de elegir la máquina virtual con la que Cosmos ejecutará métodos Java." + 13.Character() + 10.Character() +
        "Si se define la variable de entorno COSMOSUSELASTJAVAVERSION con valor TRUE en la sección Environment, " + 13.Character() + 10.Character() +
        "el runtime utilizará la versión más reciente de la máquina virtual instalada en el PC." +13.Character() + 10.Character() +
        "Si se define la variable de entorno COSMOSUSEJAVAVERSION, se podrá indicar la versión de Java con la que el runtime ejecutará los métodos Java." +13.Character() + 10.Character() +
        "Por ejemplo, si se define COSMOSUSEJAVAVERSION=1.8.0_144 , el runtime utilizará esa versión de Java. " +13.Character() + 10.Character() +
        "Al hacer Click en el botón Ejecutar, se ejecutará un método llamado ReturnJavaVersion definido en la clase Java Test1.java, el cual retornará la versión de Java con la que se está ejecutando el método.";


end

On Click btnRunJavaMethods
objects
begin
   str as char
end
begin     
    
    str = "La versión de máquina virtual con la que se está ejecutando el método Java es: [" + ReturnJavaVersion()+ "]";
    str.Trace;
    
end

{
    Antes de ejecutar este programa descomentar la variable
    COSMOSUSELASTJAVAVERSION o la variable COSMOSUSEJAVAVERSION 
}    

public javaclass "Test1" ReturnJavaVersion() return char
main
objects
begin
end
begin
    f.Run;
end


On Open
begin
    rad_estilos.Selected =1;
    ChangeStyleByRadio();
end

private function repaint
begin
    Frame.Refresh();
end


On event Click control btnCambiaEstilo(e as event)
objects begin
    fileName as char
    i as integer
end
begin
    fileName = TreeWalk(ProjectDir() + "\themes");
    if fileName is not null then begin
        Module.LoadCustomColors(fileName);
        repaint;
        fileVisualStyle = fileName;
    end

end

On event Click control btnRecargar(e as event)
begin
    if fileVisualStyle is not null then
    begin
        Module.LoadCustomColors(fileVisualStyle);
        repaint;
    end
end

On event Click control rad_estilos(e as event)
begin
    ChangeStyleByRadio();
end

private function ChangeStyleByRadio()
objects begin
    selectedItem as integer
end
begin
    selectedItem = rad_estilos.Selected;
    
    
    if selectedItem == 1 then begin
        fileVisualStyle = ProjectDir() + "\themes\theme_blue.ini";
    end else if selectedItem == 2 then begin
        fileVisualStyle = ProjectDir() + "\themes\theme_gray.ini";
    end else if selectedItem == 3 then begin
        fileVisualStyle = ProjectDir() + "\themes\theme_brown.ini";
    end else if selectedItem == 4 then begin
        fileVisualStyle = ProjectDir() + "\themes\theme_black.ini";
    end

    Module.LoadCustomColors(fileVisualStyle);
    repaint;
end

main
objects
begin
end
begin
    Module.PutEnv("COSMOSVISUALMODE","7");
    f.Run;
end

On Open
begin
    dropTipo.Text = "PNG";
    dotSize = 5;
    margin = 5;
    version = 10;
    errorLevel = "M";
    stringData = "Estos son los datos";
    dpi = 72;
end

On Click btnGenera
objects begin
end
begin
    Refresca;
end

private function Refresca
begin
    txtHora = now;
    GeneraQR;
    Frame.Refresh();
end

private function GeneraQR
objects begin
    qrcodeId as integer
    fichero as char

    txt as char
end
begin
    bitmapQR.Bitmap = "";
 
    fichero =  ProjectDir() + "\salida." + dropTipo.Text;
    Module.Delete( fichero);
    txt = stringData;

  
    qrcodeId = CosQRNewCode();
    CosQRSetPropertyChar(qrcodeId, "OUTPUTFILE", fichero);
    CosQRSetPropertyChar(qrcodeId, "IMAGETYPE", dropTipo.Text);
    CosQRSetPropertyChar(qrcodeId, "TEXT", txt);
    CosQRSetPropertyInt(qrcodeId, "DPI", dpi);
    CosQRSetPropertyInt(qrcodeId, "DOTSIZE", dotSize);
    CosQRSetPropertyInt(qrcodeId, "VERSION", version);
   CosQRSetPropertyChar(qrcodeId, "ERRORLEVEL", errorLevel);
   CosQRSetPropertyInt(qrcodeId, "MARGIN", margin);
     CosQRGenerateCode(qrcodeId);
    CosQRFreeCode(qrcodeId);
    
    bitmapQR.Bitmap = fichero;
    
    
end


On event SpinDown control edtDotsize(e as event)
begin
    if dotSize > 1 then --dotSize;
    Refresca;
end

On event SpinUp control edtDotsize(e as event)
begin
    ++dotSize;
    Refresca;
end

On event EditChange control edtDotsize(e as event)
begin
    if edtDotsize.Text > 0 then begin
        dotSize = edtDotsize.Text;
        Refresca;
    end
end

On event EditChange control edtVersion(e as event)
begin
    if edtVersion.Text > 0 then begin
        version = edtVersion.Text;
        Refresca;
    end;
end

On event SpinDown control edtVersion(e as event)
begin
    if version > 1 then --version;
    Refresca;
end

On event SpinUp control edtVersion(e as event)
begin
    ++version;
    Refresca;
    
end

On event EditChange control edtMargin(e as event)
begin
    if edtMargin.Text >= 0 then begin
        margin = edtMargin.Text;
        Refresca;
    end;
end

On event SpinDown control edtMargin(e as event)
begin
    if margin > 0 then --margin;
    Refresca;
end

On event SpinUp control edtMargin(e as event)
begin
    ++margin;
    Refresca;
end


On event SelChange control dropErrorLevel(e as event)
begin
    Refresca;
end

On event SelChange control dropTipo(e as event)
begin
    Refresca;
end




On event SpinDown control edtDPI(e as event)
begin
    if dpi > 1 then --dpi;
    Refresca;
end

On event SpinUp control edtDPI(e as event)
begin
    ++dpi;
    Refresca;
end

On event EditChange control edtDPI(e as event)
begin
    if edtDPI.Text > 0 then begin
        dpi = edtDPI.Text;
        Refresca;
    end
end
main
objects
begin
    f as frm
end
begin

    f.Run;
end


On Open
begin
    edtRegExp.Text = "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b";
    edtBuscar.Text = 
"Este texto es una prueba de búsqueda de expresiones regulares en Cosmos."
"En este ejemplo se buscarán las expresiones regulares que se correspondan con una dirección de correo electrónico."
"Por ejemplo, pepe.lopez@miempresa.com y juan.rodriguez@miempresa.com."
;

    lstResults.FieldSeparator = "|";
    lstResults.Reset();
end

On Click btnBuscar
begin
    busca(edtRegExp.Text, edtBuscar.Text);
end


public function busca(strExpresionRegular as char, strBuscar as char)
objects
begin
    regexp_1 as integer
    regexp_2 as integer
    regexp_3 as integer
    
    i as integer
    numMatches as integer
    pos as integer
    len as integer
    
    strLista as char
    ret as integer
    
end
begin
    lstResults.Reset();

    regexp_1 = CosNewRegExpr(strExpresionRegular, strBuscar, FALSE, TRUE);
    numMatches = CosGetNumMatchesRegExpr(regexp_1);
    ++numMatches;
    for i = 1 to numMatches do
    begin
        ret = CosGetMatchRegExpr(regexp_1, i, pos, len);
        if ret != -1 then begin
            strLista = pos.Char+"|"+len.Char+"|" +strBuscar.SubString(pos, len) +"|";
            lstResults.AddString(strLista);
        end
    end
    
    CosFreeRegExpr(regexp_1);
    
end

public dll "cosregexpdll.dll" CosNewRegExpr(regularExpression as char, str as char, isFile as boolean, caseSensitive as boolean) return integer
public dll "cosregexpdll.dll" CosGetMatchRegExpr(regExprId as integer, numMatch as integer, VAR start as integer, VAR len as integer) return integer
public dll "cosregexpdll.dll" CosFreeRegExpr(regExprId as integer) return integer
public dll "cosregexpdll.dll" CosGetNumMatchesRegExpr(regExprId as integer) return integer


main
objects
begin
    
    
end
begin
    f.Run;    
end


main
objects
begin
    lChCosmosDir as char
end
begin
    lChCosmosDir =CosmosDir();
    Module.System(lChCosmosDir+"\bin\cosrep -crf "+lChCosmosDir+"\samples\stock.crf  -db stock -con stock -upd -online -ini"+lChCosmosDir+"\samples\samples.ini");
    


end

main
objects
begin

end
begin
    Module.System(CosmosDir+"\bin\cosrep -crf "+ ProjectDir + "\stock.crf -db stock -con stock -upd "
    "-f "+GetEnv("DBTEMP")+" \logdiff.sql -ini "+ ProjectDir + "\samples.ini -noshowsqlwindow -sqlserver Multibase ");
    OpenFileWithDefaultApp(GetEnv("DBTEMP")+"\logdiff.sql");
end

public dll "cossignfile.dll" CosSignFileCreateSigner() return integer
public dll "cossignfile.dll" CosSignFileFreeSigner(signer as integer)
public dll "cossignfile.dll" CosSignFileSignFacturaE(
    signer as integer,
    xmlPath as char, 
    xsigPath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char) return integer

public dll "cossignfile.dll" CosSignFileSignPDF(
    signer as integer,
    inPDFPath as char, 
    outPDFPath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char) return integer

public dll "cossignfile.dll" CosSignFileSignPAdES(
    signer as integer,
    inFilePath as char, 
    outFilePath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char,
    algorithm as char,
    format as char,
    mode as char) return integer

public dll "cossignfile.dll" CosSignFileSignXAdES(
    signer as integer,
    inFilePath as char, 
    outFilePath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char,
    algorithm as char,
    format as char,
    mode as char) return integer

public dll "cossignfile.dll" CosSignFileSignCAdES(
    signer as integer,
    inFilePath as char, 
    outFilePath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char,
    algorithm as char,
    format as char,
    mode as char) return integer

public dll "cossignfile.dll"  CosSignFileGetKeystoreFormats(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileGetSignAlgorithms(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileGetPAdESSignFormats(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileGetCAdESSignFormats(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileGetXAdESSignFormats(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileGetSignModes(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileSignXAdES_Ex(
    signer as integer,
    inFilePath as char, 
    outFilePath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char,
    algorithm as char,
    format as char,
    mode as char,
    extraParams as char) return integer


main
objects
begin
end
begin

    firmaXAdES_Ex();
end


private function firmaXAdES_Ex
objects begin
    signer as integer
    inFilePath as char
    outFilePath as char 
    p12Path as char
    keyStorePasswd as char
    alias as char
    aliasPasswd as char
    algorithm as char
    format as char
    mode as char
    extraParams as char
end
begin
    
     inFilePath = ProjectDir() + "\fimaXml\factura_electronica.xml";
     outFilePath = ProjectDir() + "\fimaXml\out\factura_electronica_CosSignFileSignXAdES_Ex.xsig";
    p12Path = ProjectDir() + "\certificado\XXXXXXX.p12"; //Almacén de firmas en formato P12
    
    inFilePath.Replace("\", "/");
    outFilePath.Replace("\", "/");
    p12Path.Replace("\", "/");
   
    keyStorePasswd = ""; //pruebas del almacen de certificados
    alias = ""; //Si hay más de un certificado en el almacen de certificados este el nombre que lo identifica.
    aliasPasswd = ""; //Passwrod del certificado específico.    
    

    format ="XAdES Enveloping";
    mode = "implicit";//CosSignFileGetSignModes
    algorithm = "SHA512withRSA"; //CosSignFileGetSignAlgorithms
    
    extraParams = '"policyIdentifier":"X.XX.XXX.X.X.X.X.X.X.X"'
    + ";"
    + '"policyIdentifierHash":"V8lVVNGDCPen6VELRD1Ja8HARFk="'
    + ";"
    + '"policyIdentifierHashAlgorithm":"SHA-256"'
    + ";"
    + '"policyDescription":"Texto descriptivo de la politica de seguridad"'
    + ";"
    + '"policyQualifier":"http://ejemplo.com/archivo.pdf"'
    ;

    signer = CosSignFileCreateSigner();

    CosSignFileSignXAdES_Ex(signer, inFilePath, outFilePath , p12Path, "pkcs12", keyStorePasswd, alias, aliasPasswd, algorithm, format, mode,
                            extraParams);
    CosSignFileFreeSigner(signer);
end

On Open Begin
    Module.LoadCustomControls(ProjectDir() + "\CustomControls\CustomControls_01.ini");
    Module.LoadCustomColors(ProjectDir() + "\themes\theme_blue.ini");
end

On Click chkActivar
begin
    if chkActivar.Checked then begin
        Module.PutEnv("COSMOSVISUALMODE","7");
    end else begin
        Module.PutEnv("COSMOSVISUALMODE","0");
    end
    repaint;
end


private function repaint
begin
    Frame.Refresh();
end

On event Click control rad_custom_control(e as event)
begin
    ChangeControlByRadio();
end

private function ChangeControlByRadio()
objects begin
    selectedItem as integer
    fileControlStyle as char
end
begin
    selectedItem = rad_custom_control.Selected;
    
    if selectedItem == 1 then begin
        fileControlStyle = ProjectDir() + "\CustomControls\CustomControls_01.ini";
    end else if selectedItem == 2 then begin
        fileControlStyle = ProjectDir() + "\CustomControls\CustomControls_02.ini";
    end else if selectedItem == 3 then begin
        fileControlStyle = ProjectDir() + "\CustomControls\CustomControls_03.ini";
    end else if selectedItem == 4 then begin
        fileControlStyle = ProjectDir() + "\CustomControls\CustomControls_04.ini";
    end

    Module.LoadCustomControls(fileControlStyle);

    repaint;
end

On event Click control rad_custom_color(e as event)
begin
    ChangeConlorByRadio();
end

private function ChangeConlorByRadio()
objects begin
    selectedItem as integer
    fileColorStyle as char
end
begin
    selectedItem = rad_custom_color.Selected;
    
    if selectedItem == 1 then begin
        fileColorStyle = ProjectDir() + "\themes\theme_blue.ini";
    end else if selectedItem == 2 then begin
        fileColorStyle = ProjectDir() + "\themes\theme_gray.ini";
    end else if selectedItem == 3 then begin
        fileColorStyle = ProjectDir() + "\themes\theme_brown.ini";
    end else if selectedItem == 4 then begin
        fileColorStyle = ProjectDir() + "\themes\theme_black.ini";
    end else if selectedItem == 5 then begin
        fileColorStyle = ProjectDir() + "\themes\transparent.ini";
    end

    Module.LoadCustomColors(fileColorStyle);

    repaint;
end

main()
objects
begin
    o as frm
end
begin


    o.Run();
end





main()
objects
begin
    o as frm
end
begin

    Module.PutEnv("COSMOSVISUALMODE","7");
    Module.LoadCustomControls(ProjectDir() + "\CustomControls\DRAWHEADER.ini");
    
    Module.LoadCustomColors(ProjectDir() + "\CustomControls\DRAWHEADER.ini");
    o.Run();
end


On Open Begin
   
    Module.LoadCustomControls(ProjectDir() + "\CustomControls\CustomControls_panel.ini");
 
end

On Click chkActivar
begin
    if chkActivar.Checked then begin
        Module.PutEnv("COSMOSVISUALMODE","7");
    end else begin
        Module.PutEnv("COSMOSVISUALMODE","0");
    end
    repaint;
end


private function repaint
begin
    Frame.Refresh();
end


main()
objects
begin
    o as frm
end
begin


   
    o.Run();
end



main
objects begin
    date1 as date
    s as char
end
begin
    date1=TODAY;
    date1.Trace;
    s= date1.Using(2);
    s.Trace;
    s= date1.Using(3);
    s.Trace;
    (date1.WeekDay).Trace;
    (date1.Day).Trace;
    (date1.Month).Trace;
    (date1.Year).Trace;
end

main 
objects
begin
    d1 d2 as date
    t1 t2 t as time
    d s as integer
    str as char
end
begin
    d1 = "01-01-08";
    d2 = TODAY;
    d  = d1.DaysTo(d2); 
    t1 = "00:00:01";
    t2 = NOW;
    s  = t1.SecondsTo(t2);
    if s < 0 then 
        --d;
    t  = "00:00:01";
    t += s;
    str = "Days: " + d + " days - " + t;
    str.Trace; 
end

On DblClick milist
begin
   "DblClick".Trace;
end

main
objects begin
    Miform as ff
end
begin
    Miform.milist.AddString("a1");
    Miform.milist.AddString("a2");
    Miform.Run;
end

main
objects
begin
    d as DDE
end
begin
    d.Initiate("PROGMAN","PROGMAN");
    d.Execute("[CreateGroup(DDE)]"); 
    d.Execute("[ShowGroup(1,1)]");//.Trace;
    d.Execute("[AddItem(notepad.exe,Text editor,,0)]");
    d.Terminate;
end



main
objects begin
    n as smallint
end
begin
    n = 10;
    n.Trace;
    n/=2;
    n.Trace;
end


On Open
begin
    
    SetEditMode(true);
    Query();
    
    p_coment.Text = "Seleccione una fila y pulse el botón modificar";
end




main
objects
begin
oCAutoEditMode as CGrid
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("Stock");
    PutEnv("DEBUGFORMTABLE" ,"TRUE");
    oCAutoEditMode.Run;
    Sql.Disconnect;
    Sql.DettachConnection;
end

On Open 
begin
    Carga;
end

private function Carga
objects begin
    miString as char
    fecha as date
    hora as time
    numero as integer
    miBin as binary
    miJson as json
end
begin
    miString.LoadFromFile(ProjectDir + "\quijote.txt");
    miBin.LoadFromFile(ProjectDir + "\quijote.txt");    
    miBin.LoadFromFile(ProjectDir + "\System Design - Big Archive - ByteByteGo.pdf" );
    numero = 12345;
    hora = now;
    fecha = today;
    miJson.LoadFromChar('{"nombre": "pepe", "apellido" : "rodriguez"}');
    "salgo".Trace();
    varHexStr = miBin.ToCharHex();
    InitSlider();
end

private function InitSlider
objects begin
    max as integer
end
begin
    edtMultiline.Text = varHexStr;
end
public function AsignaValores
begin
    Self.Resize(10);
    Self[1] = "uno";
    Self[2] = "dos";
    Self[3] = "tres";
    Self[4] = "cuatro";
    Self[5] = "cinco";
    Self[6] = "seis";
    Self[7] = "siete";
    Self[8] = "ocho";
    Self[9] = "nueve";
    Self[10] = "diez";
end
{
   La ventana "Variable Viewer" poermite consulta los valores de los elementos de la clase (no de la estructura completa)
}
public function AsignaValores
begin
    Self.Uno = "valor uno";
    Self.Dos = 2;
    Self.Tres.Resize(10);
    Self.Tres[1] = "uno";
    Self.Tres[2] = "dos";
    Self.Tres[3] = "tres";
    Self.Tres[4] = "cuatro";
    Self.Tres[5] = "cinco";
    Self.Tres[6] = "seis";
    Self.Tres[7] = "siete";
    Self.Tres[8] = "ocho";
    Self.Tres[9] = "nueve";
    Self.Tres[10] = "diez";
    Self.Cuatro = today;
    Self.Cinco.LoadFromFile(ProjectDir() + "\json\testjson.json");
end
{
   La ventana "Variable Viewer" poermite consulta los valores de los elementos del Array (no del Array completo).
   Para ver en el debug el contenido de un array debe estar marcada la casilla de verificación "Watch structs"
}

public function AsignaValores
begin
    Self.Resize(4);
    Self[1].LoadFromFile(ProjectDir() + "\json\json_01.json");
    Self[2].LoadFromFile(ProjectDir() + "\json\json_02.json");
    Self[3].LoadFromFile(ProjectDir() + "\json\json_03.json");
    Self[4].LoadFromFile(ProjectDir() + "\json\testjson.json");
end
On Open
begin
    MasterTable.Query();
end
On event Click control IDBUTTON1(e as event)
begin
    ("Ver variables de tabla").Trace();
end
{
    La finalidad de este módulo de ejemplo es mostrar la implementación del nuevo botón "Show Selected Variable Data".
    Este módulo de ejemplo tiene que ejecutarse en modo Debug. 
    Seleccionar un elemento de la lista de variables antes de pulsar el botón "Show Selected Variable Data".
}
main
objects
begin
    ofrmTable as frmTable
end
begin
    MessageBox('Este módulo de ejemplo debe ejectuarse en modo debug. Se ha desarrollado para ver el funcionamiento del botón «Show Selected Variable Data»',
                "DEBUG. Show Selected Variable Data");
    If not Yes ("¿Desea continuar?", "AVISO") then return;
    mifuncion();
    PutEnv("DBPATH" ,ProjectDir());
    Sql.Connect("stock");
    ofrmTable.Run();
    Sql.Disconnect();
end

private function mifuncion()
objects begin
    miString as char
    fecha as date
    hora as time
    numero as integer
    miBin as binary
    miJson as json
    oArrayChar as CArrayChar
    oStruct as CMiStruct
    oArrayJson as CArrayJson
end
begin
    miString.LoadFromFile(ProjectDir + "\quijote.txt");
    miBin.LoadFromFile(ProjectDir + "\quijote.txt");    
    miBin.LoadFromFile(ProjectDir + "\input\Prueba firma PDF.pdf" );
    numero = 12345;
    hora = now;
    fecha = today;
    miJson.LoadFromFile(ProjectDir() + "\json\testjson.json");

    oArrayChar.AsignaValores();
    
    oStruct.AsignaValores();
    oArrayJson.AsignaValores();
end

private function otra()
objects begin
    str as char
end
begin
    str = "1234";
end

private function miform()
objects begin
    f as frm
end
begin
    f.Run;
end

main
objects begin
    n as smallint
end
begin
    n = 3;
    n.Trace;
    --n;
    n.Trace;
end

main
objects begin
    scursor as sqlcursor 
    i as smallint
    name as char(40)
    code1 as smallint
    str as char (80)
end
begin
    i = 8;
    Sql.AttachConnection;
    Sql.Connect("stock"); 
    if Sql.Error >=0 then 
    begin
        scursor.AttachServer(Sql);
        scursor.Prepare("select customer, surname from customers where customers.customer <= ?");
        scursor.Open(i);
        scursor.Fetch(code1,name);
        str = code1;
        str += " ";
        str += name;
        str.Trace;
        scursor.Close; 
        Sql.DettachConnection; 
        Sql.Connect("stock"); 
        scursor.AttachServer(Sql);
        scursor.Prepare("select description from items where item between 1 and 3");
        scursor.Open;
        scursor.Fetch(str);
        str.Trace;
        scursor.Close;  
        scursor.Free;  
    end
end

On Click botdis
begin
    Mdrop.Disabled=TRUE; // The Control will be disabled
    isdisabled();
end

On Click benabled
begin
    Mdrop.Disabled=FALSE;
    isdisabled();
end

Public isdisabled()
begin
    if Mdrop.Disabled then
        "The control is disabled".Trace; // The Control will be disabled 
    else
       "The control is enabled".Trace; // The Control will be enabled
end
Main 
objects begin
    Mform as fr
end
begin
    Mform.Run; 
end

On Click midisable
begin
        mitab.DisablePage(1,FALSE);
        mitab.IsPageDisabled(1).Trace;
        
        mitab.DisablePage(2,TRUE);
        mitab.IsPageDisabled(2).Trace;
end

main
objects begin
    fr as miform
end
begin
    fr.Run;    
end

main
objects begin
    n n1 n2 as smallint
end
begin
    n1 = 145;
    n2 = 5;
    n =  n1 / n2;
    n.Trace;
end

main
objects begin
    s as char
end
begin
    s=LenguageName(); 
    s.Trace;
end

public function LenguageName()return char
objects
begin
    name as char(70)
    len as smallint default 0
end
begin
    len = VerLanguageName(Castellano,name,70);
    if len == 0 then
        return "";
    else
        return name;
end

private dll "ver.dll" VerLanguageName(uLang as smallint,var lpszLang as char,cbLang as smallint) return smallint


main
begin
    EditExample(); 
end

public function EditExample() 
begin

    editSmdSample("fr.smd -view");
end

private dll "edtsmd.dll" editSmdSample(smdName as char)


public function ppp() return Boolean
begin
    return TRUE;
end

On Open
begin
    IDLIST2.AddString("a1");
    IDLIST2.AddString("a2");  
    IDLIST2.AddString("a3");  
    IDLIST2.AddString("a4");
    IDLIST2.AddString("a5");  
    IDLIST2.AddString("a6");  
end


on Dragover (ctr as char,fromCtr as SimpleFormControl, fromItem as integer, var result as integer)
begin
    if(fromCtr.Name == "IDBOXGROUP2"  OR fromCtr.Name == "IDLIST3" OR fromCtr.Name == "IDLIST2"  OR fromCtr.Name == "pcolor") then
        result = 1;
    else
        result = 0;
end

on Dragdrop IDBOXGROUP3 (item as integer, fromCtr as SimpleFormControl, fromItem as integer, var result as integer)
begin
    if(fromCtr.Name == "IDBOXGROUP2" OR fromCtr.Name == "pcolor") then
    begin
        result = 1;
        ("Drop ["+fromItem+ "]").Trace;
       IDBOXGROUP3.SetItemBackground(item, fromCtr.GetItemBackground(fromItem));
    end
    else
        result = 0;
end

on Dragdrop IDLIST2 (item as integer, fromCtr as SimpleFormControl, fromItem as integer, var result as integer)
begin
    if(fromCtr.Name == "IDLIST2") then
    begin
        result = 1;
        ("Drop ["+fromItem+ "]").Trace;
        IDLIST2.AddString(fromCtr.GetListText(fromItem));
    end
    else
    if(fromCtr.Name == "IDLIST3") then
    begin
        result = 1;
        ("Drop ["+fromItem+ "]").Trace;
        IDLIST2.AddString(fromCtr.GetListText(fromItem));
    end
    else
        result = 0;
end

on Dragdrop IDLIST3 (item as integer, fromCtr as SimpleFormControl, fromItem as integer, var result as integer)
begin
    if(fromCtr.Name == "IDLIST2") then
    begin
        result = 1;
        ("Drop ["+fromItem+ "]").Trace;
        IDLIST3.AddString(fromCtr.GetListText(fromItem));
    end
    else
    if(fromCtr.Name == "IDLIST3") then
    begin
        result = 1;
        ("Drop ["+fromItem+ "]").Trace;
        IDLIST3.AddString(fromCtr.GetListText(fromItem));
    end
    else
        result = 0;
end
on Click IDPAL
objects begin

end
begin
    mpalette.Open;
    Yield;
end

on Click IDFORM
begin
    oDrag.Open;
    Yield;
end
on Dragdrop pcolor(item as integer, fromCtr as SimpleFormControl, fromItem as integer, var result as integer)
begin
    if(fromCtr.Name == "IDBOXGROUP2" or fromCtr.Name == "pcolor" ) then
    begin
        result = 1;
        ("Drop ["+fromItem+ "]").Trace;
       pcolor.SetItemBackground(item, fromCtr.GetItemBackground(fromItem));
    end
    else
        result = 0;
end

on Dragover pcolor(fromCtr as SimpleFormControl, fromItem as integer, var result as integer)
begin
    if(fromCtr.Name == "IDBOXGROUP2" or fromCtr.Name == "pcolor") then
        result = 1;
    else
        result = 0;
end
main
objects begin
    fr as mform
end
begin
    fr.Run;
end


on Open 
begin
    medit="HELLO WORLD";
end

On event Click control bset(e as event)
objects begin
    astart as integer
    aend as integer
end
begin
    medit.SetEditSel(5,9); 
    medit.GetEditSel(astart,aend); 
    ("The characters (" + astart +","+ aend + "] are selected").Trace;
end

On event Click control bget(e as event)
objects begin
    astart as integer
    aend as integer
end
begin
    medit.GetEditSel(astart,aend); 
    ("The characters (" + astart +","+ aend + "] are selected").Trace;
end
main
objects begin
    miform as fr
end
Begin
   
    miform.Run;
  
end


On command Delete
begin
    if lineas.NumRows > 0
    then
        MessageBox("Atencion !!! este albaran contiene lineas", "Atencion");
    else if Yes("Desea borrar el Albaran")
    then
        albaranes.Delete;
end

On command mostrar // Muestra una ventana con los clientes
begin
    Sql.SelectWindow(self,"select cliente,nombre,empresa from clientes",3,"Clientes",1,albaranes.cliente);
    albaranes.cliente=albaranes.cliente;
end

On command AddLineas
begin
    lineas.Add;
end

On command DeleteLineas
begin
    if Yes("Desea borrar la linea")
    then
        lineas.Delete;
end

On command UpdateLineas
begin
    lineas.Update;
end

On Fetch Table lineas 
begin
    if lineas.descuento>5 then
        midesc.Foreground= Rgb(255,0,0);
    else    
        midesc.Foreground= Rgb(0,0,255);
end
main
objects
begin
    miForm as CFormAlba
end
begin
    Sql.Connect("almacen");// conecta el servidor por defecto a la base de datos almacen
    miForm.AttachServer(Sql);    // asocia el servidor por defecto al form
    miForm.Query;          // Consulta las filas de la tabla maestra del form 
    miForm.Run;            // lanza el form
    Sql.Disconnect;        // desconecta el servidor
end

On Open
begin
    edt_uno.Text = "abc";
    Module.PutEnv("EDITFIELDNOMARKONGETFOCUS", "FALSE");
end


On event Click control chk_cambia(e as event)
begin
    if chk_cambia.Checked then begin
        Module.PutEnv("EDITFIELDNOMARKONGETFOCUS", "TRUE");
    end else begin
        Module.PutEnv("EDITFIELDNOMARKONGETFOCUS", "FALSE");
    end
end
main
objects
begin
end
begin
    f.Run;
end

main
objects
begin

end
begin
    scalc();
end


private function scalc()
Objects begin
    oDesktop   as ActiveX    
    oServMan as ActiveX
    bridgeStructProperties as ActiveX
    arrayParam as cArrayProperties
    oDocumento as ActiveX
    oHojas as ActiveX
    oHoja as ActiveX
    oCelda1 as ActiveX
    oCelda2 as ActiveX
    numHoja as Smallint
    str as Char
    oColumns as ActiveX
    oColumn as ActiveX
   
    oSaveArgs as ActiveX
    oPage as ActiveX 
    oLinked as ActiveX
    miPropiedad as ActiveX
    
    fichero as Char
    prop as Char
    
    Rect as ActiveX
    RangeAddress as ActiveX
    Charts as ActiveX
    Chart0 as ActiveX
    Chart1 as ActiveX
    ChartDiagram as ActiveX
    ChartTitle as ActiveX
    ChartLegend as ActiveX
    BOLD as decimal (9,6)
    x as integer
    endr as integer    
    oArrayRangeAddress as cArrayRangeAddress
end
begin
    
    oServMan.CreateActiveXFromProgID("com.sun.star.ServiceManager");
    oServMan.GetCLSID();
    oServMan.GetClassName();
    oServMan.Invoke("createInstance" ,oDesktop,"com.sun.star.frame.Desktop");
    
    oDesktop.Invoke("LoadComponentFromURL" ,oDocumento,"private:factory/scalc","_blank",FALSE, arrayParam);
    
    oDocumento.Invoke("getSheets", oHojas);
    numHoja = 0;
    oHojas.Invoke("getByIndex", oHoja, numHoja);

    { * Inicio inserción de datos *}
    
    oHoja.Invoke("getCellByPosition", oCelda1, 1, 0);//A1
    oCelda1.SetProperty("CharWeight", 150);
    oCelda1.Invoke("setFormula", NULL, "Mes");
    oHoja.Invoke("getCellByPosition", oCelda1, 2, 0);//B1
    oCelda1.SetProperty("CharWeight", 150);
    oCelda1.Invoke("setFormula", NULL, "Ventas");
    oHoja.Invoke("getCellByPosition", oCelda1, 3, 0);//C1
    oCelda1.SetProperty("CharWeight", 150);
    oCelda1.Invoke("setFormula", NULL, "Gastos");
    oHoja.Invoke("getCellByPosition", oCelda1, 4, 0);//D1
    oCelda1.SetProperty("CharWeight", 150);
    oCelda1.Invoke("setFormula", NULL, "Diferencia");


    InsertaFilaDeDatos(oHoja, "Enero", 3727, 1200, 1);
    InsertaFilaDeDatos(oHoja, "Febrero", 1233, 1200, 2);
    InsertaFilaDeDatos(oHoja, "Marzo", 5433, 1200, 3);
    InsertaFilaDeDatos(oHoja, "Abril", 8967, 1200, 4);
    InsertaFilaDeDatos(oHoja, "Mayo", 1323, 1200, 5);
    InsertaFilaDeDatos(oHoja, "Junio", 1853, 1200, 6);
    InsertaFilaDeDatos(oHoja, "Julio", 1327, 1200, 7);
    InsertaFilaDeDatos(oHoja, "Agosto", 4254, 1200, 8);
    InsertaFilaDeDatos(oHoja, "Septiembre", 1233, 1200, 9);
    InsertaFilaDeDatos(oHoja, "Octubre", 654, 1200, 10);
    InsertaFilaDeDatos(oHoja, "Noviembre", 1212, 1200, 11);
    InsertaFilaDeDatos(oHoja, "Diciembre", 9723, 1200, 12);
    
    oHoja.Invoke("getCellByPosition", oCelda1, 1, 14);
    oCelda1.SetProperty("CharWeight", 150); //Negrita
    oCelda1.SetProperty("charUnderline", True); //Subrayado
    oCelda1.SetProperty("CharFontName", "Century Gothic");
    oCelda1.Invoke("setFormula", null, "Suma:");


    oHoja.Invoke("getCellByPosition", oCelda1, 2, 14);
    oCelda1.Invoke("setFormula", null, "=Sum(C2:C13)");


    { ****** chart ****** }
    oServMan.Invoke("Bridge_GetStruct" ,Rect,"com.sun.star.awt.Rectangle");
    oServMan.Invoke("Bridge_GetStruct" ,oArrayRangeAddress[1],"com.sun.star.table.CellRangeAddress");

    oHoja.Invoke("getCharts", Charts);
    Rect.SetProperty("x", 0);
    Rect.SetProperty("y", 8000);
    Rect.SetProperty("Width", 16000);
    Rect.SetProperty("Height", 10000);
    oArrayRangeAddress[1].SetProperty("Sheet", numHoja);
    oArrayRangeAddress[1].SetProperty("StartColumn", 1); //1 Segunda columna
    oArrayRangeAddress[1].SetProperty("StartRow", 0);//0 primera fila
    oArrayRangeAddress[1].SetProperty("EndColumn", 4);//Columna E
    oArrayRangeAddress[1].SetProperty("EndRow", 12);

    Charts.Invoke("addNewByName", NULL, "michart", Rect, oArrayRangeAddress, TRUE, TRUE);
    
    Charts.Invoke("getByName", Chart0, "michart");
    Chart0.GetProperty("embeddedObject", Chart1);
    Chart1.Invoke("createInstance" , ChartDiagram,"com.sun.star.chart.BarDiagram");//Diagrama de barras
    ChartDiagram.SetProperty("Dim3D", TRUE); //3d
    ChartDiagram.SetProperty("D3DScenePerspective", 1);//1 == com.sun.star.drawing.ProjectionMode.PERSPECTIVE
    ChartDiagram.SetProperty("Perspective", 100); 
    ChartDiagram.SetProperty("RotationHorizontal", 60); 
    ChartDiagram.SetProperty("RotationVertical ", 30); 
    Chart1.SetProperty("HasMainTitle", TRUE);
    Chart1.GetProperty("Title", ChartTitle);
    ChartTitle.SetProperty("String", "este es el título");
    Chart1.SetProperty("HasLegend", TRUE);
    Chart1.GetProperty("Legend", ChartLegend);
    ChartLegend.SetProperty("Alegnment", 1); // Alignment 1=left 2=center 3=right
    ChartLegend.SetProperty("FillStyle", 1);
    ChartLegend.SetProperty("FillColor", Module.Rgb(210, 210, 210));
    ChartLegend.SetProperty("CharHeight", 7);
    
    { ****** fin chart ****** }
    
 {   oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");    
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "HTML (StarCalc)"); //HTML (StarCalc) - MS Excel 97
    
    oDocumento.Invoke("storeAsURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/ejemploOpenOfficeCalc.html", arrayParam);
    
    oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "MS Excel 97");
    
    oDocumento.Invoke("storeAsURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/ejemploOpenOfficeCalc.xls", arrayParam);    
  }  
    oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "calc_pdf_Export");

    oDocumento.Invoke("storeToURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/ejemploOpenOfficeCalc.pdf", arrayParam);      

end

private function RgbToOOOColor (rgbColor as integer) return integer
objects begin
    rojo verde azul bgrColor as integer
    colorStr as char
end
begin
    colorStr = GetRgbColor(rgbColor);
    
    rojo = colorStr.GetWord("," , 1);
    verde = colorStr.GetWord("," , 2);
    azul = colorStr.GetWord("," , 3);

    bgrColor = Rgb(azul, verde, rojo);

    return bgrColor;
end

private function InsertaFilaDeDatos(oHoja as ActiveX, mes as Char, valor1 as integer, valor2 as integer, fila as integer)
objects begin
    oCelda1 as ActiveX

end
begin

    oHoja.Invoke("getCellByPosition", oCelda1,1, fila);
    oCelda1.Invoke("setFormula", NULL, mes);
    EstableceEstiloCelda(oCelda1, Rgb(255,255,255), Rgb(200,200,255)); //ActiveX , Color de Fondo y color texto

    oHoja.Invoke("getCellByPosition", oCelda1, 2, fila);
    oCelda1.Invoke("setValue", NULL, valor1);
    
    oHoja.Invoke("getCellByPosition", oCelda1, 3, fila);
    oCelda1.Invoke("setValue", NULL, valor2);
    
    oHoja.Invoke("getCellByPosition", oCelda1, 4, fila);
    if valor1 < valor2 then begin
        oCelda1.SetProperty("CellBackColor",RgbToOOOColor (Rgb(255,0,0)));
    end
    oCelda1.Invoke("setFormula", NULL, "=C" + (fila + 1) + "-D" + (fila + 1));
end
private function EstableceEstiloCelda(oCelda1 as ActiveX, colorFondo as integer, colorTexto as integer)
begin
    oCelda1.SetProperty("CellBackColor", RgbToOOOColor (colorFondo));//Atención. La propiedad de OOO en lugar de RGB es BGR
    oCelda1.SetProperty("CharColor", RgbToOOOColor (colorTexto));//Atención. La propiedad de OOO en lugar de RGB es BGR
    oCelda1.SetProperty("CharHeight", 11);
    oCelda1.SetProperty("CharFontName", "Times New Roman");
    oCelda1.SetProperty("CharWeight", 150);
end




main
Objects begin
end
begin
    NuevoDocumento();
    InsertarTextEnCabecerayPie();
    InsertarImagen();
    AñadirTexto();
    ReemplazarTexto();
    AsignarAtributosAlTexto();    

   
end

Private NuevoDocumento()
begin
    oServiceManager.CreateActiveXFromProgID("com.sun.star.ServiceManager");
    oServiceManager.GetCLSID();
    oServiceManager.GetClassName();
    oServiceManager.Invoke("createInstance" ,oDesktop,"com.sun.star.frame.Desktop");
    oDesktop.Invoke("LoadComponentFromURL" ,oDocumento,"private:factory/swriter","_blank",FALSE, arrayParam);
    oDocumento.SetProperty("Title", "Ejemplos OpenOffice");
end

Private AbrirDocumento
begin
    oServiceManager.CreateActiveXFromProgID("com.sun.star.ServiceManager");
    oServiceManager.GetCLSID();
    oServiceManager.GetClassName();
    oServiceManager.Invoke("createInstance" ,oDesktop,"com.sun.star.frame.Desktop");
    oDesktop.Invoke("LoadComponentFromURL" ,oDocumento, "file:///"+ProjectDir().Replace("\","/")+"/ejemploOpenOfficeWrite.odt","_blank",FALSE , arrayParam);
end
private function plantilla
Objects begin
    oDesktop oServMan bridgeStructProperties as ActiveX    
    arrayParam as cArrayProperties
    oDocumento as ActiveX
    oTexto as ActiveX
    oBk as ActiveX
    oBookmarks as ActiveX
    oBookmark oAnchor as ActiveX
    vFecha as date default today
    vPersona as char default "Juan Ramirez" 
    vPersona2 as char default "Director departamento de ventas"
    oImagen oStart oCursor oSize as ActiveX
end
begin
    oServMan.CreateActiveXFromProgID("com.sun.star.ServiceManager");
    oServMan.GetCLSID();
    oServMan.GetClassName();
    oServMan.Invoke("createInstance" ,oDesktop,"com.sun.star.frame.Desktop");
    
    oDesktop.Invoke("LoadComponentFromURL" ,oDocumento,"file:///"+ProjectDir()+"/miplantilla.ott","_blank",0, arrayParam);



    oDocumento.Invoke("getBookmarks",  oBookmarks);

    oBookmarks.Invoke("getByName", oBookmark,"fecha");
    oBookmark.Invoke("getAnchor", oAnchor);
    oAnchor.Invoke("setString", null, vFecha);


    oBookmarks.Invoke("getByName", oBookmark,"Persona1");
    oBookmark.Invoke("getAnchor", oAnchor);
    oAnchor.Invoke("setString", null, vPersona);


    oBookmarks.Invoke("getByName", oBookmark,"Persona2");
    oBookmark.Invoke("getAnchor", oAnchor);
    oAnchor.Invoke("setString", null, vPersona2);


    
    oDocumento.Invoke("storeAsURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/carta.odt", arrayParam);    
    
    oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");


  
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "MS Word 97");
    oDocumento.Invoke("storeToURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/carta.doc", arrayParam);    
    oDocumento.Invoke("Close");    
    
    oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");    
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "writer_pdf_Export");
    oDocumento.Invoke("storeToURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/carta.pdf", arrayParam);    
    oDocumento.Invoke("Close");    
    
    oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");    
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "Text");
    oDocumento.Invoke("storeToURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/carta.txt", arrayParam);    
    oDocumento.Invoke("Close");    

    oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");    
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "Rich Text Format");
    oDocumento.Invoke("storeToURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/carta.rtf", arrayParam);    
    oDocumento.Invoke("Close");    


 
end



private function InsertarImagen
Objects begin
     oImagen oCursor as ActiveX
    oAnchor as ActiveX 
    oTexto as ActiveX
    
end
begin
{    oServMan.CreateActiveXFromProgID("com.sun.star.ServiceManager");
    oServMan.GetCLSID();
    oServMan.GetClassName();
    oServMan.Invoke("createInstance" ,oDesktop,"com.sun.star.frame.Desktop");
    oDesktop.Invoke("LoadComponentFromURL" ,oDocumento,"private:factory/swriter","_blank",FALSE, arrayParam);
}    
    oDocumento.Invoke("CreateInstance", oImagen, "com.sun.star.text.GraphicObject");
    
    oDocumento.Invoke("getText" ,oTexto);
    oTexto.Invoke("createTextCursor", oCursor);
    oCursor.Invoke("goToStart", null, false);
    

    oImagen.SetProperty("GraphicURL" , "file:///"+ProjectDir().Replace("\","/")+"/iconos/base100.jpg");
    oImagen.SetProperty("AnchorType", "com.sun.star.text.TextContentAnchorType.AS_CHARACTER"); //Pendiente . Tiene que estar mal
    oImagen.SetProperty("Width",3000); 
    oImagen.SetProperty("Height",1000);
    
    oTexto.Invoke("insertTextContent", null, oCursor, oImagen, False );
    
    
    oDocumento.Invoke("storeAsURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/ejemploOpenOfficeWrite.odt", arrayParam);
end

private function InsertarTextEnCabecerayPie
Objects begin
    oEstilos oEstilosPagina oEstiloPredeterminado oHeaderText oFooterText as ActiveX
    oPageNumber oPageCount as ActiveX
    chEstilo as char default "Standard"
    oTexto as ActiveX
end
begin

    oDocumento.Invoke("getStyleFamilies", oEstilos);

    oEstilos.Invoke("getByName", oEstilosPagina, "PageStyles");

    oEstilosPagina.Invoke("getByName",oEstiloPredeterminado , chEstilo );

    oEstiloPredeterminado.SetProperty("HeaderIsOn", True); //Activar encabezado

    oEstiloPredeterminado.SetProperty("HeaderIsDynamicHeight", true); //Ajuste diámico de altura
    oEstiloPredeterminado.SetProperty("HeaderBodyDistance", 500); //Distancia al cuerpo del documento
    
    oEstiloPredeterminado.GetProperty("HeaderText", oHeaderText);
    oHeaderText.SetProperty("String", "Cosmos 4.6");
    
    oEstiloPredeterminado.SetProperty("FooterIsOn", true);
    oEstiloPredeterminado.SetProperty("FooterIsDynamicHeight",true); //Ajuste dinamico de altura
    oEstiloPredeterminado.SetProperty("FooterBodyDistance", 500); //Distancia al cuerpo del documento
    oEstiloPredeterminado.GetProperty("FooterText", oFooterText);
    
    oFooterText.SetProperty("String", "Ejemplo");
    
     
    oDocumento.Invoke("storeToURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/ejemploOpenOfficeWrite.odt", arrayParam);
    
   
end

{
    oPageNumber = oDoc.createInstance( "com.sun.star.text.TextField.PageNumber" );
    oPageCount  = oDoc.createInstance( "com.sun.star.text.TextField.PageCount" );

      oFooter = oPStyle.RightPageFooterContent
       oFooter.getLeftText().setString( "Monthly Report" )
       oFooter.getCenterText().setString( "" )
       oFooter.getRightText().setString( "Page " )
       oCursor = oFooter.getRightText().createTextCursor()
       oCursor.gotoEnd( False )
       oFooter.getRightText().insertTextContent( oCursor, oPageNumber, True )
       oCursor.gotoEnd( False )
       oCursor.setString( " of " )
       oCursor.gotoEnd( False )
       oFooter.getRightText().insertTextContent( oCursor, oPageCount, True )
       oPStyle.RightPageFooterContent = oFooter

} 

Private AñadirPie2()
Objects begin
end
begin
end

private function AñadirTexto
Objects begin
    oTexto as ActiveX
    oCursorStart oCurrent oVCursor oCursorByRange as ActiveX
    bIsNextParrafo as boolean
end
begin
    
    oDocumento.Invoke("getText" ,oTexto);

    oDocumento.GetProperty("currentcontroller", oCurrent);
    oCurrent.Invoke("getViewCursor", oVCursor);
    oVCursor.Invoke("getStart", oCursorStart);
    oTexto.Invoke("createTextCursorByRange",oCursorByRange,oCursorStart);    

    oTexto.Invoke("setString", null , "Estimado Cliente");
    oTexto.Invoke("insertControlCharacter",null,oCursorStart ,ControlCharacter_APPEND_PARAGRA, FALSE );    
    oTexto.Invoke("insertControlCharacter",null,oCursorStart ,ControlCharacter_APPEND_PARAGRA, FALSE );    
    oTexto.Invoke("insertControlCharacter",null,oCursorStart ,ControlCharacter_APPEND_PARAGRA, FALSE );    

    oTexto.Invoke("insertControlCharacter",null,oCursorStart ,ControlCharacter_PARAGRAPH_BK, FALSE );    
    oTexto.Invoke("insertString", null ,oCursorStart, "Nueva versión de Cosmos 4.6. Ejemplo: texto sin formato en un documento de OpenOffice." +
                    " En este ejemplo se utiliza el ActiveX de Openoffice.", FALSE );

    oTexto.Invoke("insertControlCharacter",null,oCursorStart ,ControlCharacter_APPEND_PARAGRA, FALSE );    
    oTexto.Invoke("insertControlCharacter",null,oCursorStart ,ControlCharacter_APPEND_PARAGRA, FALSE );    
    oTexto.Invoke("insertControlCharacter",null,oCursorStart ,ControlCharacter_APPEND_PARAGRA, FALSE );    
    oTexto.Invoke("insertString", null ,oCursorStart, "Firmado: nombre" , FALSE );

                   
    oDocumento.Invoke("storeAsURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/ejemploOpenOfficeWrite.odt", arrayParam);
    
end

{
Esta funcion recorre todos los parrafos de un texto
Dim EnumeracionDeParrafos As Object 
Dim Parrafo As Object

EnumeracionDeParrafos = Textdoc.Text.createEnumeration

While EnumeracionDeParrafos.hasMoreElements() 
   Parrafo = ParagraphElements.nextElement() 
end
    
}
{ **********PENDIENTE*************** }
Private RecorreParrafosDeTexto
Objects begin
    oEnumeracionDeParrafos oParrafo oTexto as ActiveX
    bhasMoreElements as boolean
    i as smallint default 0
end
begin
    oDocumento.Invoke("getText" ,oTexto);
    oTexto.Invoke("createEnumeration", oEnumeracionDeParrafos);
    oEnumeracionDeParrafos.Invoke("hasMoreElements", bhasMoreElements);

    While bhasMoreElements do begin
        ++i;
        oEnumeracionDeParrafos.Invoke("nextElement", oParrafo); //OJO Cuenta los parrafos por salto de linea.
        oEnumeracionDeParrafos.Invoke("hasMoreElements", bhasMoreElements);
    end

end
Private TrabajarConParrafo(var oParrafo as ActiveX) 
begin

end
{
Sub SetTextAttributes
Dim document As Object
Dim Cursor
Dim oText As Object
Dim mySelection As Object
Dim Font As String
document=ThisComponent
oText = document.Text
Cursor = document.currentcontroller.getViewCursor()
mySelection = oText.createTextCursorByRange(Cursor.getStart())
mySelection.gotoStartOfParagraph(false)
mySelection.gotoEndOfParagraph(true)
mySelection.CharFontName="Courier New"
mySelection.CharHeight="10"
'Time to set Italic or NOT italic as the case with
'NONE, OBLIQUE, ITALIC, DONTKNOW, REVERSE_OBLIQUE, REVERSE_ITALIC
mySelection.CharPosture = com.sun.star.awt.FontSlant.ITALIC
'So you want BOLD text?
'DONTKNOW, THIN, ULTRALIGHT, LIGHT, SEMILIGHT,
'NORMAL, SEMIBOLD, BOLD, ULTRABOLD, BLACK
'These are really only constants where THIN is 50, NORMAL is 100
' BOLD is 150, and BLACK is 200.
mySelection.CharWeight = com.sun.star.awt.FontWeight.BOLD
'If underlining is your thing
'NONE, SINGLE, DOUBLE, DOTTED, DONTKNOW, DASH, LONGDASH,
'DASHDOT, DASHDOTDOT, SMALLWAVE, WAVE, DOUBLEWAVE, BOLD,
'BOLDDOTTED, BOLDDASH, BOLDLONGDASH, BOLDDASHDOT,
'BOLDDASHDOTDOT, BOLDWAVE
mySelection.CharUnderline = com.sun.star.awt.FontUnderline.SINGLE
'I have not experimented with this enough to know what the true
'implications of this really is, but I do know that it seems to set
'the character locale to German.
Dim aLanguage As New com.sun.star.lang.Locale
aLanguage.Country = "de"
aLanguage.Language = "de"
mySelection.CharLocale = aLanguage
End Sub
}
Private AsignarAtributosAlTexto()
Objects begin
    oCursorStart oTexto oCursorByRange oCurrent oVCursor as ActiveX
    chFont as char
end
begin
    oDocumento.Invoke("getText" ,oTexto);
    oDocumento.GetProperty("currentcontroller", oCurrent);
    oCurrent.Invoke("getViewCursor", oVCursor);
    
    oVCursor.Invoke("getStart", oCursorStart);
    oTexto.Invoke("createTextCursorByRange", oCursorByRange, oCursorStart);
    
    oCursorByRange.Invoke("gotoStartOfParagraph",null ,false); //Si comento esta linea no cambia los atributos del texto
    oCursorByRange.Invoke("gotoEndOfParagraph",null ,true);
    oCursorByRange.SetProperty("CharFontName", "Courier New");
    oCursorByRange.SetProperty("CharHeight", "14");
    oCursorByRange.SetProperty("CharPosture", 2);
    oCursorByRange.SetProperty("CharWeight", "150"); //***Pendiente
end
Private ReemplazarTexto()
Objects begin
    oTexto oCursor oReplace as ActiveX
end
begin
  
    oDocumento.Invoke("getText" ,oTexto);    
    oTexto.Invoke("createTextCursor", oCursor);
    oDocumento.Invoke("createReplaceDescriptor", oReplace);
    oReplace.Invoke("setSearchString", null, "nombre");
    oReplace.Invoke("setReplaceString", null, "Ramón Rodriguez");
    oDocumento.Invoke("ReplaceAll", null, oReplace);
end
{
Sub DeleteCurrentLine
Dim oVCurs
oVCurs = ThisComponent.getCurrentController().getViewCursor()
oVCurs.gotoStartOfLine(False)
oVCurs.gotoEndOfLine(True)
oVCurs.setString("")
End Sub
}
Private BorrarLinea()
Objects begin
    oTexto oVCursor oCurrent as ActiveX
end
begin
    oDocumento.Invoke("getText" ,oTexto);
    oDocumento.GetProperty("currentcontroller", oCurrent);
    oCurrent.Invoke("getViewCursor", oVCursor);
    oVCursor.Invoke("gotoStartOfLine", null, false);
    oVCursor.Invoke("gotoEndOfLine", null, true);
    oVCursor.Invoke("setString", null, "");
end

{
oVCurs = ThisComponent.getCurrentController().getViewCursor()
REM Get the text object from the cursor, it is safer than assuming
REM that the high level document Text object contains the
REM view cursor.
oText = oVCurs.getText()
oCurs = oText.createTextCursorByRange(oVCurs)
oCurs.gotoStartOfParagraph(False)
If oCurs.gotoNextParagraph(True) Then
oCurs.setString("")
Else
REM Then we were already AT the last paragraph
If oCurs.gotoPreviousParagraph(False) Then
oCurs.gotoEndOfParagraph(False)
oCurs.gotoNextParagraph(True)
oCurs.gotoEndOfParagraph(True)
oCurs.setString("")
Else
Rem There is one, and only one paragraph here
REM Remove it
oCurs.gotoStartOfParagraph(False)
oCurs.gotoEndOfParagraph(True)
oCurs.setString("")
End If
End If
End Sub

}
Private BorrarParrafo(pText as char default "")
Objects begin
    oCursorStart oTexto oVCursor oCurrent oCursorByRange as ActiveX
    bNextParrafo bPreviusParrafo as boolean
end
begin
    oDocumento.Invoke("getText" ,oTexto);
    oDocumento.GetProperty("currentcontroller", oCurrent);
    oCurrent.Invoke("getViewCursor", oVCursor);
    oVCursor.Invoke("getStart", oCursorStart);
    oTexto.Invoke("createTextCursorByRange",oCursorByRange,oCursorStart);
    oCursorByRange.Invoke("gotoStartOfParagraph",null ,false);
    oCursorByRange.Invoke("gotoNextParagraph", bNextParrafo, true);
    if bNextParrafo then 
        oCursorByRange.Invoke("setString", null, "");
    else begin
        oCursorByRange.Invoke("gotoPreviousParagraph", bPreviusParrafo, false);
        if bPreviusParrafo then begin
            oCursorByRange.Invoke("gotoEndOfParagraph", null, false);
            oCursorByRange.Invoke("gotoNextParagraph", null, true);
            oCursorByRange.Invoke("gotoEndOfParagraph", null, true);
            oCursorByRange.Invoke("setString", null, "");
        end
        else begin
            oCursorByRange.Invoke("gotoStartOfParagraph", null, false);
            oCursorByRange.Invoke("gotoEndOfParagraph", null, true);
            oCursorByRange.Invoke("setString", null, "");
        end
    end
        

end


main
Objects begin
end
begin
   plantilla();
end

private function plantilla
Objects begin
    oDesktop oServMan bridgeStructProperties as ActiveX    
    arrayParam as cArrayProperties
    oDocumento as ActiveX
    oTexto as ActiveX
    oBk as ActiveX
    oBookmarks as ActiveX
    oBookmark oAnchor as ActiveX
    vFecha as date default today
    vPersona as char default "Juan Ramirez" 
    vPersona2 as char default "Director departamento de ventas"
    oImagen oStart oCursor oSize as ActiveX
end
begin
    oServMan.CreateActiveXFromProgID("com.sun.star.ServiceManager");
    oServMan.GetCLSID();
    oServMan.GetClassName();
    oServMan.Invoke("createInstance" ,oDesktop,"com.sun.star.frame.Desktop");
    
    oDesktop.Invoke("LoadComponentFromURL" ,oDocumento,"file:///"+ProjectDir()+"/miplantilla.ott","_blank",0, arrayParam);



    oDocumento.Invoke("getBookmarks",  oBookmarks);

    oBookmarks.Invoke("getByName", oBookmark,"fecha");
    oBookmark.Invoke("getAnchor", oAnchor);
    oAnchor.Invoke("setString", null, vFecha);


    oBookmarks.Invoke("getByName", oBookmark,"Persona1");
    oBookmark.Invoke("getAnchor", oAnchor);
    oAnchor.Invoke("setString", null, vPersona);


    oBookmarks.Invoke("getByName", oBookmark,"Persona2");
    oBookmark.Invoke("getAnchor", oAnchor);
    oAnchor.Invoke("setString", null, vPersona2);


    
    oDocumento.Invoke("storeAsURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/carta.odt", arrayParam);    
    
    oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");


  
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "MS Word 97");
    oDocumento.Invoke("storeToURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/carta.doc", arrayParam);    
    oDocumento.Invoke("Close");    
    
    oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");    
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "writer_pdf_Export");
    oDocumento.Invoke("storeToURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/carta.pdf", arrayParam);    
    oDocumento.Invoke("Close");    
    
    oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");    
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "Text");
    oDocumento.Invoke("storeToURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/carta.txt", arrayParam);    
    oDocumento.Invoke("Close");    

    oServMan.Invoke("Bridge_GetStruct" ,arrayParam[1],"com.sun.star.beans.PropertyValue");    
    arrayParam[1].SetProperty("Name", "FilterName");
    arrayParam[1].SetProperty("Value", "Rich Text Format");
    oDocumento.Invoke("storeToURL" , NULL,"file:///"+ProjectDir().Replace("\","/")+"/carta.rtf", arrayParam);    
    oDocumento.Invoke("Close");    


 
end




On Open begin
    CargaLista(lstStrings, "strings");
    CargaLista(listSql, "sql");

end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
    pList.AlternateBackColor( Rgb(207, 247, 254) , Rgb(254, 247, 224), 2);
    pList.SetLockColumns(1);
   
 
   
    
    pList.IconFile = "listaiconosgif";



    
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 15, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 15, pList);  //Status

    
    FormatListColumnNumeric(6,10, 0, pList); //Número de la linea
    pList.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item

    FormatListColumnNumeric(9, 15 ,0, pList); //Cantidad
    FormatListColumnNumeric(10, 15,0, pList); //Descuento
    FormatListColumnNumeric(11, 20, 2, pList); //Precio     
    pList.SetColumnMask(11,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
    end // if
    
    if pType == "sql" then begin
       gNumRows =  pList.LoadSelect(InstruSelect);
    end

    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(12) ;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

On Command CmdAgruparAgregadosSql
begin
    txt_help2.Text = "Arrastre las columna por las que desea agrupar y/o ordenar y seleccione el campo agregado de las lista en la barra que aparecen en pantalla";
    FShowMultiColumnGroupDlg(listSql);
end
On Command CmdAgruparAgregadosString 

begin
    txt_help1.Text = "Arrastre las columna por las que desea agrupar y/o ordenar y seleccione el campo agregado de las lista en la barra que aparecen en pantalla";
    FShowMultiColumnGroupDlg(lstStrings);
end

On Command CmdVistaClasicaString
begin
    EliminarVistaEnArbol(lstStrings);
end

On Command CmdVistaClasicaSql
begin
    EliminarVistaEnArbol(listSql);
end

Private FShowMultiColumnGroupDlg(pList as SimpleFormControl)
begin
    pList.ShowMultiColumnGroupDlg(TRUE, 62,60 , TRUE, "Cuantos registros para  %n", NULL, "Mínimo valor %n en %p", "Suma en: %p", "Valor medio: %p");
end
Private EliminarVistaEnArbol(pList as SimpleFormControl)
begin
    pList.RemoveListGroupTreeView();
end


On Command CmdOrdenarColString
objects begin

end
begin
    txt_help1.Text = "Arrastre las columna por las que desea ordenar a la barra que aparecen en pantalla";
    Yield;
    lstStrings.ShowMultiColumnSortDlg(TRUE, TRUE);
end

On Command CmdOrdenarColSql
objects begin

end
begin
    txt_help2.Text = "Arrastre las columnas por las que desea ordenar a la barra que aparecen en pantalla";
       Yield;
    listSql.ShowMultiColumnSortDlg(TRUE, TRUE);

end

On Command CmdExportListStrings
begin
    ExportarListas(lstStrings);
end

On Command CmdExportListSql
begin
    ExportarListas(listSql);
end
main
objects
begin
    of as frm
    i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

main
objects
begin
    hprinter as integer
    hpage as integer
    cCursor as SqlCursor
    customer company surname as char
    idgrupo as integer
    linea as smallint default 0
end
begin
    hpage = loadPage(ProjectDir +"\Pags\stockbredondos.pag");
    idgrupo = controlByName(hpage, "grupo");
   
    loadPrinter(null);
    cCursor.Prepare("select customer, company, surname from customers order by customer");
    cCursor.Open();
    while cCursor.Fetch( customer, company, surname).Found() do begin
        if linea >= count(hpage, idgrupo) then begin
            sendPage(hpage, hprinter);
            linea = 0;
            clearPage(hpage);
        end

        ++linea;
        setPropInt(hpage, idgrupo, "CurrentRow", linea);
    
        setPropStr(hpage, controlByName(hpage,"idCliente"),"Text", customer);
        setPropStr(hpage, controlByName(hpage,"idCompany"),"Text", company);
        setPropStr(hpage, controlByName(hpage,"idSurname"),"Text", surname);



    end
    cCursor.Close.Free();
    showFullOpenPrinterDialog(hprinter, true);
    sendPage(hpage, hprinter);
    
    preview(hprinter, null, null);
end

On Command CmdEnviarConsultaMunicipios begin
    list_municipios.Reset();
    WebServiceCatastro();
end    
    
public function WebServiceCatastro
objects
begin
    serverUrl as Char 
    headerSent as Char
    headerReceive as Char
    SOAPAction as Char
    fileContentSend as char
    oStream as Stream
end
begin

    fileContentSend = GetEnv("DBTEMP")+ "\fileSend.txt";
    oStream.Open(fileContentSend, 2);
    oStream.Write('  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:q0="http://www.catastro.meh.es/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> ').NewLine();
    oStream.Write('  <soapenv:Body> ').NewLine();
    oStream.Write('  <q0:Provincia>'+ChProvin+'</q0:Provincia>  ').NewLine();
    oStream.Write('  <q0:Municipio></q0:Municipio>  ').NewLine();
    oStream.Write('  </soapenv:Body> ').NewLine();
    oStream.Write('  </soapenv:Envelope> ').NewLine();
    oStream.Close();
    headerReceive = NULL;
    outFile = GetEnv("DBTEMP")+"\ConsultaMunicipio.xml";
    serverUrl = "http://ovc.catastro.meh.es/ovcservweb/OVCSWLocalizacionRC/OVCCallejero.asmx?WSDL";
    SOAPAction = "http://tempuri.org/OVCServWeb/OVCCallejero/ConsultaMunicipio";
    
    Module.CallWebServiceEx(serverUrl,fileContentSend, headerSent, headerReceive, outFile, SOAPAction); 
    
    RecorreXml();

end

private function RecorreXml return integer
objects begin
    doc as integer
end
begin
    doc = TTXmlOpenDoc(outFile);
    if doc == 0 then begin
        "No se puede abrir el fichero".Trace();
        return 0;
    end
    NavigateTree(doc);
    return 1;
end
private function NavigateTree(doc as integer)
objects begin
    rootnode as integer
    node as integer
    curnode as integer
end
begin
    rootnode = TTXmlGetDocRootNode(doc);
    curnode = rootnode;
    NavigateElement(doc, curnode, 0);
end
private function NavigateElement(doc as integer, node as integer, level as integer)
objects begin
    curnode as integer
    nodeName as Char
    propValue as Char
    nodeType as integer
    nodeText as Char
end
begin

    curnode = node;
    while TRUE do
    begin
        if curnode == 0 then begin
            break;
        end else begin

            nodeType = TTXmlGetNodeType(doc, curnode);
            switch nodeType begin
                case 1: begin //elemento
                    nodeName = TTXmlGetNodeName(doc, curnode);
                    if nodeName == 'nm' then begin
                        list_municipios.AddString(TTXmlGetEncodedNodeText(doc, curnode, 10)) ;
                    end
                    if nodeName == 'err' then begin
                        RecorrerNodoErr(doc, curnode);
                    end
                end   //case elemento             
            end//Switch
        end //else 
        NavigateElement(doc, TTXmlGetFirstChildNode(doc, curnode), level + 1);    
        curnode = TTXmlGetNextNode(doc, curnode);
    end //while
    
    
end
private RecorrerNodoErr(doc as integer, curnode as integer) 
Objects begin
    nodeName as Char
    nodeType as integer
end
begin
    while TRUE do
    begin
        if curnode == 0 then begin
            break;
        end else begin

            nodeType = TTXmlGetNodeType(doc, curnode);
            switch nodeType begin
                case 1: begin //elemento
                    nodeName = TTXmlGetNodeName(doc, curnode);
                    if nodeName == 'des' then begin
                        list_municipios.AddString(TTXmlGetEncodedNodeText(doc, curnode, 10));     
                    end
                end   //case elemento             
            end//Switch
        end //else 
        RecorrerNodoErr(doc, TTXmlGetFirstChildNode(doc, curnode));    
        curnode = TTXmlGetNextNode(doc, curnode);
    end //while
end
    
On Command CmdEditarXml
begin
    OpenFileWithDefaultApp(outFile);
end
{
    Este ejemplo utiliza el nuevo método CallWebServiceEx en lugar de CallWebService
}
main
objects
begin
      of as frm
end
begin
     of.Run();
end


On Open begin
    
    list_sql.LoadSelect("select state, sname from states");
end
{
    Solo para List Box
}
On ChangeColPos list_sql
begin
    if list_sql.GetCurrentItem() != list_sql.GetColumnPosition(list_sql.GetCurrentItem()) then begin
        ("Ha movido la columna " + list_sql.GetCurrentItem()).Trace;
    end
end


main
objects
begin
      of as frm
end
begin

     of.Run();
end


On Open
objects begin
    legendbackboxcolor as integer
end
begin
    
    CreateChart();
    ChartSetXAxysLabels(ctr_chart1.Hwnd(), "27/8|28/8|29/8|30/8|31/9|1/9|2/9|3/9|4/9|5/9|6/9|");
    DoLineChart();
    legendbackboxcolor = Rgb(255,255,255);
    legendStr = legendStr1 ;
    ChartAddLegend(ctr_chart1.Hwnd(),legendStr , 1, 0, legendbackboxcolor,0);
end

Private CreateChart()
objects begin
    valor as integer
    micolor as integer
    i as integer
    xsize as integer
    ysize as integer
end
begin
    NewXYChart(ctr_chart1.Hwnd()); //Solo pinta el area

    SetBackColor(ctr_chart1.Hwnd());
    
    ChartEnableBlur(ctr_chart1.Hwnd(), false);
    ChartSetPanelBackColor(ctr_chart1.Hwnd(), -1);
    ctr_chart1.GetSize(xsize,ysize);
    ChartSwapXY(ctr_chart1.Hwnd(), FALSE); //Intercambiar ejes de coordenada XY.
    InitChartWindow(ctr_chart1.Hwnd(), xsize, ysize); //Inicializa la ventana que tiene internamente asocioda el control usercontrol.
    ChartSetTitle(ctr_chart1.Hwnd(), "Visualización de Rango de Datos", "MS Sans Seriff", Rgb(0,0,0));


    if ctr_chart1.SetUserProc("ttchartdll.dll", "WndProc") == false then
    begin
        MessageBox("Unable to initialize DLL", "Error", 16);
        return;
    end

end

public function DoLineChart()
objects begin
    i as integer
    micolorfrom as integer
    micolorto as integer
    xsize as integer
    ysize as integer
    value as decimal
    labelStr as Char
    legendStr as Char default ""    
    legendbackboxcolor as integer
    colorlabellinea as integer  
    maxValue as smallint
end
begin


    NewChartLayer(ctr_chart1.Hwnd(), 1, 2);//lineas - ok
     
    colorlabellinea = Module.Rgb(140, 70, 0);
    micolorfrom = Module.Rgb(255, 100, 0);
    micolorto = Module.Rgb(255, 100, 0);


    valueT1 = 1084;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = 1085;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);

    valueT1 = 1081;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = 1067;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = 1050;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = 1037;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = 1033;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = 1024;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = 1016;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = 1013;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = 1084;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);
    valueT1 = 1085;
    NewChartElement(ctr_chart1.Hwnd(), 1, valueT1, micolorfrom, micolorto, valueT1.Char,  colorlabellinea);


    slider1.SetPos(10);
    ChangeDataRange();
    
    ChartLayerSetLineWidth(ctr_chart1.Hwnd(),  1, 5); //Grosor de la líne
    ChartShowElementLabelAsTooltip(ctr_chart1.Hwnd(), TRUE);


end

public function SetBackColor(hwnd as integer)
objects begin
    micolorfrom as integer
    micolorto as integer
end
begin
    micolorfrom = Module.Rgb(255, 255, 255);
    micolorto = Module.Rgb(252, 252, 252);
    SetChartBackColor(hwnd, micolorfrom, micolorto);
end

On event Click control slider1(e as event)
begin
    ChangeDataRange();
end

private function ChangeDataRange()
objects begin
    pos as integer
    bottomRange as integer
end
begin
    pos = slider1.Pos();
    bottomRange = pos*100;
    ChartSetViewDataRange(ctr_chart1.Hwnd(),TRUE, TRUE, bottomRange, topRange);
    txt1.Text = "Rango de datos: Desde <" + bottomRange + "> hasta <" + topRange + ">";
end
main
objects
begin
    o as frmLineasCurvas
end
begin
    o.Run();
end

On Open begin
    CargaLista(lstStrings, "strings");
    
end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
Objects begin
    InstruSelect as char
end
begin
    pList.Reset();    
    pList.IconFile = "listaiconosgif";
    pList.FieldSeparator = "|";
    FormatListColumnChar(1, 15, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date
    FormatListColumnDate(4, 15, pList);  //Date
    FormatListColumnChar(5, 15, pList);  //Status
    FormatListColumnChar(6, 15, pList);  //Descripcion item
    FormatListColumnNumeric(7, 20, 2, pList); //Precio     
    pList.SetColumnMask(7,4);

    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " items.description,  price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer";
    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
        pList.SetListColorByLevel(1 ,Rgb(147,201,255)); //Asigna los colores de Fondo
        pList.SetListColorByLevel(2 ,Rgb(255,255,210));
        
    end // if
    
    BuildList();
    pList.EnableListColorByLevel(True); //Permite la visualizacion de los colores asignados con el método SetListColorByLevel    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , 
                    description, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|" +  description +"|"+ price.Using(12) ;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

On Command CmdAgruparAgregadosSql
begin
    FShowMultiColumnGroupDlg(listSql);
end
On Command CmdAgruparAgregadosString 

begin
    
    FShowMultiColumnGroupDlg(lstStrings);
end


Private FShowMultiColumnGroupDlg(pList as SimpleFormControl)
begin
    PutEnv("HIDECOLUMNIFNODETAIL", "FALSE");
    pList.ShowListAsMultiColumnGroup("GROUPBY:1,2;AGGREGATES:7=SUM;SHOWDETAILLINES:YES;",
                                    0 , 0 , FALSE                                    
                                    );
    idpanel.Text= "Lista agrupada por state y company. Se calcula las funciones de agragados para la columna price. Se muestra el detalle de las líneas";
    
end


On Command CmdExportListStrings
begin
   
    lstStrings.ExportToExcel(GetEnv("DBTEMP") +"\ExcelListaString.xls");
end


On event Click control rb_Detail(e as event)
begin
    BuildList();
end

On event Click control rb_Compact(e as event)
begin
    BuildList();
end

On event Click control rb_Hidecolumnwhennodetail(e as event)
begin
    BuildList();
end

private function BuildList
objects begin
    paramStr as char
    showDetailLines as char
    showCompactMode as char
end
begin

    if rb_Hidecolumnwhennodetail.Selected == 1 then begin
        PutEnv("HIDECOLUMNIFNODETAIL", "TRUE");
    end else begin
        PutEnv("HIDECOLUMNIFNODETAIL", "FALSE");
    end
    
    if rb_Compact.Selected == 1 then begin
        showCompactMode = "COMPACTMODE:YES";

    end else begin
        showCompactMode = "COMPACTMODE:NO";
    end
    
    if rb_Detail.Selected == 1 then begin
        showDetailLines = "SHOWDETAILLINES:YES";
        showCompactMode = "COMPACTMODE:NO";
        rb_Compact.Selected = 2;
        rb_Compact.Disabled = TRUE;
        rb_Hidecolumnwhennodetail.Selected = 2;
        rb_Hidecolumnwhennodetail.Disabled = TRUE;
    end else begin
        showDetailLines = "SHOWDETAILLINES:NO";
        rb_Compact.Disabled = FALSE;
        rb_Hidecolumnwhennodetail.Disabled = FALSE;
    end
    if rb_Hidecolumnwhennodetail.Selected == 1 then begin
        PutEnv("HIDECOLUMNIFNODETAIL", "TRUE");
    end else begin
        PutEnv("HIDECOLUMNIFNODETAIL", "FALSE");
    end

    paramStr = "GROUPBY:1,2;AGGREGATES:7=SUM;"+showDetailLines+";"+showCompactMode;
    
    idpanel.Text = paramStr;
    lstStrings.ShowListAsMultiColumnGroup(paramStr,0,0, FALSE);
end

main
objects
begin
    of as frm
    i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("HIDECOLUMNIFNODETAIL", "TRUE");
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

On Open
begin
    call ClonaBoton();
    call ClonaText();
    call ClonaBitmap();
    call ClonaSlider();
    call ClonaSpin();
    call ClonaBox();
    call ClonaPerc();
    call ClonaRadio();
    call ClonaCheck();
    call ClonaPanel();
    
    call CreaBoton();
    call CreaEditor();
    call CreaText();
    call CreaBitmap();
    call CreaSlider();
    call CreaSpin();
    call CreaBox();
    call CreaPerc();
    call CreaRadio();
    call CreaCheck();
    call CreaPanel();

end

private function ClonaBoton()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("btn_ctr_clonado1", ctr_btn1, NULL , 0, 1);
    
    Control("ctr_btn1").GetSize(x, y);
    Control("btn_ctr_clonado1").Size(x, y);

    ctr_btn1.GetPos(x, y);
    Control("btn_ctr_clonado1").Move(x + 110, y);
    
    Control("btn_ctr_clonado1").Label = "btn_ctr_clonado1";
    
    Control("btn_ctr_clonado1").IconFile = "listaiconosgif";
    Control("btn_ctr_clonado1").Icon = 2;
    Control("btn_ctr_clonado1").Foreground = Rgb(255, 0, 0);
    
end

private function ClonaText()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("ctr_txt_clonado1", ctr_txt1, NULL , 0, 1);

    Control("ctr_txt1").GetSize(x, y);
    Control("ctr_txt_clonado1").Size(x , y);
    
    ctr_txt1.GetPos(x, y);
    Control("ctr_txt_clonado1").Move(x + 110, y);
    Control("ctr_txt_clonado1").GetPos(x, y);
    
    Control("ctr_txt_clonado1").Text = "ctr_txt_clonado1";

end

private function ClonaBitmap()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("bitmap_ctr_clonado1", ctr_bitmap1, NULL , 0, 1);

    Control("ctr_bitmap1").GetSize(x, y);
    Control("bitmap_ctr_clonado1").Size(x , y);
    
    ctr_bitmap1.GetPos(x, y);
    Control("bitmap_ctr_clonado1").Move(x + 110, y);
    Control("bitmap_ctr_clonado1").GetPos(x, y);

end

private function ClonaSlider()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("slider_ctr_clonado1", ctr_slider1, NULL , 0, 1);

    Control("ctr_slider1").GetSize(x, y);
    Control("slider_ctr_clonado1").Size(x , y);
    
    ctr_slider1.GetPos(x, y);
    Control("slider_ctr_clonado1").Move(x + 110, y);
    Control("slider_ctr_clonado1").GetPos(x, y);

end

private function ClonaSpin()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("spin_ctr_clonado1", ctr_spin1, NULL , 0, 1);

    Control("ctr_spin1").GetSize(x, y);
    Control("spin_ctr_clonado1").Size(x + 10, y);
    
    ctr_spin1.GetPos(x, y);
    Control("spin_ctr_clonado1").Move(x + 100, y);
    Control("spin_ctr_clonado1").GetPos(x, y);

end

private function ClonaBox()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("box_ctr_clonado1", Control("ctr_box1"), NULL , 0, 1);

    Control("ctr_box1").GetSize(x, y);
    Control("box_ctr_clonado1").Size(x + 10, y);
    
    Control("ctr_box1").GetPos(x, y);
    Control("box_ctr_clonado1").Move(x + 100, y);

end

private function ClonaPerc()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("perc_ctr_clonado1", ctr_perc1, NULL , 0, 1);

    ctr_perc1.GetSize(x, y);
    Control("perc_ctr_clonado1").Size(x + 10, y);
    
    ctr_perc1.GetPos(x, y);
    Control("perc_ctr_clonado1").Move(x + 100, y);
end

private function ClonaRadio()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("radio_ctr_clonado1", ctr_radio1, NULL , 0, 1);

    ctr_radio1.GetSize(x, y);
    Control("radio_ctr_clonado1").Size(x + 10, y);
    
    ctr_radio1.GetPos(x, y);
    Control("radio_ctr_clonado1").Move(x + 100, y);

end

private function ClonaCheck()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("check_ctr_clonado1", ctr_check1, NULL , 0, 1);

    ctr_check1.GetSize(x, y);
    Control("check_ctr_clonado1").Size(x + 10, y);
    
    ctr_check1.GetPos(x, y);
    Control("check_ctr_clonado1").Move(x + 100, y);

end

private function ClonaPanel()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("panel_ctr_clonado1", ctr_panel1, NULL , 0, 1);

    ctr_panel1.GetSize(x, y);
    Control("panel_ctr_clonado1").Size(x + 10, y);
    
    ctr_panel1.GetPos(x, y);
    Control("panel_ctr_clonado1").Move(x + 100, y);

end


private function CreaBoton()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("btn_ctr_creado1", NULL , "BUTTON", 0, 1);

    Control("ctr_btn1").GetSize(x, y);
    Control("btn_ctr_creado1").Size(x + 10, y);
    
    ctr_btn1.GetPos(x, y);
    Control("btn_ctr_creado1").Move(x + 220, y);
    
    Control("btn_ctr_creado1").Label = "btn_ctr_creado1";
    
    Control("btn_ctr_creado1").IconFile = "listaiconosgif";
    Control("btn_ctr_creado1").Icon = 1;
    
end

private function CreaEditor()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("edt_ctr_creado1", NULL, "EDIT", 0, 1);

    Control("ctr_edt1").GetSize(x, y);
    Control("edt_ctr_creado1").Size(x + 10, y);
    
    ctr_edt1.GetPos(x, y);
    Control("edt_ctr_creado1").Move(x + 220, y);
    Control("edt_ctr_creado1").GetPos(x, y);
    
    Control("edt_ctr_creado1").Text = "edt_ctr_creado1";
    
end

private function CreaText()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("txt_ctr_creado1", NULL, "TEXT", 0, 1);

    Control("ctr_txt1").GetSize(x, y);
    Control("txt_ctr_creado1").Size(x + 10, y);
    
    ctr_txt1.GetPos(x, y);
    Control("txt_ctr_creado1").Move(x + 230, y);
    
    Control("txt_ctr_creado1").Text = "ctr_txt_creado1";
    
end

private function CreaBitmap()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("bitmap_ctr_creado1", NULL, "BITMAP", 0, 1);

    Control("ctr_bitmap1").GetSize(x, y);
    Control("bitmap_ctr_creado1").Size(x + 10, y);
    
    ctr_bitmap1.GetPos(x, y);
    Control("bitmap_ctr_creado1").Move(x + 220, y);
    
    Control("bitmap_ctr_creado1").Bitmap = "c:\cosmos42\etc\maillab.bmp";
    Control("bitmap_ctr_creado1").Stretch = ctr_bitmap1.Stretch;
end

private function CreaSlider()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("slider_ctr_creado1", NULL, "SLIDER", 0, 1);

    Control("ctr_slider1").GetSize(x, y);
    Control("slider_ctr_creado1").Size(x + 10, y);
    
    ctr_slider1.GetPos(x, y);
    Control("slider_ctr_creado1").Move(x + 220, y);
    
end

private function CreaSpin()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("spin_ctr_creado1", NULL, "SPIN", 4, 1);

    Control("ctr_spin1").GetSize(x, y);
    Control("spin_ctr_creado1").Size(x + 10, y);
    
    ctr_spin1.GetPos(x, y);
    Control("spin_ctr_creado1").Move(x + 200, y);
    
end

private function CreaBox()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("box_ctr_creado1", NULL, "BOX", 0, 1);

    Control("ctr_box1").GetSize(x, y);
    Control("box_ctr_creado1").Size(x + 10, y);
    
    Control("ctr_box1").GetPos(x, y);
    Control("box_ctr_creado1").Move(x + 200, y);
    Control("box_ctr_creado1").Background = Rgb(255,0,0);
end

private function CreaPerc()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("perc_ctr_creado1", NULL, "PORC", 0, 1);

    ctr_perc1.GetSize(x, y);
    Control("perc_ctr_creado1").Size(x + 10, y);

    ctr_perc1.GetPos(x, y);
    Control("perc_ctr_creado1").Move(x + 200, y);
end

private function CreaRadio()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("radio_ctr_creado1", NULL, "RADIO", 3, 1);

    ctr_radio1.GetSize(x, y);
    Control("radio_ctr_creado1").Size(x + 10, y);
    
    ctr_radio1.GetPos(x, y);
    Control("radio_ctr_creado1").Move(x + 200, y);
    Control("radio_ctr_creado1").Text =  "creado 1|creado 2|creado 3";
    
end

private function CreaCheck()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("check_ctr_creado1", NULL, "CHECK", 0, 1);

    ctr_check1.GetSize(x, y);
    Control("check_ctr_creado1").Size(x + 10, y);
    
    ctr_check1.GetPos(x, y);
    Control("check_ctr_creado1").Move(x + 200, y);
    Control("check_ctr_creado1").Label = "soy label";
end

private function CreaPanel()
objects begin
    x y as integer
end
begin
    box_1.CreateControl("panel_ctr_creado1", NULL, "PANEL", 0, 1);

    ctr_panel1.GetSize(x, y);
    Control("panel_ctr_creado1").Size(x + 10, y);
    
    ctr_panel1.GetPos(x, y);
    Control("panel_ctr_creado1").Move(x + 200, y);
    
end

On event Click (e as event)
begin
    if e.GetControl().Name() == "btn_ctr_creado1" then
        Control("edt_ctr_creado1").Text.Trace;
end

On event MouseEnter (e as event)
begin
    ctr_txt2.Text = e.GetControl().Name();
end

On event Enter (e as event)
begin
    ctr_txt2.Text = e.GetControl().Name();
end
main
objects
begin
end
begin
    f.Run();
end

main
objects
begin
    lC as SqlCursor
    node node2 node3 doc as integer
    varCharset as integer default 1
    customer zip as integer
    company surname fname address1 address2 city phone payform state as char
    total_invoice as Money(11,2)
end
begin

   PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    doc = TTXmlNewDoc(varCharset);
    
    node = TTXmlNewNode("Clientes");

    TTXmlDocSetRootElement(doc, node);
    
    TTXmlNewEncodedProp(doc, node, "prop1", "valor de prop1", varCharset);
    
    lC.Prepare("select * from customers");
    lC.Into(customer, company, surname, fname, address1, address2 ,city , zip , phone, payform, total_invoice,  state );
    lC.Open;
    
    While lC.Fetch.Found do
    begin
    
        node2 = TTXmlNewChild(doc, node, "Cliente ", null);
        
        TTXmlNewEncodedProp(doc, node2, "Empresa", company, varCharset);
        TTXmlNewEncodedProp(doc, node2, "Apellidos", surname, varCharset);
        TTXmlNewEncodedProp(doc, node2, "Nombre", fname, varCharset);

        node3 = TTXmlNewChild(doc, node2, "Direccion", NULL);
        
        TTXmlNewEncodedProp(doc, node3, "Direccion1", address1, varCharset);
        TTXmlNewEncodedProp(doc, node3, "Direccion2", address2, varCharset);
        TTXmlNewEncodedProp(doc, node3, "Ciudad", state, varCharset);
        TTXmlNewEncodedProp(doc, node3, "Poblacion", city, varCharset);
        TTXmlNewEncodedProp(doc, node3, "CodigoPostal", zip, varCharset);

        TTXmlNewEncodedProp(doc, node2, "Telefono", phone, varCharset);
        TTXmlNewEncodedProp(doc, node2, "FormaPago", payform, varCharset);
        
           
    End
    TTXmlSaveFormatFileEnc(doc, Module.ProjectDir()+"\fichero2.xml", varCharset);
    
    Module.OpenFileWithDefaultApp(Module.ProjectDir()+"\fichero2.xml");
    
    TTXmlFreeDoc(doc);
 
end

Private RecorreDocumento
    Objects begin
        doc rootNode as integer
    End
Begin
    doc = TTXmlOpenDoc(Module.ProjectDir()+"\fichero2.xml");
    rootNode = TTXmlGetDocRootNode(doc );
End

On Open begin
    btn_deshabilitar.Text = "Deshabilitar";
end

On Command CmdComando1    
begin
    "Se ejecuta el comando y no se puede escribir el caracater en el campo".Trace();
end
On event Click control btn_deshabilitar(e as event)
begin
    PutEnv("DISABLEACCELWHENEDITABLECTRFOCUSED", "TRUE");
end

On event Click control btn_habilitar(e as event)
begin
    PutEnv("DISABLEACCELWHENEDITABLECTRFOCUSED", "FALSE");
end
main
objects
begin
      of as frm
end
begin

    of.Run();
end

On Open begin
    CargaLista(lstStrings, "strings");
    CargaLista(listSql, "sql");

end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
    pList.AlternateBackColor( Rgb(207, 247, 254) , Rgb(254, 247, 224), 2);
    pList.SetLockColumns(1);
   
 
   
    
    pList.IconFile = "listaiconosgif";



    
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 5, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 15, pList);  //Status

    
    FormatListColumnNumeric(6,10, 0, pList); //Número de la linea
    pList.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item

    FormatListColumnNumeric(9, 15 ,0, pList); //Cantidad
    FormatListColumnNumeric(10, 15,0, pList); //Descuento
    FormatListColumnNumeric(11, 20, 2, pList); //Precio     
    pList.SetColumnMask(11,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
    end // if
    
    if pType == "sql" then begin
       gNumRows =  pList.LoadSelect(InstruSelect);
    end
    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(12) ;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
{
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
}    
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

On Command CmdAgruparAgregadosSql
begin
    txt_help2.Text = "Arrastre las columna por las que desea agrupar y/o ordenar y seleccione el campo agregado de las lista en la barra que aparecen en pantalla";
    FShowMultiColumnGroupDlg(listSql);
end
On Command CmdAgruparAgregadosString 

begin
    txt_help1.Text = "Arrastre las columna por las que desea agrupar y/o ordenar y seleccione el campo agregado de las lista en la barra que aparecen en pantalla";
    FShowMultiColumnGroupDlg(lstStrings);
end

On Command CmdVistaClasicaString
begin
    EliminarVistaEnArbol(lstStrings);
end

On Command CmdVistaClasicaSql
begin
    EliminarVistaEnArbol(listSql);
end

Private FShowMultiColumnGroupDlg(pList as SimpleFormControl)
begin
    pList.ShowMultiColumnGroupDlg(TRUE, 62,60 , TRUE, "Cuantos registros para  %n", NULL, "Mínimo valor %n en %p", "Suma en: %p", "Valor medio: %p");
end
Private EliminarVistaEnArbol(pList as SimpleFormControl)
begin
    pList.RemoveListGroupTreeView();
end


On Command CmdOrdenarColString
objects begin

end
begin
    txt_help1.Text = "Arrastre las columna state para ver como se amplia automáticamente el ancho de la columna";
    Yield;
    lstStrings.ShowMultiColumnSortDlg(TRUE, TRUE);
end

On Command CmdOrdenarColSql
objects begin

end
begin
    txt_help2.Text = "Arrastre las columnas state para ver como se amplia automáticamente el ancho de la columna";
       Yield;
    listSql.ShowMultiColumnSortDlg(TRUE, TRUE);

end

main
objects
begin
    o as frm
end
begin
    PutEnv("DRAWLISTELLIPSIS", "TRUE");
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    o.Run(); 
    Sql.Disconnect();
end

On Open
begin
    lst_States1.LoadSelect("select state, sname from states", 2);
    lst_States2.LoadSelect("select * from states");
    if GetEnv("DRAWLISTLINES") == "TRUE" then 
        check_list1_ve.Checked = check_list2_ve.Checked = TRUE;
    else 
        check_list1_ve.Checked = check_list2_ve.Checked = FALSE;
    lst_States2.DrawListLines(FALSE);
    check_list2_metodo.Checked = FALSE;
    lst_States1.DrawListLines(TRUE);
    check_list1_metodo.Checked = TRUE;
end
main
objects
begin
      of as CStates
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    of.Run();
    Sql.Disconnect();
end

On Open begin
    CargaLista(lstStrings, "strings");

end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
    pList.AlternateBackColor( Rgb(207, 247, 254) , Rgb(254, 247, 224), 2);
    pList.SetLockColumns(1);
   
 
   
    
    pList.IconFile = "listaiconosgif";


    if bEditarCeldasConControles then begin
        pList.SetListColumnEditType(1,4, "CA|MA|VA");        
        pList.SetListColumnEditType(3,3, null);
        pList.SetListColumnEditType(4,3, null);
        pList.SetListColumnEditType(5,2, "Y|N"); //Check        
    end else begin
        pList.SetListColumnEditType(5,1, null); //Check
        pList.SetListColumnEditType(1,1, null);        
        pList.SetListColumnEditType(3,1, null);
        pList.SetListColumnEditType(4,1, null);
    end

    
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 15, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 15, pList);  //Status
    FormatListColumnNumeric(6,10, 0, pList); //Número de la linea
    pList.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item

    FormatListColumnNumeric(9, 15 ,0, pList); //Cantidad
    FormatListColumnNumeric(10, 15,0, pList); //Descuento
    FormatListColumnNumeric(11, 20, 2, pList); //Precio     
    pList.SetColumnMask(11,12);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
    end // if
    
    if pType == "sql" then begin
        pList.LoadSelect(InstruSelect);
    end


    
    


    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(12) ;
 
            j = pList.AddString(texto ,1);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    
On Command CmdBackupListRow
begin
    if lstStrings.Selected > 0 then begin
        lstStrings.BackupListRow(lstStrings.Selected);
    end
    else "Seleccione la fila de la que desea hacer backup".Trace();    
end

On Command CmdRestoreBackupListRow
begin
    if lstStrings.Selected > 0 then begin
        lstStrings.RestoreBackupListRow(lstStrings.Selected);
    end
    else "Seleccione la fila de la que desea restaurar backup".Trace();    
end

On Command CmdGetBackupListRow
Objects begin
    lChBackup as char
end
begin
    lChBackup = lstStrings.GetBackupListRow(lstStrings.Selected);
    if lChBackup is null then "La fila seleccionada no tiene backup".Trace();
    else lChBackup.Trace;
end

On Command CmdUpdateBackupRow
Objects begin
    o as frmTexto
end
begin
    gChBackup = lstStrings.GetBackupListRow(lstStrings.Selected);
    o.Run();
    lstStrings.UpdateBackupListRow(lstStrings.Selected ,gChBackup);
   
end


On event Click control rd_control(e as event)
begin
    if rd_control.Selected == 1 then 
         bEditarCeldasConControles = FALSE;
    if rd_control.Selected == 2 then begin
         bEditarCeldasConControles = TRUE;
    end     
    CargaLista(lstStrings, "strings");                     
end
On event DblClick control lstStrings(e as event)
begin
    SendCommand("EditaLista");
end
On Command EditaLista
begin
    Yield;
    lstStrings.EditListColumn(lstStrings.Selected, lstStrings.GetCurrentItem());           
end
On Open begin
    edtFieldTexto.Text = gChBackup;
end

On Command CmdAceptar
begin
    gChBackup = edtFieldTexto.Text ;    
    Close();
end
main
objects
begin
      of as frm
      i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");

   PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

On Open
Objects begin
    ChEnumImpresoras as char
    i as smallint
    ChImpresora as char
end
begin
    ChEnumImpresoras = Module.EnumPrinters(6);
    for i = 1 to ChEnumImpresoras.NumWords("|") do begin   
        ChImpresora = ChEnumImpresoras.GetWord("|" ,i);
        dplist2.AddString(ChImpresora);
    end
end
main
objects
begin
     of as frm
end
begin
     of.Run();
end

On Open begin
    CargaLista(lstStrings, "strings");
    CargaLista(listSql, "sql");
    CargaListaArbol(lstArbol, "arbol");
    DoSetSkin(lstStrings);        
    DoSetSkin(listSql);
    DoSetSkin(lstArbol);        
end  
private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    if pList.Name() == "listSql" then begin
        skindir = ProjectDir()+"\skin\green";
    end
    else begin
        skindir = ProjectDir()+"\skin\blue";
        
    end    
    pList.ListSetSkin(skindir + "\miskin.txt");        
    
end
Private CargaListaArbol( pList as SimpleFormControl, pType as char)
    Objects begin
        curClientes curProvincias as SqlCursor
        lChDescripcion as char
        lChCliente lChStatus as char
        lChDireccion as char
        lDcTotalInvoice as decimal (12,2)
        lSmProvincia as char
        CustomersNode StatesNode as integer
        cellStyleIdx_1 as smallint
        cellStyleIdx_2 as smallint
        cellStyleIdx_3 as smallint
        cellStyleIdx_4 as smallint
        cellStyleIdx_5 as smallint
        cellStyleIdx_6 as smallint
        cellStyleIdx_7 as smallint
        cellStyleIdx_8 as smallint
        colCheck as char
        i as integer
    End
Begin
    pList.IconFile = "listaiconosgif";
    pList.SetLockColumns(1);
    cellStyleIdx_1 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline", Module.Rgb(255,255,0), Module.Rgb(0,0,255), 2);
    cellStyleIdx_2 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline;strikeout;bold", Module.Rgb(255,0,0), Module.Rgb(0,255,255), 2);
    cellStyleIdx_3 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline;bold", Module.Rgb(255,255,255), Module.Rgb(128,128,128), 2);
    cellStyleIdx_4 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;strikeout", Module.Rgb(255,0,0), Module.Rgb(128,0,255), 0,21);
    cellStyleIdx_5 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;bold", Module.Rgb(255,0,0), Module.Rgb(0,0,128), 0,21);

    cellStyleIdx_6 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;", Module.Rgb(255,255,255), Module.Rgb(255,0,0), 2);
    cellStyleIdx_7 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;", Module.Rgb(255,255,255), Module.Rgb(0,255,0), 2);
    cellStyleIdx_8 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;", Module.Rgb(255,255,255), Module.Rgb(0,0,255), 2);

    
    pList.FieldSeparator = "|";
    pList.SetColumnChars(1,60);
    pList.SetColumnChars(2, 60);
    
    pList.SetColumnType(3, 1);
    pList.SetColumnNumDec(3, 2);
    pList.SetColumnAlign(3, 2);
    pList.SetColumnMask(3,4);
    
    pList.SetComputedColumn(5, "$3$ * 12");
    pList.SetColumnType(5,1);
    pList.SetColumnNumDec(5, 2);
    pList.SetColumnAlign(5, 2);
    pList.SetColumnMask(5,4);
    curProvincias.Prepare("select state, sname from states order by 2");
    curProvincias.Into(lSmProvincia, lChDescripcion);
    curProvincias.Open();
    
    curClientes.Prepare("Select company, address1, total_invoice, order_status from customers, orders "
                "where customers.state = ? and orders.customer = customers.customer ");
    curClientes.Into(lChCliente, lChDireccion, lDcTotalInvoice, lChStatus);                
    
    While curProvincias.Fetch.Found()
    do begin
        curClientes.Open(lSmProvincia);
        curClientes.Fetch();
        
        If curClientes.Found()
        then begin
            StatesNode = pList.AddTreeString(0,lChDescripcion, true, 12, 11);
        end
        Else Begin
            StatesNode = pList.AddTreeString(0,lChDescripcion, true, 5, 5);
            Continue;
        End
        
        While curClientes.Found() do
        begin
            i = pList.AddTreeString(StatesNode,lChCliente+"|"+lChDireccion + "|" + lDcTotalInvoice.Using(4) + "|" +lChStatus, true, 14, 14);
            pList.SetListCellConditionalStyle(i, 3, cellStyleIdx_6, "$3$ < 100");
            pList.SetListCellConditionalStyle(i, 3, cellStyleIdx_7, "$3$ >= 100 && $3$ <= 200");
            pList.SetListCellConditionalStyle(i, 3, cellStyleIdx_8, "$3$ > 200");    
            curClientes.Fetch();
        end
        curClientes.Close();
    end
    curClientes.Free();    
    
    curProvincias.Close().Free();
    
    pList.SetListCellStyle(1,1,cellStyleIdx_1);
    pList.SetListCellStyle(3,1,cellStyleIdx_2);
    pList.SetListCellStyle(5,1,cellStyleIdx_3);
    pList.SetListCellStyle(9,1,cellStyleIdx_4);
    pList.SetListCellStyle(9,2,cellStyleIdx_4);
    pList.SetListCellStyle(11,2,cellStyleIdx_5);
    
    
    pList.GroupListColumns("Company", 1,2 );
    pList.AllowColumnHeaderFilter(1, TRUE);
    pList.AllowColumnHeaderFilter(2, TRUE);
    pList.SetListColumnEditType(4, 2, "Y|N");
    pList.NumericColumnsFormattedToChar(true);
End


Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
    pList.AlternateBackColor(  Rgb(254, 247, 224), Rgb(207, 207, 207) , 2);
    pList.IconFile = "listaiconosgif";
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 9, pList); //State
    FormatListColumnChar(2, 35, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 8, pList);  //Status

    
    FormatListColumnNumeric(6,10, 0, pList); //Número de la linea
    pList.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item

    FormatListColumnNumeric(9, 10 ,0, pList); //Cantidad
    FormatListColumnNumeric(10, 10,0, pList); //Descuento
    FormatListColumnNumeric(11, 30, 2, pList); //Precio     
    pList.SetColumnMask(11,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);

    end // if
    
    if pType == "sql" then begin
       gNumRows =  pList.LoadSelect(InstruSelect);
    end

    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(4) ;
 
            j = pList.AddString(texto, 0);
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

On Command CmdEstilosColStrings
begin
    CrearEstilos(lstStrings);
    lstStrings.SetListColumnConditionalStyle(1 ,cellStyleIdx_14, "!isnull($1$)" );
    lstStrings.SetListColumnStyle(2 ,cellStyleIdx_15);

end

On Command CmdEstilosCeldasStrings
begin
    EstilosCeldas(lstStrings);
end

On Command CmdEstilosColSql
begin
    CrearEstilos(listSql);
    listSql.SetListColumnStyle(1 ,cellStyleIdx_12);
    listSql.SetListColumnStyle(2 ,cellStyleIdx_13);

end

Private CrearEstilos(pList as SimpleFormControl)
Objects begin
    
    nRow nCol as integer
end
begin
    if pList.Name() == "listSql" then begin
        cellStyleIdx_12 = pList.CreateListCellStyle("Arial;Size=9;underline", Module.Rgb(255,255,255), Module.Rgb(0,0,0), 0);
        cellStyleIdx_13 = pList.CreateListCellStyle("Currier;Size=9;underline;strikeout;bold", Module.Rgb(255,0,0), Module.Rgb(255,128,128), 0);
   end     

    if pList.Name() == "lstStrings" then begin
        cellStyleIdx_14 = pList.CreateListCellStyle("Arial;Size=9;underline", Module.Rgb(255,255,255), Module.Rgb(255,128,100), 0);
        cellStyleIdx_15 = pList.CreateListCellStyle("Currier;Size=9;underline;strikeout;bold", Module.Rgb(255,0,0), Module.Rgb(255,128,128), 0);
   end     

end

On Command CmdCrearEstilosSql
begin
   CrearEstilos(listSql);
end



On Command CmdEstilosCeldasSql
begin

    EstilosCeldas(listSql);
end



Private EstilosCeldas(pList as SimpleFormControl)
Objects begin
    cellStyleIdx_16 as integer
end
begin
    cellStyleIdx_16 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline", Module.Rgb(255,255,0), Module.Rgb(0,0,255), 2);
    pList.SetListCellStyle(3,3,cellStyleIdx_16);

end


On Command CmdEstilosCondCeldasStrings

begin
    cellStyleIdx_10 = lstStrings.CreateListCellStyle("Times New Roman;Size=9", Module.Rgb(255,128,0), Module.Rgb(0,255,255), 2, 1);
    CambiarEstiloAllCell(lstStrings, cellStyleIdx_10);
end

On Command CmdEstilosCondCeldasSql
Objects begin
    cellStyleIdx_11 as integer
    nRow nCol as integer
end
begin
    cellStyleIdx_11= listSql.CreateListCellStyle("Times New Roman;Size=9", Module.Rgb(255,128,0), Module.Rgb(255,255,255), 2,1);
    for nRow = 1 to gNumRows do begin 
        listSql.SetListCellConditionalStyle(nRow,11 , cellStyleIdx_11, "$11$ > 500");
    end    
    
end


Private CambiarEstiloAllCell(pList as SimpleFormControl, pInStyle as integer)
Objects begin
   
    nRow nCol as integer
end
begin

    pList.ResetListColumnStyles(11);
    for nRow = 1 to gNumRows do begin 
        pList.SetListCellConditionalStyle(nRow,11 , pInStyle, "$11$ > 500");
    end    
    
    
end

On Command CmdExportWithStyleString
begin
    ExportarListas(True, lstStrings);
end
On Command CmdExportWithoutStyleString
begin
    ExportarListas(false, lstStrings);
end

On Command CmdExportWithStyleSql
begin
    ExportarListas(True, listSql);
end

On Command CmdExportWithoutStyleSql
begin
    ExportarListas(false, listSql);
end

On Command CmdExportWithoutStyleArbol
begin
    ExportarListas(false, lstArbol);
end

On Command CmdExportWithStyleArbol
begin
    ExportarListas(True, lstArbol);
end


Private ExportarListas(ConStilo as boolean, pList as SimpleFormControl)
Objects begin
    lChName as char
end
begin
    if ConStilo then begin
        lChName = pList.Name()+"WithStyle";
    end
    else begin
        lChName = pList.Name()+"WithoutStyle";    
    end
    pList.AllowExportListCellStyles(ConStilo);
    pList.ExportToExcel((GetEnv("DBTEMP") +"\"+lChName+"Excel.xls"));
    pList.ExportToHTML(GetEnv("DBTEMP") +"\"+lChName+"Html.htm");
    pList.ExportToODS((GetEnv("DBTEMP") +"\"+lChName+"ODS.ods"));
    pList.ExportToPDF(GetEnv("DBTEMP") +"\"+lChName+"Pdf.pdf");
end



On Command CmdExportListStrings
begin
    if rb_exportStrings.Selected == 1 then begin
        SendCommand("CmdExportWithoutStyleString");
    end
    if rb_exportStrings.Selected == 2 then begin
        SendCommand("CmdExportWithStyleString");
    end
    

end

On Command CmdExportListSql
begin
    if rb_exportSql.Selected == 1 then begin
        SendCommand("CmdExportWithoutStyleSql");
    end
    if rb_exportSql.Selected == 2 then begin
        SendCommand("CmdExportWithStyleSql");
    end
    

end

On Command CmdExportListArbol
begin
    if rb_exportArbol.Selected == 1 then begin
        SendCommand("CmdExportWithoutStyleArbol");
    end
    if rb_exportArbol.Selected == 2 then begin
        SendCommand("CmdExportWithStyleArbol");
    end
    

end

On Command CmdResetStyleStrings
Objects begin
    i as smallint
    nRow as integer
end
begin
    for nRow = 1 to gNumRows do begin
        for i = 1 to 11 do begin 
            if nRow == 1 then lstStrings.ResetListColumnStyles(i);
            lstStrings.ResetListCellStyles(nRow, i);
        end    
    end
    
end

On Command CmdResetStyleSql
Objects begin
    i as smallint
    nRow as integer
end
begin
    for nRow = 1 to gNumRows do begin
        for i = 1 to 11 do begin 
            if nRow == 1 then listSql.ResetListColumnStyles(i);
            listSql.ResetListCellStyles(nRow, i);
        end    
    end
    
end


main
objects
begin
      of as frm
      i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("DRAWTREELISTLINES", "TRUE");

   PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end




On Command CmdExportarBG
begin
    switch rb_bandgroup.Selected
    begin
        case 1:
            SendCommand("CmdExportBGDefault");
        case 2:
            SendCommand("CmdExportBGBanda");
        case 3:
            SendCommand("CmdExportBGDetalle");
        case 4:
            SendCommand("CmdExportBGALL");
        case 5:
            SendCommand("CmdExportBGALLPLAINDETAIL");
    end
end


On Command CmdExportBGDefault
begin
    PutEnv("EXPORTABLEGROUPLIST", NULL);
    oCListado.Run;        
end

On Command CmdExportBGALL
begin
    PutEnv("EXPORTABLEGROUPLIST", "ALL");
    oCListado.Run;
end

On Command CmdExportBGBanda
begin
    PutEnv("EXPORTABLEGROUPLIST", "IDGROUP:IDGROUPHEADER1");
    oCListado.Run;

end

On Command CmdExportBGDetalle
begin
    PutEnv("EXPORTABLEGROUPLIST", "IDGROUP:IDLINES");
    oCListado.Run;


end


On Command CmdExportBGALLPLAINDETAIL
begin
    PutEnv("EXPORTABLEGROUPLIST", "IDGROUP:IDGROUPHEADER1,IDLINES=PLAINDETAIL");
    oCListado.Run;

end



On Command CmdExportarGroup
begin
    switch rb_group.Selected
    begin
        case 1:
            SendCommand("CmdExportGDefault");
        case 2:
            SendCommand("CmdExportGALL");
        case 3:
            SendCommand("CmdExportGrupo");
        case 4:
            SendCommand("CmdExportGPagina1");
        case 5:
            SendCommand("CmdExportGPagina2");
        case 6:
            SendCommand("CmdExportGPaginaALL");
        case 7:
            SendCommand("CmdExportGPaginaALLPLAINDETAIL");
        case 8:
            SendCommand("CmdExportGControl");
            
    end
end

{Inicio Ejemplo Group}

On Command CmdExportGDefault
begin
    PutEnv("EXPORTABLEGROUPLIST", NULL);
    oCListadoGroup.RunReport;        
end

On Command CmdExportGALL
begin
    PutEnv("EXPORTABLEGROUPLIST", "ALL");
    oCListadoGroup.RunReport;
end
{Si se indica solo el nombre del grupo se exportará solo el detalle}
On Command CmdExportGrupo
begin
    PutEnv("EXPORTABLEGROUPLIST", "c_linescount");
    oCListadoGroup.RunReport;

end

On Command CmdExportGPagina1
begin
    PutEnv("EXPORTABLEGROUPLIST", "c_linescount:1");
    oCListadoGroup.RunReport;


end
On Command CmdExportGPagina2
begin
    PutEnv("EXPORTABLEGROUPLIST", "c_linescount:2");
    oCListadoGroup.RunReport;
end

On Command CmdExportGPaginaALL
begin
    PutEnv("EXPORTABLEGROUPLIST", "c_linescount:ALL");
    oCListadoGroup.RunReport;
end
On Command CmdExportGPaginaALLPLAINDETAIL
begin
    PutEnv("EXPORTABLEGROUPLIST", "c_linescount:2,1=PLAINDETAIL");
    oCListadoGroup.RunReport;
end



On Command CmdExportGControl
begin
    PutEnv("EXPORTABLEGROUPLIST", "c_linescount;1;EXPORTCONTROL:id_des");
    oCListadoGroup.RunReport;
end


{Fin Ejemplo Group}
Public Open(printer as PrnDocument, mCursor as SqlCursor) return  smallint
begin
    if not Preview then
        printer.OpenPrinter;

    mCursor.Prepare(GetSelect());
    if mCursor.Error < 0 then
        return mCursor.Error;

    SetGroups(mCursor);
    mCursor.Open;
    return mCursor.Error;
end

Public Close(printer as PrnDocument, mCursor as SqlCursor) return Boolean
begin
    mCursor.Close;
    if Preview then
        printer.Preview;
    else
        printer.ClosePrinter;
end

Public FitBand(groupName as char, bandName as char) return Boolean
objects begin
width as integer
height as integer
heightLeft as integer
end
begin
    heightLeft = Control(groupName).RemainingSpace;
    Control(bandName).GetSize(width,height);
    if(heightLeft >= height) then
        return TRUE;
    return FALSE;
end

Public WritePage(printer as prnDocument, VAR curLine as integer, VAR curPage as integer)
begin
    printer.SendPage(Self);  
    Clear;
    curLine = 1;
    ++curPage;
end

Public WriteBand(band as char, printer as prnDocument, VAR curLine as integer, VAR curPage as integer)
begin
    if(NOT FitBand("IDGROUP",band)) then
        WritePage(printer, curLine, curPage);

    PrintVars;
    AddBand("IDGROUP",band);
    ++curLine;
end

Public Preview() return Boolean
begin
    return TRUE;
end




Public GetSelect() return Char
begin  
    return "select suppliers.company, items.item, items.description, items.cost_price,"+
" items.stock "+
" from items, suppliers"+
" where items.supplier = suppliers.supplier"+
" order by suppliers.company";
end

Public FetchInto(mCursor as SqlCursor) return Boolean
begin
    return mCursor.Fetch(for1_item_company, item1, description1, cost_price1, stock1).Found;
end

Public SetGroups(mCursor as SqlCursor)
begin
    mCursor.GroupBy(1);
    mCursor.Totalize(5);
end

Public BeforeGroup
begin
    sv_for1_item_compa = for1_item_company;
end

Public SetGroupTotal(mCursor as SqlCursor)
begin
    st_stock = mCursor.GroupSum(1, 5);
end

Public SetTotals(mCursor as SqlCursor)
begin
    gt_stock = mCursor.GroupSum(0, 5);

end

Public PrintGroupsTotals(mCursor as SqlCursor, printer as prnDocument, VAR curLine as integer, VAR curPage as integer)
objects begin
i as smallint
level as smallint
end
begin
    level = mCursor.BreakLevel();
    if(level != 0) then
    begin
        SetGroupTotal(mCursor);
        WriteBand("IDGROUPTOTAL1", printer, curLine, curPage);
    end
end

Public PrintGroupsHeader(level as smallint, printer as prnDocument, VAR curLine as integer, VAR curPage as integer)
objects begin
i as smallint
end
begin
    if(level != 0) then
    begin
       BeforeGroup;
       WriteBand("IDGROUPHEADER1", printer, curLine, curPage);
    end
end

Public PrintTotals(mCursor as SqlCursor, printer as prnDocument, VAR curLine as integer, VAR curPage as integer)
begin
    PrintGroupsTotals(mCursor, printer, curLine, curPage);
    SetTotals(mCursor);
    WriteBand("IDTOTAL", printer, curLine, curPage);
end

Public Run()
objects begin
printer as prnDocument
mCursor as SqlCursor
curLine as integer default 1
curPage as integer default 1
end
begin
   Open(printer, mCursor);

   while FetchInto(mCursor) do
   begin
        PrintGroupsTotals(mCursor, printer, curLine, curPage);

        if(curLine == 1 and curPage == 1) then
            PrintGroupsHeader(1, printer, curLine, curPage);
        else
            PrintGroupsHeader(mCursor.BreakLevel(), printer, curLine, curPage);

        WriteBand("IDLINES", printer, curLine, curPage);          
   end

   PrintTotals(mCursor, printer, curLine, curPage); 

   if curLine > 1 then
   begin
       printer.SendPage(Self);
       Clear;
   end   
   Close(printer, mCursor);
end

Private printPages()
objects begin
    prevSupplier as integer default -1
    indline as smallint
end
begin

    indline = 1;
    while true do
    begin
        if cursorItems.Fetch
            (
                item1,
                supplier1,
                description1,
                cost_price1,
                stock1,
                company1
            ).Found == FALSE then
                break;
        if supplier1 != prevSupplier then // Change of supplier
        begin
            c_linescount.CurrentRow = indline; 
            c_line.Page = 2;
            PrintVars;
            ++indline; 
        end
        else if indline > c_linescount.Count then
        begin
            printer.SendPage(Self);
            Clear;
            indline = 1;
        end
        c_linescount.CurrentRow = indline; 
        c_line.Page = 1;
        PrintVars;
        prevSupplier = supplier1;
        ++indline;
    end
    if indline > 0 then
    begin
      printer.SendPage(Self);
      Clear;
    end
end


Public RunReport() return boolean
begin

    if cursorItems.Prepare
    (
        "select item, items.supplier, description, cost_price, stock, company"
        + " from items, suppliers"
        + " where "       
        + " items.supplier = suppliers.supplier"
        + " order by supplier"
    ).Error != 0 then
        return FALSE;
        
    if cursorItems.Open().Error != 0 then
        return FALSE;


    printer.SetDocName("Report of Suppliers/Items");
    printPages();
    printer.Preview;
       
    return TRUE; 
end

main
objects
begin
    oFrm as frm
end
begin   
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    oFrm.Run();
    Sql.Disconnect();
end

Public listado()
    Objects begin
        lc as SqlCursor
        oPrn as PrnDocument
    end
Begin

    lc.Prepare("select customer, company, surname, fname, phone from customers ");
    lc.Into(customer, company, surname, fname, phone);
    lc.Open;
    While lc.Fetch.Found do
    begin
        ++MyGroup.CurrentRow;
        MyGroup.PrintVars();
    end
    lc.Close.Free;
    oPrn.SendPage(self);
    oPrn.ExportDocumentToFile(ProjectDir() + "\LStates.ods");
    oPrn.ExportDocumentToFile(ProjectDir() + "\LStates.csv");
    oPrn.ExportDocumentToFile(ProjectDir() + "\LStates.html");
    
End

main
objects
begin
    oLstStates as LstStates
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");

    oLstStates.listado();
    
    Sql.Disconnect();
end

main
objects
begin
    
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    PutEnv("SHOWEXPORTBUTTONSELECTWINDOW", "TRUE");
    Sql.SelectWindow(null, "select * from states");
end

On Open begin
    customers.Query();
    CargaLista();
    lst2.LoadSelect("select *, date(today), time(now), current from customers where customer < 115");
end

Private CargaLista
    Objects Begin
        c as SqlCursor
        icon as integer default 0
        texto as char
    End
Begin
    lst1.FieldSeparator = "|";
    lst1.SetColumnType(1 ,1);
    c.Prepare("select *, date(today), time(now), current from customers where customer < 115");
    c.Open();
    texto = c.FetchTuple;
    While c.Found
    Do begin
        ++icon;
        lst1.AddString(texto);
        If icon%2 == 0 
        then begin
            lst1.SetRowBackground(icon ,Rgb(255, 255,200));
        End
        Else Begin
            lst1.SetRowBackground(icon ,Rgb(200, 255,255));
        End
        texto = c.FetchTuple;
    end
    c.Close.Free;
End

On Command CmdExportHtml

begin
    ChRutaFicGrid =gDirtmp+ "\customer.html";
    ChRutaFicList = gDirtmp+ "\customerList.html";
    ChRutaFicListSql = gDirtmp+ "\customerListSql.html";
    panel_msg.Text = "Inicio proceso de exportación a HTML";
    WaitCursor(true);
    DeshabilitarBotones(true);
    idgridCustomer.ExportToHTML(ChRutaFicGrid);
    lst1.ExportToHTML(ChRutaFicList);
    lst2.ExportToHTML(ChRutaFicListSql);
    panel_msg.Text = "Fin de la exportación a HTML";
    WaitCursor(false);    
    DeshabilitarBotones(false);
end
Private DeshabilitarBotones(pbdeshabilitar as boolean)
begin
    btn_exporthtml.Disabled = pbdeshabilitar;
    btn_exportods.Disabled = pbdeshabilitar;
    btn_exportpdf.Disabled = pbdeshabilitar;
end

On Command CmdExportODS
begin
    ChRutaFicGrid =gDirtmp+ "\customer.ods";
    ChRutaFicList = gDirtmp+ "\customerList.ods";
    ChRutaFicListSql = gDirtmp+ "\customerListSql.ods";
    panel_msg.Text = "Inicio proceso de exportación a ODS";
    WaitCursor(true);
    DeshabilitarBotones(true);    
    idgridCustomer.ExportToODS(ChRutaFicGrid);
    lst1.ExportToODS(ChRutaFicList);
    lst2.ExportToODS(ChRutaFicListSql);
    panel_msg.Text = "Fin de la exportación a ODS";
    WaitCursor(false);
    DeshabilitarBotones(false);    
end

On Command CmdExportPDF
begin
    ChRutaFicGrid =gDirtmp+ "\customer.pdf";
    ChRutaFicList = gDirtmp+ "\customerList.pdf";
    ChRutaFicListSql = gDirtmp+ "\customerListSql.pdf";
    panel_msg.Text = "Inicio proceso de exportación a PDF";
    DeshabilitarBotones(true);    
    WaitCursor(true);
    idgridCustomer.ExportToPDF(ChRutaFicGrid);
    lst1.ExportToPDF(ChRutaFicList);
    lst2.ExportToPDF(ChRutaFicListSql);
    panel_msg.Text = "Fin de la exportación a PDF";
    WaitCursor(false);    
    DeshabilitarBotones(false);    
end

On Command CmdEditar
begin
    if Yes("¿Desea editar los ficheros generados?") then begin
        Editar();
    end
end

Private Editar()
begin
    if ExiteFichero(ChRutaFicGrid) then begin
        Module.OpenFileWithDefaultApp(ChRutaFicGrid);    
    end
    else MostrarMensaje(ChRutaFicGrid);

    if ExiteFichero(ChRutaFicList) then begin
        Module.OpenFileWithDefaultApp(ChRutaFicList);    
    end
    else  MostrarMensaje(ChRutaFicList);

    if ExiteFichero(ChRutaFicListSql) then begin
        Module.OpenFileWithDefaultApp(ChRutaFicListSql);    
    end
    else MostrarMensaje(ChRutaFicListSql);
end

Private ExiteFichero(pFichero as char) return boolean
Objects begin
    ok as boolean
end
begin
    ok = TestFile(pFichero , 'f') ;
    return ok;
end

Private MostrarMensaje(pFichero as char) 
begin
    ("No se ha generado el fichero "+pFichero).Trace;
    
end
main
objects
begin
      of as frm
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("DBPATH", ProjectDir());
    gDirtmp = GetEnv("DBTEMP");
    Sql.Connect("stock");
    of.Run();
    Sql.Disconnect();
end

On Open begin
    CargaLista(lstStrings, "strings");
    CargaLista(listSql, "sql");

   
end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
    pList.AlternateBackColor( Rgb(207, 247, 254) , Rgb(254, 247, 224), 2);
    pList.SetLockColumns(1);
   
    pList.AllowColumnHeaderFilter(1, TRUE, 1000);
    pList.AllowColumnHeaderFilter(2, TRUE, 1000);
    pList.AllowColumnHeaderFilter(3, TRUE, 1000);
    pList.AllowColumnHeaderFilter(4, TRUE, 1000);
    pList.AllowColumnHeaderFilter(5, TRUE, 1000);
    pList.AllowColumnHeaderFilter(6, TRUE, 1000);    
    pList.AllowColumnHeaderFilter(7, TRUE, 1000);
    pList.AllowColumnHeaderFilter(8, TRUE, 1000);
    pList.AllowColumnHeaderFilter(9, TRUE, 1000);
    pList.AllowColumnHeaderFilter(10, TRUE, 1000);
    pList.AllowColumnHeaderFilter(11, TRUE, 1000);
    pList.AllowColumnHeaderFilter(12, TRUE, 1000);
    pList.IconFile = "listaiconosgif";
    
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 15, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 15, pList);  //Status

    
    FormatListColumnNumeric(6,10, 0, pList); //Número de la linea
    pList.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item

    FormatListColumnNumeric(9, 15 ,0, pList); //Cantidad
    FormatListColumnNumeric(10, 15,0, pList); //Descuento
    FormatListColumnNumeric(11, 20, 2, pList); //Precio     
    pList.SetColumnMask(11,12);

    FormatListColumnChar(12, 20, pList); //Phone

    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price, phone " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
    end // if
    
    if pType == "sql" then begin
       gNumRows =  pList.LoadSelect(InstruSelect);
    end


    
    


    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description phone as char
    price  as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price, phone ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(4) + "|" + phone;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end



{**************Barra de Filtros*******************************}

On Command  CmdFiltroStrings
begin
    lstStrings.ShowListFilterBar(TRUE, Rgb(0,0,255), Rgb(255,255,255), FALSE);
end

On Command  CmdFiltroSql
begin
    listSql.ShowListFilterBar(TRUE, Rgb(0,0,255), Rgb(255,255,255), FALSE);
end


On Command CmdCerrarFiltroStrings
begin
    lstStrings.ShowListFilterBar(FALSE, NULL, NULL);
end

On Command CmdResefilterStrings
begin
    lstStrings.ResetListFilterBar();
end



On Command CmdCerrarFiltroSql
begin
    listSql.ShowListFilterBar(FALSE, NULL, NULL);
end


On Command CmdResefilterSql
begin
    listSql.ResetListFilterBar();
end

On Command CmdGetFilterBarStrings
begin
    lstStrings.GetStrListFilterBar();
end

On Command CmdGetFilterBarSql
begin
    listSql.GetStrListFilterBar();
end

On Command CmdGetStrListFilterBarStrings
begin
    lstStrings.GetStrListFilterBar();
end

On Command CmdGetStrListFilterBarSql
begin
    listSql.GetStrListFilterBar();
end


{*******************Eventos*****************************}

On event ListCancelEditFilterBar (e as event)
begin
   
    "Ha pulsado la tecla escape. No se aplicará nigún filtro".Trace();
end
On event ListAcceptEditFilterBar (e as event) 
begin
   
    ("El texto por el que se filtrará en las filas de la lista es: "+ e.GetControl().GetStrListFilterBar()).Trace() ;
end

On event ListCancelEditColumnFilter (e as event)
begin   
   
    ("Ha pulsado la tecla escape no se aplicará el filtro por la columna: "+e.GetControl().GetCurrentItem()) .Trace();
end
On event ListAcceptEditColumnFilter (e as event)
begin
    
    ("Filtro para las columna: " + e.GetControl().GetCurrentItem()).Trace() ; 
end



On Command CmdSetvalue
begin
    lstStrings.SetStrListFilterBar("tools");
end
{**********Fin filtros************}

main
objects
begin
      of as frm
      i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");

   PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
 
    of.Run();
    Sql.Disconnect();
end

On Open begin
    CargaLista(lstStrings, "strings");
    CargaLista(listSql, "sql");

end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
    pList.AlternateBackColor( Rgb(207, 247, 254) , Rgb(254, 247, 224), 2);
    pList.SetLockColumns(1);
    pList.IconFile = "listaiconosgif";
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 5, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 15, pList);  //Status

    
    FormatListColumnNumeric(6,10, 0, pList); //Número de la linea
    pList.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item

    FormatListColumnNumeric(9, 15 ,0, pList); //Cantidad
    FormatListColumnNumeric(10, 15,0, pList); //Descuento
    FormatListColumnNumeric(11, 20, 2, pList); //Precio     
    pList.SetColumnMask(11,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
    end // if
    
    if pType == "sql" then begin
       gNumRows =  pList.LoadSelect(InstruSelect);
    end
    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(12) ;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin

    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
    
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin

    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

On Command CmdAgruparAgregadosSql
begin
    txt_help2.Text = "Arrastre las columna por las que desea agrupar y/o ordenar y seleccione el campo agregado de las lista en la barra que aparecen en pantalla";
    FShowMultiColumnGroupDlg(listSql);
end
On Command CmdAgruparAgregadosString 

begin
    txt_help1.Text = "Arrastre las columna por las que desea agrupar y/o ordenar y seleccione el campo agregado de las lista en la barra que aparecen en pantalla";
    FShowMultiColumnGroupDlg(lstStrings);
end

On Command CmdVistaClasicaString
begin
    EliminarVistaEnArbol(lstStrings);
end

On Command CmdVistaClasicaSql
begin
    EliminarVistaEnArbol(listSql);
end

Private FShowMultiColumnGroupDlg(pList as SimpleFormControl)
begin
    pList.ShowMultiColumnGroupDlg(TRUE, 62,60 , TRUE, "Cuantos registros para  %n", NULL, "Mínimo valor %n en %p", "Suma en: %p", "Valor medio: %p");
end
Private EliminarVistaEnArbol(pList as SimpleFormControl)
begin
    pList.RemoveListGroupTreeView();
end


On Command CmdOrdenarColString
objects begin

end
begin
    txt_help1.Text = "Arrastre las columna state para ver como se amplia automáticamente el ancho de la columna";
    Yield;
    lstStrings.ShowMultiColumnSortDlg(TRUE, TRUE);
end

On Command CmdOrdenarColSql
objects begin

end
begin
    txt_help2.Text = "Arrastre las columnas state para ver como se amplia automáticamente el ancho de la columna";
       Yield;
    listSql.ShowMultiColumnSortDlg(TRUE, TRUE);

end

main
objects
begin
    of as frm
    i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("FITCOLUMNHEADERWIDTH", "TRUE");
    
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end


On Command CmdEnviar
Objects begin
    ok as integer
end
begin
    panel_msg.Text = "Enviando Fichero.....";    
    ok=  Module.FtpPutFile(self.NombreServidor ,self.nport , self.Usuario, Self.Contraseña, self.DirRemoto, self.FicheroRemoto, self.FicheroLocal, TRUE, TRUE);
   
    switch ok
    begin
        case 0:begin
            panel_msg.Foreground = Rgb(0,0,255);        
            panel_msg.Text= "Proceso finalizado con exito";
        end    
        case -1:begin
            panel_msg.Foreground = Rgb(255,0,0);
            panel_msg.Text= "No existe fichero origen o no se puede acceder.";
        end    
        case -2:begin
            panel_msg.Foreground = Rgb(255,0,0);
            panel_msg.Text= "No se puede conectar a la red.";
        end    
        case -3:begin
            panel_msg.Foreground = Rgb(255,0,0);
            panel_msg.Text= "No se encuentra servidor/Nº de Puerto incorrecto";
        end    
        case -4:begin
            panel_msg.Foreground = Rgb(255,0,0);
            panel_msg.Text= "No se puede acceder al directorio destino.";
        end    
        case -5:begin
            panel_msg.Foreground = Rgb(255,0,0);
            panel_msg.Text= "Error en el envío del Fichero";
        end
        case -6:begin
            panel_msg.Foreground = Rgb(255,0,0);
            panel_msg.Text= "Abortado por el usuario.";
        end    
        case -7:begin
            panel_msg.Foreground = Rgb(255,0,0);
            panel_msg.Text= "Timeout.";
        end    
        case -8:begin
            panel_msg.Foreground = Rgb(255,0,0);
            panel_msg.Text= "Usuario/contraseña incorrectas.";
        end    
        case -9:begin
            panel_msg.Foreground = Rgb(255,0,0);
            panel_msg.Text= "Parámetros host, remotehostfile y localfile no pueden ser nulos.";
        end    
        default :
            panel_msg.Text = ok.Char;    
   end

end
main
objects
begin
      of as frm
end
begin
     of.Run();
end

main
objects
begin
     miStmt as SqlStatement
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    miStmt.Prepare("insert into payforms values (?,?)");
    MessageBox("Antes de Ejecutar el método execute de la clase SqlStatement: "+ miStmt.GetLastStatement(), "GetLastStatement");
    miStmt.Execute("L5", "30/60/90/120/150");
    MessageBox("Después de ejecutar el método execute de la clase SqlStatement: "+ miStmt.GetLastStatement(), "GetLastStatement");
    Sql.SqlExec("delete from payforms where payform = 'L5'");
    Sql.Disconnect();
end



main
objects
begin

end
begin
    Module.GetSysEnvVar("PATH").Trace();
end

On Open
Begin
    self.SetLookup("vChState" , //Variable para construir la where
                   "vChSname" , //Variable para recoger valores
                  "states" , //Tabla referenciada
                  "state" , // columna referenciada
                  "sname"); // columna a recoger

End

On Command CmdAceptar
    objects begin
        oLstStates as LstStates
    end
begin
    If vChState is not null
    then
        oLstStates.listado(" where state = '"+vChState+"'");
    Else
        oLstStates.listado("");
end

On event Click control lblState(e as event)
begin
    Sql.SelectWindow(self,"select state, sname from states" ,2 ,
                    "Selección de estados" ,1 ,vChState);
end


On Command CmdHideExportExcelButton
begin
    oPrn.HideExportExcelButton(TRUE);
end
Public listado(pChWhere as char)
    Objects begin
        lc as SqlCursor
    end
Begin

    lc.Prepare("select customer, company, surname, fname, phone from customers "+pChWhere);
    lc.Into(customer, company, surname, fname, phone);
    lc.Open;
    While lc.Fetch.Found do
    begin
        ++MyGroup.CurrentRow;
        MyGroup.PrintVars();
    end
    if MyGroup.CurrentRow != 1 and  MyGroup.CurrentRow is not null then begin
        oPrn.SendPage(self);
        oPrn.PreviewEx(null ,true,true,true,100);
    end
    else "No hay datos para imprimir. Eliga otro estado".Trace;
    lc.Close.Free;
End
main
objects
begin
    oFrmCondition as FrmCondition
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    oFrmCondition.Run;
end

On Open 
Begin
    IDMASTER.SetGridColumnIcoFile ("listaiconosgif");
    IDMASTER.SetGridColumnIco(3 ,8);
End

main
objects
begin
    oFrmItems as FrmItems
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    oFrmItems.Run;
end

main
objects
begin
    o as StrDefaults
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("Stock");
    
    Sql.SqlExec("CREATE TABLE tempdefaults ("+
        "fecha                            DATE         DEFAULT Today,"
        "hora                             TIME         DEFAULT now,"
        "entero                           INTEGER      DEFAULT 1,"+
        "decimales                        DECIMAL(12,2) DEFAULT 2,"
        "enterocorto                      SMALLINT     DEFAULT 3,"+
        "fechahora                        DATETIME     DEFAULT current,"
        "caracter                         CHAR(25)     DEFAULT 'HOLA',"
        "moneda                           MONEY(12,2)  DEFAULT 4         )");
    
    o.InitializeWithDefault(Sql ,"tempdefaults");
    
    
    o.fecha.Trace();
    o.hora.Trace();
    o.entero.Trace();
    o.decimales.Trace();
    o.enterocorto.Trace();
    o.fechahora.Trace();
    o.moneda.Trace();
    o.caracter.Trace();
    
    Sql.SqlExec("drop table tempdefaults");
end

On Open begin
    CargaLista();
end

Private CargaLista
    Objects Begin
        c as SqlCursor
        icon as integer default 0
        texto as char
        i as integer default 0
        j as integer
    End
Begin
    lst1.FieldSeparator = "|";
    lst1.SetColumnType(1 ,1);
    lst1.SetColumnAlign(1,2);
    lst1.SetColumnChars(1,4);

    FormatListColumnChar(2, 40);

    FormatListColumnChar(2, 40);    
    FormatListColumnChar(3, 10);    
    FormatListColumnChar(4, 10);        
    FormatListColumnChar(5, 40);            

    lst1.SetColumnVisible(6,FALSE);
    
    FormatListColumnChar(7, 16);            

    lst1.SetColumnType(8 ,1);
    lst1.SetColumnAlign(8,2);
    lst1.SetColumnChars(8,7);

    FormatListColumnChar(9,15);  
    
    lst1.SetColumnVisible(10,FALSE);
    lst1.SetColumnVisible(11,FALSE);
    c.Prepare("select * from customers where customer < 23");
    c.Open;
    texto = c.FetchTuple;
    While c.Found
    Do begin
        j = lst1.AddString(texto);
        texto = c.FetchTuple;        
        ++i;
    end
    c.Close.Free;
End

Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint)
objects begin
end
Begin
    lst1.SetColumnType(pNumColumn,0);
    lst1.SetColumnAlign(pNumColumn,0);
    lst1.SetColumnChars(pNumColumn,pLengthChar);
end


Private CargaListaSql
Begin
    lst1.LoadSelect("select * from customers ");
End


On event DblClick control lst1(e as event)
begin

    SendCommand("EditaLista");
end

On Command EditaLista
begin
    ctr_labelrow.Text = "fila " + lst1.Selected;
    ctr_labelcol.Text = "columna " + lst1.GetCurrentItem();
    Yield;
    lst1.EditListColumn(lst1.Selected, lst1.GetCurrentItem());
end

On event ListAcceptEdit control lst1(e as event)
begin
    lst1.SetRowForeground(lst1.Selected, Rgb(255, 0, 0));
    lst1.GetListColumnText(lst1.Selected,lst1.GetCurrentItem()).Trace;
end

On event ListCancelEdit control lst1(e as event)
begin
    "Edición Cancelada".Trace();
end
main
objects
begin
      of as frm
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    of.Run();
    Sql.Disconnect();
end

On Open
Begin
    vSmRowsNumber = lst_1.LoadSelect("select states.sname, customers.company from customers, states "
                     "where customers.state = states.state ");
    lst_1.SetOrderBy("1");

End


On event RClick control lst_1(e as event)
begin   
    MyMenu.Track(self,NULL ,NULL);
end

On event Click control lblCustomerName(e as event)
begin
    lst_1.AddColumnFilter(2,"matches","*"+lblCustomerName.Text+"*",TRUE);
end

On Command FilterByColumn
begin
   lst_1.AddColumnFilter(1,"=",lst_1.GetListColumnText(lst_1.Selected ,1),TRUE);
    vSmRowsNumber = lst_1.Count();   
end

On Command ResetFilters
begin
    lst_1.ResetFilters();
    vSmRowsNumber = lst_1.Count();
end


On event RClickHeader control lst_1(e as event)
begin
    MyMenu2.Track(self);
end

On Command GetColName
Begin
    MessageBox(lst_1.GetColumnName(lst_1.GetCurrentItem()),"AVISO" ,32);
End

on Command GetColLabel
Begin
    MessageBox(lst_1.GetColumnLabel(lst_1.GetCurrentItem()),"AVISO" ,32);
End
main
objects
begin
    o as frm
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    o.Run;
end

On Open 
Begin

    items.LookupColumn("state", // Pseudo column name 
                "statecode" , // Name of the join
                "suppliers" , // Table referenced 
                "supplier" , // FromColumn 
                "supplier" , // To Column
                "state"); // Lookup column

    items.LookupColumn("statename",  // Pseudo column name 
                "statename" , // Name of the join
                "states" , // Table referenced 
                "state" , // FromColumn 
                "state" , // To Column
                "sname"); // Lookup column

    items.Query();
End

main
objects
begin
    oFrmItems as FrmItems
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    oFrmItems.Run;
end

On Open
Begin
    self.SetOption("DEACTIVATEDPKCOLOR" ,Rgb(0,0,0)) ;
    self.SetOption("DEACTIVATEDTEXTCOLOR" ,Rgb(0,0,255)) ;
    SetEditMode;
End
main
objects
begin
    oFrmCustomersForm as CustomersForm
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    oFrmCustomersForm.Run;
end

Public Listado() 
Objects begin
    lC as SqlCursor
   
    oPrn as PrnDocument
end
begin
    if bOpenPrinterEx then begin
        oPrn.OpenPrinterEx(true);    
    end 
    else begin
        oPrn.OpenPrinter(true);    
    end
    lC.Prepare("select * from customers where customer < 27 order by customer");
    lC.Open;
    While lC.Fetch(customer, company,  fname, surname, address1).Found do 
    begin    
        
        cLines.PrintVars();
        ++cLines.CurrentRow;
    End
    lC.Close.Free;
    

    oPrn.WritePage(self);
    oPrn.Flush();
    oPrn.ClosePrinter();

end        

On Command CmdAceptar
objects
begin
     oPage as cPage
end
begin
    if rb_preview.Selected == 1 then begin
        bOpenPrinterEx = FALSE;
    end
    if rb_preview.Selected == 2 then begin
        bOpenPrinterEx = TRUE;
    end
    oPage.Listado();
end
main
objects
begin
     oPage as cPage
     ofrm as frm
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    ofrm.Run();
    Sql.Disconnect();
end

On Open begin
    CargaLista(lstStrings, "strings");
    CargaLista(listSql, "sql");

end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
    pList.AlternateBackColor( Rgb(207, 247, 254) , Rgb(254, 247, 224), 2);
    pList.SetLockColumns(1);
   
 
   
    
    pList.IconFile = "listaiconosgif";



    
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 8, pList); //State
    FormatListColumnChar(2, 35, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 8, pList);  //Status

    
    FormatListColumnNumeric(6,10, 0, pList); //Número de la linea
    pList.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item

    FormatListColumnNumeric(9, 10 ,0, pList); //Cantidad
    FormatListColumnNumeric(10, 10,0, pList); //Descuento
    FormatListColumnNumeric(11, 15, 2, pList); //Precio     
    pList.SetColumnMask(11,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
       FormatListColumnNumeric(12, 30, 2, pList); //Campo calculado
       pList.SetColumnMask(12,4);
       pList.NumericColumnsFormattedToChar(true);

    end // if
    
    if pType == "sql" then begin
       gNumRows =  pList.LoadSelect(InstruSelect);
    end


    
    


    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(4) ;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

On Command CmdTotalizeColumnStrings
Objects begin
    cellStyleIdx_4 as integer    
end
begin
    lstStrings.TotalizeColumn(11 ,1 ,null ," ");
{    lstStrings.TotalizeColumn(11 ,2 ,null ,"MÍNIMO ");
    lstStrings.TotalizeColumn(11 ,3 ,null ,"MAXIMO ");
    lstStrings.TotalizeColumn(11 ,4 ,null ,"MEDIA ");
    lstStrings.TotalizeColumn(11 ,5 ,null ,"Nº REGISTROS ");
}    
    lstStrings.ComputeListColumnTotals();
end


On Command CmdTotalizeColumnSql
begin
    listSql.TotalizeColumn(11 ,1 ,null ,"SUMA ");
    listSql.TotalizeColumn(11 ,2 ,null ,"MÍNIMO ");
    listSql.TotalizeColumn(11 ,3 ,null ,"MAXIMO: ");
    listSql.TotalizeColumn(11 ,4 ,null ,"MEDIA: ");
    listSql.TotalizeColumn(11 ,5 ,null ,"Nº REGISTROS: ");
    listSql.ComputeListColumnTotals();
end

On Command CmdSetComputedColumn
begin

    lstStrings.SetComputedColumn(12, "$11$ * (1 - $10$/100) * $9$");
    lstStrings.TotalizeColumn(12 ,1 ,null ,"TOTAL ");

    CargaLista(lstStrings, "strings");    
    lstStrings.ComputeListColumnTotals();        
    
end

On Command CmdExportListStrings
begin
    ExportarListas(lstStrings);
end

On Command CmdExportListSql
begin
    ExportarListas(listSql);
end

On Command CmdRemoveColumnTotals
begin
    lstStrings.RemoveColumnTotals(11);
    lstStrings.RemoveColumnTotals(12);
end

On Command CmdRemoveColumnTotalsSql
begin
    listSql.RemoveColumnTotals(11);
end
main
objects
begin
      of as frm
      i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");

   PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end


On command AddLine
begin
    MasterTable.ChildTable.EditNew;
end

On command DeleteLine
begin
    MasterTable.ChildTable.Delete;
end

On command UpdateLine
begin
    MasterTable.ChildTable.EditUpdate;
end

On ChangingRow table orders
begin
    orderlines.GetColumnSum("(quantity * price) - ((quantity * price)*(discount/100))", vDcTotal);
end

On Command CmdList
    Objects Begin
        oFrmOrderList as FrmOrderList
    End
begin
    oFrmOrderList.SetQueryCondition(orders.GetWhere);
    oFrmOrderList.Run;
    
end


On Open 
Begin
    LoadOrderList;
    LoadLinesList;
End

Public SetQueryCondition(pChCondition as char default "")
Begin
    If pChCondition is null or pChCondition.Trim == ""
    then begin
        vChCondition = "";
    End
    Else Begin
        vChCondition = (" where "+pChCondition);
    End
End

Private LoadOrderList
Begin
    LstOrder.LoadSelect("select * from orders "+vChCondition);
    LstOrder.Selected = 1;
End


Private LoadLinesList
    Objects begin
        lDcCantidad lDcPrecio lDcDescuento as Decimal
    end
Begin
    LstLines.LoadSelect("select line_nbr, item, supplier, quantity, discount, price, (quantity * price) - ((quantity * price)*(discount / 100)) Total "
                        "from orderlines where order_nbr = "+
                        LstOrder.GetListColumnText(LstOrder.Selected ,1) );
    LstLines.SetColumnType(7 , 1);
    LstLines.SetColumnNumDec(7 ,2);
    LstLines.SetColumnMask(7 , 12);

    LstLines.GetColumnSum(4 ,lDcCantidad );
    LstLines.GetColumnSum(5 ,lDcDescuento );    
    LstLines.GetColumnSum(6 ,lDcPrecio );
   
    vDcTotalOrder = (lDcCantidad * lDcPrecio) - ((lDcCantidad * lDcPrecio)*(lDcDescuento / 100));
End

On event SelChange control LstOrder(e as event)
begin
    LoadLinesList;
end
main
objects
begin
    oFrmOrders as FrmOrderLines
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("Stock");
    oFrmOrders.Run;
end

On Open
Begin
    self.SetLookup("vChState" , //Variable para construir la where
                   "vChSname" , //Variable para recoger valores
                  "states" , //Tabla referenciada
                  "state" , // columna referenciada
                  "sname"); // columna a recoger

End

On Command CmdAceptar
    objects begin
        oLstStates as LstStates
    end
begin
    If vChState is not null
    then
        oLstStates.listado(" where state = '"+vChState+"'");
    Else
        oLstStates.listado("");
end

On event Click control lblState(e as event)
begin
    Sql.SelectWindow(self,"select state, sname from states" ,2 ,
                    "Selección de estados" ,1 ,vChState);
end

Public listado(pChWhere as char)
    Objects begin
        lc as SqlCursor
        oPrn as PrnDocument
    end
Begin

    lc.Prepare("select customer, company, surname, fname, phone from customers "+pChWhere);
    lc.Into(customer, company, surname, fname, phone);
    lc.Open;
    While lc.Fetch.Found do
    begin
        ++MyGroup.CurrentRow;
        MyGroup.PrintVars();
    end
    oPrn.SendPage(self);
    oPrn.PreviewEx(null ,true,true,true,100);
    lc.Close.Free;
End
main
objects
begin
    oFrmCondition as FrmCondition
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    oFrmCondition.Run;
end

On Open
Begin
    DrawXYChart();
    DrawPieChart();
    
End

Private DrawXYChart
    Objects Begin
        layer xsize ysize as integer
        lc as SqlCursor
        cuenta as Decimal(12,2)
        provincia as char        
        leyenda as char
    End
Begin
    usr1.GetSize(xsize ,ysize);
    NewXYChart(usr1.Hwnd());
    InitChartWindow(usr1.Hwnd(), xsize ,ysize);
    usr1.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc");
    NewChartLayer(usr1.Hwnd(), layer, 1.Integer);
    ChartLayerSet3D(usr1.Hwnd(), layer, true);
    ChartSetTitle (usr1.Hwnd, "Clientes por provincia", "MS Sans Serif, 8", Rgb(0,0,255));
    ChartSetPanelBackColor(usr1.Hwnd(), Rgb(255,255,255));
    SetChartBackColor(usr1.Hwnd(), Rgb(192,192,192), Rgb(255, 255,255) );
    
    lc.Prepare("select count(*), descripcion from provincias, clientes "
                "where provincias.provincia = clientes.provincia "+
                " group by 2 having count(*)>1 order by 2" );
    lc.Into(cuenta, provincia);
    lc.Open;
    
    While lc.Fetch.Found do 
    begin    
        NewChartElement (usr1.Hwnd(), layer, cuenta, Rgb(1,30,78), Rgb(174,215,255), provincia, Rgb(255,0,0));
        leyenda += (provincia+ " ("+cuenta.Using(1)+")"+"|"+Rgb(1,30,78)+"|"); 
    End
    ChartAddLegend(usr1.Hwnd, leyenda, 1, 0, Rgb(192,192,192), 0);
    lc.Close.Free;
End

Private DrawPieChart
    Objects Begin
        layer xsize ysize as integer
        lc as SqlCursor
        cuenta as Decimal(12,2)
        provincia as char      
        leyenda as char  
        lInColor as integer
        lInLeyend as integer default 0
    End
Begin
    
    usr2.GetSize(xsize ,ysize);
    NewPieChart(usr2.Hwnd());
    InitChartWindow(usr2.Hwnd(), xsize ,ysize);
    usr2.SetUserProc(CosmosDir+"\bin\ttchartdll.dll", "WndProc");
    
    NewChartLayer(usr2.Hwnd(), layer, 5.Integer);
    ChartLayerSet3D(usr2.Hwnd(), layer, true);
    
    ChartSetTitle (usr2.Hwnd, "Ventas por provincia", "MS Sans Serif, 8", Rgb(0,0,255));
    ChartSetPanelBackColor(usr2.Hwnd(), Rgb(255,255,255));
    SetChartBackColor(usr2.Hwnd(), Rgb(192,192,192), Rgb(255, 255,255) );
        
    lc.Prepare("select provincias.descripcion, sum(precio*cantidad-descuento) "
                "from lineas, albaranes, clientes, provincias "
                "where lineas.albaran = albaranes.albaran "+
                "and albaranes.cliente = clientes.cliente "
                "and clientes.provincia = provincias.provincia "+
                "group by 1 "
                "order by 1" );
    lc.Into(provincia, cuenta);
    lc.Open;
    
    While lc.Fetch.Found do 
    begin    
        lInColor = Rgb(Random(0,255),Random(0,255),Random(0,255));
        
        NewChartElement (usr2.Hwnd(), layer, cuenta, 
                        lInColor,  lInColor, ++lInLeyend, Rgb(0,0,0));
                        
       leyenda += (""+lInLeyend+". "+provincia+ " ("+cuenta.Using(4)+")"+"|"+lInColor+"|");
       
    End
    ChartAddLegend(usr2.Hwnd, leyenda, 0, 0, Rgb(192,192,192), 0);
    lc.Close.Free;
End

On Command Imprimir
    Objects begin
        l as Pg
    end
Begin
    usr1.ExportImage(ProjectDir+"\imagen.jpg","JPG");
    usr2.ExportImage(ProjectDir+"\imagen2.jpg","JPG");
    l.Listado();
End

Public Listado
    Objects Begin
        layer xsize ysize as integer
        lc as SqlCursor
        oPrn as PrnDocument
    End
Begin
    
    oPrn.SetOrientation(2);
    lc.Prepare("select count(*), descripcion from provincias, clientes "
                "where provincias.provincia = clientes.provincia "+
                "group by 2 having count(*)>1  order by 2" );
    lc.Into(cuenta, provincia);
    lc.Open;
    While lc.Fetch.Found do 
    begin    
        
        grp.PrintVars();
        ++grp.CurrentRow;
    End
    lc.Close.Free;    
    
    lc.Prepare("select provincias.descripcion, sum(precio*cantidad-descuento) "
                "from lineas, albaranes, clientes, provincias "
                "where lineas.albaran = albaranes.albaran "+
                "and albaranes.cliente = clientes.cliente "
                "and clientes.provincia = provincias.provincia "+
                "group by 1 "
                "order by 1" );
    lc.Into(provincia2, cuenta2);
    lc.Open;
    While lc.Fetch.Found do 
    begin    
        grp2.PrintVars();
        ++grp2.CurrentRow;
    End
    lc.Close.Free;
    
    bmp.Bitmap = ProjectDir+"\imagen.jpg";
    bmp2.Bitmap = ProjectDir+"\imagen2.jpg";
    

    
    oPrn.SendPage(self);
    oPrn.Preview(null, true);
End
main
objects
begin
    o as Frm
end
begin
    PutEnv("DBPATH", CosmosDir+"\projects\almafac");
    Sql.Connect("almafac");
    o.Run;
end

On Open 
begin
    id_chk.SetProperty("ReadOnly", TRUE);
    id_rb.SetProperty("ReadOnly", TRUE);
end

On Command CmdReadOnly
objects begin   
    bReadOnlyChk bReadOnlyRb as boolean
end
begin
    id_chk.GetProperty("ReadOnly", bReadOnlyChk);
    id_chk.GetProperty("ReadOnly", bReadOnlyRb);
    if bReadOnlyChk and bReadOnlyRb then begin
        id_chk.SetProperty("ReadOnly", FALSE);
        id_rb.SetProperty("ReadOnly", FALSE);
    end
    else begin
        id_chk.SetProperty("ReadOnly", TRUE);
        id_rb.SetProperty("ReadOnly", TRUE);
    end
    
end
main
objects
begin
      of as frm
end
begin
     of.Run();
end

Public listado
    Objects begin
        a as PrnDocument
        i as integer default 10000
    end
Begin
    PutEnv("PAGEOVERFLOWMESSAGE", "Ha sobrepasado el límite de páginas a mostrar");
    
    a.SetBufferPages(4000);
    
    for i = 1 to 4000
    do begin
        t.Text = ("PAGINA "+i);
        a.SendPage(self);
    end

    a.Preview(null, true);
End
main
objects
begin
    o as Pg
end
begin
    o.listado();
    o.listado();
end

On Open begin
    ef_1.SetErrorString("Debe rellenar el campo");
    dl_1.SetErrorString("Debe rellenar el campo");
    de_1.SetErrorString("Debe rellenar el campo");
    p1.Text="Situe el cursor del ratón encima del campo";
end
On Command CmdLimpiarMsgError
begin
    ef_1.SetErrorString(null);
    dl_1.SetErrorString(null);
    de_1.SetErrorString(null);
    p1.Text="";

end

On Command CmdValidar
Objects begin
    SmValor as Smallint    
end
begin
    SmValor = ef_1.Text;
    if ef_1.Text == "" then begin
        ef_1.SetErrorString("Debe rellenar el campo");
        p1.Text="Situe el cursor del ratón encima del campo";
    end 
    else begin
        ef_1.SetErrorString(null);
        if SmValor > 10 then begin
            ef_1.SetErrorString("Valor incorrecto. Debe indicar una valor del 1 al 10");
            p1.Text="Situe el cursor del ratón encima del campo";
        end    
        
    end
    if  dl_1.Text == "" then begin
        dl_1.SetErrorString("Debe rellenar el campo");
        p1.Text="Situe el cursor del ratón encima del campo";
    end
    else dl_1.SetErrorString(null);
    if de_1.Text == "" then begin
        de_1.SetErrorString("Debe rellenar el campo");
        p1.Text="Situe el cursor del ratón encima del campo";        
    end
    else de_1.SetErrorString(null);
end
main
objects
begin
      of as frm
end
begin
     of.Run();
end

On Open begin
    Query();
end
On Command CmdOcultar
begin
    GridMaster.SetGridColumnInvisibleData(1, TRUE);
end

On Command CmdVisualizar
begin
    GridMaster.SetGridColumnInvisibleData(1, False);
end
main
objects
begin
     of as frm
end
begin
     of.Run();
end


On Command CmdExportarBG
begin
    oCListado.Run(rb_bandgroup.Selected);  //Totales de grupo
end




On Command CmdExportarGroup
begin
    oCListadoGroup.RunReport(rb_group.Selected);
end
Public Open(printer as PrnDocument, mCursor as SqlCursor) return  smallint
begin
    if not Preview then
        printer.OpenPrinter;

    mCursor.Prepare(GetSelect());
    if mCursor.Error < 0 then
        return mCursor.Error;

    SetGroups(mCursor);
    mCursor.Open;
    return mCursor.Error;
end

Public Close(printer as PrnDocument, mCursor as SqlCursor) return Boolean
begin
    mCursor.Close;
    if Preview then
        printer.Preview;
    else
        printer.ClosePrinter;
end

Public FitBand(groupName as char, bandName as char) return Boolean
objects begin
width as integer
height as integer
heightLeft as integer
end
begin
    heightLeft = Control(groupName).RemainingSpace;
    Control(bandName).GetSize(width,height);
    if(heightLeft >= height) then
        return TRUE;
    return FALSE;
end

Public WritePage(printer as prnDocument, VAR curLine as integer, VAR curPage as integer)
begin
    printer.SendPage(Self);  
    Clear;
    curLine = 1;
    ++curPage;
end

Public WriteBand(band as char, printer as prnDocument, VAR curLine as integer, VAR curPage as integer)
begin
    if(NOT FitBand("IDGROUP",band)) then
        WritePage(printer, curLine, curPage);

    PrintVars;
    AddBand("IDGROUP",band);
    ++curLine;
end

Public Preview() return Boolean
begin
    return TRUE;
end




Public GetSelect() return Char
begin  
    return "select suppliers.company, items.item, items.description, items.cost_price,"+
" items.stock "+
" from items, suppliers"+
" where items.supplier = suppliers.supplier"+
" order by suppliers.company";
end

Public FetchInto(mCursor as SqlCursor) return Boolean
begin
    return mCursor.Fetch(for1_item_company, item1, description1, cost_price1, stock1).Found;
end

Public SetGroups(mCursor as SqlCursor)
begin
    mCursor.GroupBy(1);
    mCursor.Totalize(5);
end

Public BeforeGroup
begin
    sv_for1_item_compa = for1_item_company;
end

Public SetGroupTotal(mCursor as SqlCursor)
begin
    st_stock = mCursor.GroupSum(1, 5);
end

Public SetTotals(mCursor as SqlCursor)
begin
    gt_stock = mCursor.GroupSum(0, 5);

end

Public PrintGroupsTotals(mCursor as SqlCursor, printer as prnDocument, VAR curLine as integer, VAR curPage as integer)
objects begin
i as smallint
level as smallint
end
begin
    level = mCursor.BreakLevel();
    if(level != 0) then
    begin
        SetGroupTotal(mCursor);
        WriteBand("IDGROUPTOTAL1", printer, curLine, curPage);
    end
end

Public PrintGroupsHeader(level as smallint, printer as prnDocument, VAR curLine as integer, VAR curPage as integer)
objects begin
i as smallint
end
begin
    if(level != 0) then
    begin
       BeforeGroup;
       WriteBand("IDGROUPHEADER1", printer, curLine, curPage);
    end
end

Public PrintTotals(mCursor as SqlCursor, printer as prnDocument, VAR curLine as integer, VAR curPage as integer)
begin
    PrintGroupsTotals(mCursor, printer, curLine, curPage);
    SetTotals(mCursor);
    WriteBand("IDTOTAL", printer, curLine, curPage);
end

Public Run(pType as smallint)
objects begin
printer as prnDocument
mCursor as SqlCursor
curLine as integer default 1
curPage as integer default 1
end
begin

    switch pType
    begin
        case 1:
            printer.SetGroupExportDataReport(null); //Solo detalle
        case 2:
            printer.SetGroupExportDataReport("ALL");//Todos los controles y paginas
        case 3:
            printer.SetGroupExportDataReport("IDGROUP:IDGROUPHEADER1");//Cabecera de Grupo
        case 4:
            printer.SetGroupExportDataReport("IDGROUP:IDGROUPTOTAL1");//solo totales
        case 5:
            printer.SetGroupExportDataReport("IDGROUP:IDGROUPHEADER1,IDLINES=PLAINDETAIL");//solo totales
    end


    
   Open(printer, mCursor);

   while FetchInto(mCursor) do
   begin
        PrintGroupsTotals(mCursor, printer, curLine, curPage);

        if(curLine == 1 and curPage == 1) then
            PrintGroupsHeader(1, printer, curLine, curPage);
        else
            PrintGroupsHeader(mCursor.BreakLevel(), printer, curLine, curPage);

        WriteBand("IDLINES", printer, curLine, curPage);          
   end

   PrintTotals(mCursor, printer, curLine, curPage); 

   if curLine > 1 then
   begin
       printer.SendPage(Self);
       Clear;
   end   
   Close(printer, mCursor);
end

Private printPages()
objects begin
    prevSupplier as integer default -1
    indline as smallint
end
begin

    indline = 1;
    while true do
    begin
        if cursorItems.Fetch
            (
                item1,
                supplier1,
                description1,
                cost_price1,
                stock1,
                company1
            ).Found == FALSE then
                break;
        if supplier1 != prevSupplier then // Change of supplier
        begin
            c_linescount.CurrentRow = indline; 
            c_line.Page = 2;
            PrintVars;
            ++indline; 
        end
        else if indline > c_linescount.Count then
        begin
            printer.SendPage(Self);
            Clear;
            indline = 1;
        end
        c_linescount.CurrentRow = indline; 
        c_line.Page = 1;
        PrintVars;
        prevSupplier = supplier1;
        ++indline;
    end
    if indline > 0 then
    begin
      printer.SendPage(Self);
      Clear;
    end
end


Public RunReport(pType as integer) return boolean
Objects begin
    lChParam as Char
end
begin
    switch pType
    begin
        case 1:
            lChParam = null; //Solo detalle
        case 2:
            lChParam ="ALL";//Todos los controles y paginas
        case 3:
            lChParam = "c_linescount";
        case 4:
            lChParam = "c_linescount:1";
        case 5:
            lChParam = "c_linescount:2";
        case 6:
            lChParam =  "c_linescount:ALL";
        case 7:
            lChParam =  "c_linescount:2,1=PLAINDETAIL;EXPORTCONTROL:id_des,id_CostPrice,id_company";
        case 8:
            lChParam = "c_linescount:1;EXPORTCONTROL:id_des"; 

    end
    
    printer.SetGroupExportDataReport(lChParam);
    if cursorItems.Prepare
    (
        "select item, items.supplier, description, cost_price, stock, company"
        + " from items, suppliers"
        + " where "       
        + " items.supplier = suppliers.supplier"
        + " order by supplier"
    ).Error != 0 then
        return FALSE;
        
    if cursorItems.Open().Error != 0 then
        return FALSE;


    printer.SetDocName("Report of Suppliers/Items");
    printPages();
    
    printer.Preview;
       
    return TRUE; 
end

main
objects
begin
  
end
begin   
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    oFrm.Run();
    Sql.Disconnect();
end

On Open begin
    CargaLista(lstStrings, "strings");
    CargaLista(listSql, "sql");

end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
   
    
    pList.IconFile = "listaiconosgif";



    
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 15, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 15, pList);  //Status

    
    FormatListColumnChar(6, 15, pList);  //Descripcion item

    FormatListColumnNumeric(7, 20, 2, pList); //Precio     
    pList.SetColumnMask(7,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " items.description,  price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer";

    

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
    end // if
    
    if pType == "sql" then begin
       gNumRows =  pList.LoadSelect(InstruSelect);
    end
    FShowMultiColumnGroupDlg(pList);
    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , 
                    description, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|" +  description +"|"+ price.Using(12) ;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

On Command CmdAgruparAgregadosSql
begin
    FShowMultiColumnGroupDlg(listSql);
end
On Command CmdAgruparAgregadosString 

begin
    
    FShowMultiColumnGroupDlg(lstStrings);
end


Private FShowMultiColumnGroupDlg(pList as SimpleFormControl)
begin

    pList.ShowListAsMultiColumnGroup("GROUPBY:1,2;AGGREGATES:7=SUM;SHOWDETAILLINES:YES;",
                                    0 , 0 , FALSE,
                                     "Suma:" 
                                    );
end


On Command CmdExportListStrings
begin   
    lstStrings.ExportToExcel((GetEnv("DBTEMP") +"\lstStringsExcel.xls"));
end

On Command CmdExportListSql
begin
    listSql.ExportToExcel((GetEnv("DBTEMP") +"\listSqlExcel.xls"));
end

On Command CmdPonColor
begin
    FPonColor(lstStrings);
    FPonColor(listSql);
end

Private FPonColor(pList as SimpleFormControl)
begin
    pList.SetListColorByLevel(1 ,Rgb(147,201,255)); //Asigna los colores de Fondo
    pList.SetListColorByLevel(2 ,Rgb(255,255,210));
    pList.EnableListColorByLevel(True); //Permite la visualizacion de los colores asignados con el método SetListColorByLevel
end
main
objects
begin
    of as frm
    i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

On Open
begin
    cursor1.Prepare("select sname , state  from states where lower(sname) matches ?");
    ActivarLista();
end



private function retornaValores(entrada as char) return char
objects begin
    ret as char
    backcolor as integer
    forecolor as integer
    icon as integer
    i as integer
    id as char
    estado as char
    postal as integer
end
begin
    i = 1;
    ret = "";
    if entrada != "" then
    begin
        cursor1.Open(entrada.Lowcase()+"*");
        while cursor1.Fetch(estado, id ).Found() do
        begin
            backcolor = Module.Rgb(223,255,255);
            
            forecolor = Module.Rgb(255,0,0);
            icon = Module.Random(1, 20);
            ret = ret + backcolor + "|" + forecolor + "|" + icon + "|" + estado  + "|" + id + "|" + 13.Character();
            i = i + 1;
        end
        cursor1.Close();
    end
    return ret;
end


private function chequeaMetodo()
objects begin
    ret as char
end
begin
    ret = "chequeaMetodo";
end

On Click ctr_desactivar
begin
    DesctivarLista();
end
private function ActivarLista()
objects begin
    xsize as integer
    ysize as integer
end
begin
    xsize = 640;
    ysize = 480;
    edt_autocompletado.SetSuggestionBox("retornaValores", "Estado|Código|", "listaiconosgif",200, 200);
end
private function DesctivarLista()
begin
    edt_autocompletado.SetSuggestionBox(null, null, null, null, null);
end


main
objects
begin
end
begin

    PutEnv("DBPATH",ProjectDir);
    Sql.Connect("stock"); 
    f.Run;
    Sql.Disconnect();
end

On Open
begin
    IDMASTER.SetTabVerticalPages(TRUE, 0);
    
end

On Open
begin
    IDMASTER.SetTabVerticalPages(TRUE, 1);
end

On Open
begin
    IDMASTER.SetTabVerticalPages(TRUE, 2);
end

On Open
begin
    IDMASTER.SetTabVerticalPages(TRUE, 3);
end

On Command CmtOpen4Windows
begin

    f0.OpenAsMDIChild(Self);    

    f1.OpenAsMDIChild(Self);
    f2.OpenAsMDIChild(Self);
    f3.OpenAsMDIChild(Self);

    f0.Frame.Text = "Estile 0";
    f1.Frame.Text = "Estile 1";
    f2.Frame.Text = "Estile 2";
    f3.Frame.Text = "Estile 3";

    SetMenu(mimenu);
end

On Command CmdNextChild
begin
    MDINextChild();
end

On Command CmdPreviousChild
begin
    MDIPreviousChild();
end

On Command CmdCascade
begin
    MDICascade();
end

On Command CmdTileVertical
begin
    MDITile(0);
end

On Command CmdTileHorizontal
begin
    MDITile(1);
end

On Command CmdArrangeIcons
begin
    MDIArrangeIcons();
end

main
objects
begin
    
end
begin
    PutEnv("DBPATH",ProjectDir);
    Sql.Connect("stock"); 
    oMDIClient.Run();    
    Sql.Disconnect();
end

On Open begin
    idTextHorizontal.SetTextDirection(1);
    idTextVeticalInf.SetTextDirection(2);
    idTextVeticalSup.SetTextDirection(3);
end
main
objects
begin
      ofrm as frm
end
begin
      ofrm.Run();
end

On Open begin
    idTextIzda.SetTextHorizontalAlign(1);
    idTextCentrado.SetTextHorizontalAlign(2);
    idTextderecha.SetTextHorizontalAlign(3);
end
main
objects
begin
      ofrm as frm
end
begin
      ofrm.Run();
end

On Open begin

    idTextVerticalSup.SetTextVerticalAlign(1);
    idTextVerticalCentrado.SetTextVerticalAlign(2);
    
end
main
objects
begin
      ofrm as frm
end
begin
      ofrm.Run();
end

Public Listado() 
Objects begin
    lC as SqlCursor
   
    oPrn as PrnDocument
end
begin
    oPrn.ShowFullOpenPrinterDialog(bOpenPrinterEx);
    lC.Prepare("select * from customers where customer < 27 order by customer");
    lC.Open;
    While lC.Fetch(customer, company,  fname, surname, address1).Found do 
    begin    
        
        cLines.PrintVars();
        ++cLines.CurrentRow;
    End
    lC.Close.Free;
    

    
    oPrn.SendPage(self);
    oPrn.Preview(null, true);

end        

On Command CmdAceptar
objects
begin
     oPage as cPage
end
begin
    if rb_preview.Selected == 1 then begin
        bOpenPrinterEx = FALSE;
    end
    if rb_preview.Selected == 2 then begin
        bOpenPrinterEx = TRUE;
    end
    oPage.Listado();
end
main
objects
begin
     oPage as cPage
     ofrm as frm
end
begin
    PutEnv("DRAWBOXINXPSTYLE", "TRUE");
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    ofrm.Run();
    
    Sql.Disconnect();
end

On Open begin
    CargaLista(lstStrings, "strings");
    CargaLista(listSql, "sql");
    Self.Maximize();

end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
    pList.AlternateBackColor( Rgb(207, 247, 254) , Rgb(254, 247, 224), 2);
    pList.SetLockColumns(1);
   
 
   
    
    pList.IconFile = "listaiconosgif";



    
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 15, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 15, pList);  //Status

    
    FormatListColumnNumeric(6,10, 0, pList); //Número de la linea
    pList.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item

    FormatListColumnNumeric(9, 15 ,0, pList); //Cantidad
    FormatListColumnNumeric(10, 15,0, pList); //Descuento
    FormatListColumnNumeric(11, 20, 2, pList); //Precio     
    pList.SetColumnMask(11,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
    end // if
    
    if pType == "sql" then begin
       gNumRows =  pList.LoadSelect(InstruSelect);
    end


    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(12) ;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

On Command CmdAgruparAgregadosSql
begin
    FnShowListAsMultiColumnGroup(listSql);
end
On Command CmdAgruparAgregadosString 

begin
    FnShowListAsMultiColumnGroup(lstStrings);
end

On Command CmdVistaClasicaString
begin
    EliminarVistaEnArbol(lstStrings);
end

On Command CmdVistaClasicaSql
begin
    EliminarVistaEnArbol(listSql);
end

Private FnShowListAsMultiColumnGroup(pList as SimpleFormControl)
begin
    pList.ShowListAsMultiColumnGroup("GROUPBY:1,-2;AGGREGATES:11=SUM,11=MIN,9=COUNT;SHOWDETAILLINES:YES;ONLYORDERBY:7", 62,60 , TRUE, "Cuantos %p", NULL, "Mínimo %p", 
                        "Suma en: %p", "Valor medio: %p");

end
Private EliminarVistaEnArbol(pList as SimpleFormControl)
begin
    pList.RemoveListGroupTreeView();
end

On Command CmdExportListStrings
begin
    ExportarListas(lstStrings);
end

On Command CmdExportListSql
begin
    ExportarListas(listSql);
end
main
objects
begin
    of as frm
    i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end



On Command CmdHideTab
begin
    
    If Tb1.IsPageHidden(2) then 
    Begin
        Tb1.HidePage(2,FALSE);
    End
    Else Begin
        Tb1.HidePage(2,TRUE); 
    End
end
main
objects
begin
    o as Frm
end
begin
    o.SetOption("EDITFOCUSCTRBACKCOLOR", Rgb(255, 255, 200));
    o.SetOption("CHECKRADIOFOCUSCTRBACKCOLOR", Rgb(255, 255, 200));
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("Stock");
    o.Run;
end

On Open begin
    CargaListaArbol(lstArbol, "arbol");
    DoSetSkin(lstArbol);        
    
end  
private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    if pList.Name() == "listSql" then begin
        skindir = ProjectDir()+"\skin\green";
    end
    else begin
        skindir = ProjectDir()+"\skin\blue";
        
    end    
    pList.ListSetSkin(skindir + "\miskin.txt");        
    
end
Private CargaListaArbol( pList as SimpleFormControl, pType as char)
    Objects begin
        curClientes curProvincias as SqlCursor
        lChDescripcion as char
        lChCliente lChStatus as char
        lChDireccion as char
        lDcTotalInvoice as decimal (12,2)
        lSmProvincia as char
        CustomersNode StatesNode as integer
        cellStyleIdx_1 as smallint
        cellStyleIdx_2 as smallint
        cellStyleIdx_3 as smallint
        cellStyleIdx_4 as smallint
        cellStyleIdx_5 as smallint
        cellStyleIdx_6 as smallint
        cellStyleIdx_7 as smallint
        cellStyleIdx_8 as smallint
        colCheck as char
        i as integer
    End
Begin
    pList.IconFile = "listaiconosgif";
    pList.SetLockColumns(1);
    cellStyleIdx_1 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline", Module.Rgb(255,255,0), Module.Rgb(0,0,255), 2);
    cellStyleIdx_2 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline;strikeout;bold", Module.Rgb(255,0,0), Module.Rgb(0,255,255), 2);
    cellStyleIdx_3 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline;bold", Module.Rgb(255,255,255), Module.Rgb(128,128,128), 2);
    cellStyleIdx_4 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;strikeout", Module.Rgb(255,0,0), Module.Rgb(128,0,255), 0,21);
    cellStyleIdx_5 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;bold", Module.Rgb(255,0,0), Module.Rgb(0,0,128), 0,21);

    cellStyleIdx_6 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;", Module.Rgb(255,255,255), Module.Rgb(255,0,0), 2);
    cellStyleIdx_7 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;", Module.Rgb(255,255,255), Module.Rgb(0,255,0), 2);
    cellStyleIdx_8 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;", Module.Rgb(255,255,255), Module.Rgb(0,0,255), 2);

    
    pList.FieldSeparator = "|";
    pList.SetColumnChars(1,60);
    pList.SetColumnChars(2, 30);
    
    pList.SetColumnType(3, 1);
    pList.SetColumnNumDec(3, 2);
    pList.SetColumnAlign(3, 2);
    pList.SetColumnMask(3,4);
    
    curProvincias.Prepare("select state, sname from states order by 2");
    curProvincias.Into(lSmProvincia, lChDescripcion);
    curProvincias.Open();
    
    curClientes.Prepare("Select company, address1, total_invoice, order_status from customers, orders "
                "where customers.state = ? and orders.customer = customers.customer ");
    curClientes.Into(lChCliente, lChDireccion, lDcTotalInvoice, lChStatus);                
    
    While curProvincias.Fetch.Found()
    do begin
        curClientes.Open(lSmProvincia);
        curClientes.Fetch();
        
        If curClientes.Found()
        then begin
            StatesNode = pList.AddTreeString(0,lChDescripcion, true, 12, 11);
        end
        Else Begin
            StatesNode = pList.AddTreeString(0,lChDescripcion, true, 5, 5);
            Continue;
        End
        
        While curClientes.Found() do
        begin
            i = pList.AddTreeString(StatesNode,lChCliente+"|"+lChDireccion + "|" + lDcTotalInvoice.Using(4) + "|" +lChStatus, true, 14, 14);
            pList.SetListCellConditionalStyle(i, 3, cellStyleIdx_6, "$3$ < 100");
            pList.SetListCellConditionalStyle(i, 3, cellStyleIdx_7, "$3$ >= 100 && $3$ <= 200");
            pList.SetListCellConditionalStyle(i, 3, cellStyleIdx_8, "$3$ > 200");    
            curClientes.Fetch();
        end
        curClientes.Close();
    end
    curClientes.Free();    
    
    curProvincias.Close().Free();
    
    pList.SetListCellStyle(1,1,cellStyleIdx_1);
    pList.SetListCellStyle(3,1,cellStyleIdx_2);
    pList.SetListCellStyle(5,1,cellStyleIdx_3);
    pList.SetListCellStyle(9,1,cellStyleIdx_4);
    pList.SetListCellStyle(9,2,cellStyleIdx_4);
    pList.SetListCellStyle(11,2,cellStyleIdx_5);
    
    
    pList.GroupListColumns("Company", 1,2 );
    pList.AllowColumnHeaderFilter(1, TRUE);
    pList.AllowColumnHeaderFilter(2, TRUE);
    pList.SetListColumnEditType(4, 2, "Y|N");
    pList.NumericColumnsFormattedToChar(true);
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(4) ;
 
            j = pList.AddString(texto, 0);
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    



Private EstilosCeldas(pList as SimpleFormControl)
Objects begin
    cellStyleIdx_16 as integer
end
begin
    cellStyleIdx_16 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline", Module.Rgb(255,255,0), Module.Rgb(0,0,255), 2);
    pList.SetListCellStyle(3,3,cellStyleIdx_16);

end




Private CambiarEstiloAllCell(pList as SimpleFormControl, pInStyle as integer)
Objects begin
   
    nRow nCol as integer
end
begin

    pList.ResetListColumnStyles(11);
    for nRow = 1 to gNumRows do begin 
        pList.SetListCellConditionalStyle(nRow,11 , pInStyle, "$11$ > 500");
    end    
    
    
end


On Command CmdExportWithoutStyleArbol
begin
    ExportarListas(false, lstArbol);
end

On Command CmdExportWithStyleArbol
begin
    ExportarListas(True, lstArbol);
end


Private ExportarListas(ConStilo as boolean, pList as SimpleFormControl)
Objects begin
    lChName as char
end
begin
    if ConStilo then begin
        lChName = pList.Name()+"WithStyle";
    end
    else begin
        lChName = pList.Name()+"WithoutStyle";    
    end
    pList.AllowExportListCellStyles(ConStilo);
    pList.ExportToExcel((GetEnv("DBTEMP") +"\"+lChName+"Excel.xls"));
    pList.ExportToHTML(GetEnv("DBTEMP") +"\"+lChName+"Html.htm");
    pList.ExportToODS((GetEnv("DBTEMP") +"\"+lChName+"ODS.ods"));
    pList.ExportToPDF(GetEnv("DBTEMP") +"\"+lChName+"Pdf.pdf");
end

On Command CmdExportListArbol
begin
    if rb_exportArbol.Selected == 1 then begin
        SendCommand("CmdExportWithoutStyleArbol");
    end
    if rb_exportArbol.Selected == 2 then begin
        SendCommand("CmdExportWithStyleArbol");
    end
    

end

On Command CmdTotalizeColumn
begin
    lstArbol.TotalizeColumn(3 ,1 ,null ,"SUMA ");
    lstArbol.TotalizeColumn(3 ,2 ,null ,"MÍNIMO ");
    lstArbol.TotalizeColumn(3 ,3 ,null ,"MAXIMO: ");
    lstArbol.TotalizeColumn(3 ,4 ,null ,"MEDIA: ");
    lstArbol.TotalizeColumn(3 ,5 ,null ,"Nº REGISTROS: ");
    lstArbol.ComputeListColumnTotals();
end

On Command CmdRemoveTotal
begin
    lstArbol.RemoveColumnTotals(3);
end
{Ejemplo FITTOTALSWIDTH y TotalizeColumn en listas en Arbol}

main
objects
begin
      of as frm
      i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("DRAWTREELISTLINES", "TRUE");
    PutEnv("FITTOTALSWIDTH", "TRUE");
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

On Open
Begin
    SetEditMode;
    btnAceptar.Comment = "Botón para validar los datos.\nUna vez pulsado los datos "
                    "introducidos\nse grabarán sobre la base de datos";
    btnCancelar.Comment = "Si pulsa sobre este botón\nperderá todos los datos introducidos ";
                    
End
main
objects
begin
    oFrmStates as FrmStates
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    oFrmStates.Run;
end

On Open begin
    CargaListaArbol(lstArbol, "arbol");
    DoSetSkin(lstArbol);        
    
end  
private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    if pList.Name() == "listSql" then begin
        skindir = ProjectDir()+"\skin\green";
    end
    else begin
        skindir = ProjectDir()+"\skin\blue";
        
    end    
    pList.ListSetSkin(skindir + "\miskin.txt");        
    
end
Private CargaListaArbol( pList as SimpleFormControl, pType as char)
    Objects begin
        curClientes curProvincias as SqlCursor
        lChDescripcion as char
        lChCliente lChStatus as char
        lChDireccion as char
        lDcTotalInvoice as decimal (12,2)
        lSmProvincia as char
        CustomersNode StatesNode as integer
        colCheck as char
        i as integer
    End
Begin
    pList.IconFile = "listaiconosgif";
    pList.SetLockColumns(1);
    cellStyleIdx_1 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline", Module.Rgb(255,255,0), Module.Rgb(0,0,255), 2);
    cellStyleIdx_2 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline;bold", Module.Rgb(255,0,0), Module.Rgb(255,255,255), 2);
    cellStyleIdx_3 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline;bold", Module.Rgb(255,255,255), Module.Rgb(128,128,128), 2);
    cellStyleIdx_4 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;strikeout", Module.Rgb(255,0,0), Module.Rgb(128,0,255), 0,21);
    cellStyleIdx_5 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;bold", Module.Rgb(255,0,0), Module.Rgb(0,0,128), 0,21);


    
    pList.FieldSeparator = "|";
    pList.SetColumnChars(1,45);
    pList.SetColumnChars(2, 30);
    
    pList.SetColumnType(3, 1);
    pList.SetColumnNumDec(3, 2);
    pList.SetColumnAlign(3, 2);
    pList.SetColumnMask(3,4);
    
    pList.SetColumnType(4, 1);
    pList.SetColumnNumDec(4, 2);
    pList.SetColumnAlign(4, 2);
    pList.SetColumnMask(4,4);


    curProvincias.Prepare("select state, sname from states order by 2");
    curProvincias.Into(lSmProvincia, lChDescripcion);
    curProvincias.Open();
    
    curClientes.Prepare("Select company, address1, total_invoice, order_status from customers, orders "
                "where customers.state = ? and orders.customer = customers.customer ");
    curClientes.Into(lChCliente, lChDireccion, lDcTotalInvoice, lChStatus);                
    
    While curProvincias.Fetch.Found()
    do begin
        curClientes.Open(lSmProvincia);
        curClientes.Fetch();
        
        If curClientes.Found()
        then begin
            StatesNode = pList.AddTreeString(0,lChDescripcion, true, 12, 11);
        end
        Else Begin
            StatesNode = pList.AddTreeString(0,lChDescripcion, true, 5, 5);
            Continue;
        End
        
        While curClientes.Found() do
        begin
            i = pList.AddTreeString(StatesNode,lChCliente+"|"+lChDireccion + "|" + lDcTotalInvoice.Using(4) + "|" +lDcTotalInvoice.Using(4) ,true, 14, 14);
            curClientes.Fetch();
        end
        curClientes.Close();
    end
    curClientes.Free();    
    
    curProvincias.Close().Free();
    pList.SetListColumnStyle(3, cellStyleIdx_3);
    
    pList.GroupListColumns("Company", 1,2 );
    pList.AllowColumnHeaderFilter(1, TRUE);
    pList.AllowColumnHeaderFilter(2, TRUE);
    pList.NumericColumnsFormattedToChar(true);
End

{
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
    pList.AlternateBackColor(  Rgb(254, 247, 224), Rgb(207, 207, 207) , 2);
    pList.IconFile = "listaiconosgif";
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 9, pList); //State
    FormatListColumnChar(2, 35, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 8, pList);  //Status

    
    FormatListColumnNumeric(6,10, 0, pList); //Número de la linea
    pList.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item

    FormatListColumnNumeric(9, 10 ,0, pList); //Cantidad
    FormatListColumnNumeric(10, 10,0, pList); //Descuento
    FormatListColumnNumeric(11, 30, 2, pList); //Precio     
    pList.SetColumnMask(11,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

End
}
{
Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(4) ;
 
            j = pList.AddString(texto, 0);
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end
}

Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    



Private EstilosCeldas(pList as SimpleFormControl)
Objects begin
    cellStyleIdx_16 as integer
end
begin
    cellStyleIdx_16 = pList.CreateListCellStyle("Times New Roman;italic;Size=9;underline", Module.Rgb(255,255,0), Module.Rgb(0,0,255), 2);
    pList.SetListCellStyle(3,3,cellStyleIdx_16);

end




Private CambiarEstiloAllCell(pList as SimpleFormControl, pInStyle as integer)
Objects begin
   
    nRow nCol as integer
end
begin

    pList.ResetListColumnStyles(11);
    for nRow = 1 to gNumRows do begin 
        pList.SetListCellConditionalStyle(nRow,11 , pInStyle, "$11$ > 500");
    end    
    
    
end


On Command CmdExportWithoutStyleArbol
begin
    ExportarListas(false, lstArbol);
end

On Command CmdExportWithStyleArbol
begin
    ExportarListas(True, lstArbol);
end


Private ExportarListas(ConStilo as boolean, pList as SimpleFormControl)
Objects begin
    lChName as char
end
begin
    if ConStilo then begin
        lChName = pList.Name()+"WithStyle";
    end
    else begin
        lChName = pList.Name()+"WithoutStyle";    
    end
    pList.AllowExportListCellStyles(ConStilo);
    pList.ExportToExcel((GetEnv("DBTEMP") +"\"+lChName+"Excel.xls"));
    pList.ExportToHTML(GetEnv("DBTEMP") +"\"+lChName+"Html.htm");
    pList.ExportToODS((GetEnv("DBTEMP") +"\"+lChName+"ODS.ods"));
    pList.ExportToPDF(GetEnv("DBTEMP") +"\"+lChName+"Pdf.pdf");
end

On Command CmdExportListArbol
begin
    if rb_exportArbol.Selected == 1 then begin
        SendCommand("CmdExportWithoutStyleArbol");
    end
    if rb_exportArbol.Selected == 2 then begin
        SendCommand("CmdExportWithStyleArbol");
    end
    

end

On Command CmdTotalizeColumn
begin
    lstArbol.SetListTotalsCellStyle(cellStyleIdx_2);
    lstArbol.TotalizeColumn(3 ,1 ,null ,"SUMA ");
    lstArbol.TotalizeColumn(3 ,2 ,null ,"MÍNIMO ");
    lstArbol.TotalizeColumn(3 ,3 ,null ,"MAXIMO: ");
    lstArbol.TotalizeColumn(3 ,4 ,null ,"MEDIA: ");
    lstArbol.TotalizeColumn(3 ,5 ,null ,"Nº REGISTROS: ");
    
    lstArbol.TotalizeColumn(4 ,1 ,null ,"SUMA ");
    lstArbol.TotalizeColumn(4 ,2 ,null ,"MÍNIMO ");
    lstArbol.TotalizeColumn(4 ,3 ,null ,"MAXIMO: ");


    lstArbol.ComputeListColumnTotals();
end

{Ejemplo FITTOTALSWIDTH y TotalizeColumn en listas en Arbol}

main
objects
begin
      of as frm
      i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTELLIPSIS", "TRUE");
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("DRAWTREELISTLINES", "TRUE");
    PutEnv("FITTOTALSWIDTH", "TRUE");
    PutEnv("TOTALSSTYLEASCOLUMNSTYLE", "TRUE");
    
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end



On Open
    Objects begin
        curClientes curProvincias as SqlCursor
        lChDescripcion as char
        lChCliente as char
        lChDireccion as char
        lSmProvincia as char
        CustomersNode StatesNode as integer
    End
Begin
    Module.SetHeaderContextMenu("LIST" ,oMnuMyHeaderMenu);
    Module.SetContextMenu("LIST" ,oMnuMyContextMenu);
    
    lst1.FieldSeparator = "|";
    lst1.SetColumnChars(1,60);
    curProvincias.Prepare("select state, sname from states order by 2");
    curProvincias.Into(lSmProvincia, lChDescripcion);
    curProvincias.Open();
    
    curClientes.Prepare("Select company, address1 from customers "
                "where customers.state = ? ");
    curClientes.Into(lChCliente, lChDireccion);                
    
    While curProvincias.Fetch.Found()
    do begin
        curClientes.Open(lSmProvincia);
        curClientes.Fetch();
        
        If curClientes.Found()
        then begin
            StatesNode = lst1.AddTreeString(0,lChDescripcion, true, 12, 11);
        end
        Else Begin
            StatesNode = lst1.AddTreeString(0,lChDescripcion, true, 5, 5);
            Continue;
        End
        
        While curClientes.Found() do
        begin
            lst1.AddTreeString(StatesNode,lChCliente+"|"+lChDireccion, true, 14, 14);
            curClientes.Fetch();
        end
        curClientes.Close();
    end
    curClientes.Free();    
    
    curProvincias.Close().Free();
End

On Command CmdCollapseAll
begin
    lst1.CollapseNode(0 ,true);
end

On Command CmdExpandAll
Begin
    lst1.ExpandNode(0,true);
End

On Command CmdCollapseNode
begin
    If lst1.IsNodeOpen(lst1.Selected) then
    begin
        lst1.CollapseNode(lst1.Selected ,true);
    end
end

On Command CmdExpandNode
Begin
    If not lst1.IsNodeOpen(lst1.Selected) then
    begin
        lst1.ExpandNode(lst1.Selected,true);
    end
End
main
objects
begin
    o as Frm
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    
    o.Run;
end



On Open
    Objects begin
        curClientes curProvincias as SqlCursor
        lChDescripcion as char
        lChCliente as char
        lChDireccion as char
        lSmProvincia as char
        CustomersNode StatesNode as integer
    End
Begin
    Module.SetHeaderContextMenu("LIST" ,oMnuMyHeaderMenu);
    Module.SetContextMenu("LIST" ,oMnuMyContextMenu);
    
    lst1.FieldSeparator = "|";
    lst1.SetColumnChars(1,60);
    curProvincias.Prepare("select state, sname from states  order by 2");
    curProvincias.Into(lSmProvincia, lChDescripcion);
    curProvincias.Open();
    
    curClientes.Prepare("Select company, address1 from customers "
                "where customers.state = ? and customer < 115 ");
    curClientes.Into(lChCliente, lChDireccion);                
    
    While curProvincias.Fetch.Found()
    do begin
        curClientes.Open(lSmProvincia);
        curClientes.Fetch();
        
        If curClientes.Found()
        then begin
            StatesNode = lst1.AddTreeString(0,lChDescripcion, true, 12, 11);
            lst1.SetRowForeground(StatesNode ,Rgb(0,157,0));
        end
        Else Begin
            StatesNode = lst1.AddTreeString(0,lChDescripcion, true, 5, 5);
            lst1.SetRowForeground(StatesNode ,Rgb(250,0,0));
            Continue;
        End
        
        While curClientes.Found() do
        begin
            CustomersNode = lst1.AddTreeString(StatesNode,lChCliente+"|"+lChDireccion, true, 14, 14);
            lst1.SetRowForeground(CustomersNode ,Rgb(0,0,250));
            curClientes.Fetch();
        end
        curClientes.Close();
    end
    curClientes.Free();    
    
    curProvincias.Close().Free();
End

On Command CmdCollapseAll
begin
    RecorreNodosPadres(1, true, false);
end
Public RecorreNodosPadres(id as integer, CloseNode as boolean, OpenNode as boolean) 
Objects begin
    idNext as integer
end
begin
    idNext = lst1.GetTreeNext(id);
    if idNext != 0 then begin
       RecorreNodosPadres(idNext, CloseNode, OpenNode);
       if CloseNode then 
        lst1.CollapseNode(idNext ,CloseNode);
       if OpenNode then
        lst1.ExpandNode(idNext,OpenNode);
    end
end
On Command CmdExpandAll
Begin
     RecorreNodosPadres(1, false, true);
End

On Command CmdCollapseNode
begin
    If lst1.IsNodeOpen(lst1.Selected) then
    begin
        lst1.CollapseNode(lst1.Selected ,true);
    end
end

On Command CmdExpandNode
Begin
    If not lst1.IsNodeOpen(lst1.Selected) then
    begin
        lst1.ExpandNode(lst1.Selected,true);
    end
End
main
objects
begin
    o as Frm
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    
    o.Run;
end

On Open begin
    lb_tablaCharSet.FieldSeparator = "|";
    CargarTabla();
end

On event DblClick control lb_tablaCharSet(e as event)

begin
    lb_tablaCharSet.GetListColumnInto(lb_tablaCharSet.Selected,2 ,varCharset) ;
    Close();
end
Private CargarTabla()
begin
  
lb_tablaCharSet.AddString("NONE|0"); // No char encoding detected */
lb_tablaCharSet.AddString("UTF8|1"); // UTF-8 */
lb_tablaCharSet.AddString("8859_1|10"); //ISO-8859-1 ISO Latin 1 */
lb_tablaCharSet.AddString("8859_2|11"); //ISO-8859-2 ISO Latin 2 */
lb_tablaCharSet.AddString("8859_3|12"); //ISO-8859-3 */
lb_tablaCharSet.AddString("8859_4|13"); //ISO-8859-4 */
lb_tablaCharSet.AddString("8859_5|14"); //ISO-8859-5 */
lb_tablaCharSet.AddString("8859_6|15"); //ISO-8859-6 */
lb_tablaCharSet.AddString("8859_7|16"); //ISO-8859-7 */
lb_tablaCharSet.AddString("8859_8|17"); //ISO-8859-8 */
lb_tablaCharSet.AddString("8859_9|18"); //ISO-8859-9 */
lb_tablaCharSet.AddString("2022_JP|19"); //ISO-2022-JP */
lb_tablaCharSet.AddString("SHIFT_JIS|20"); //Shift_JIS */
lb_tablaCharSet.AddString("EUC_JP|21"); //EUC-JP */
lb_tablaCharSet.AddString("ASCII|222"); // pure ASCII */


    

end
main
    
begin
    varCharset = 10;
    CreaDoc();
    if RecorreDoc() != 0 then 
        CreaLista();
    if Yes("Desea editar el fichero generado") then begin
        Module.OpenFileWithDefaultApp(Module.ProjectDir()+"\EjemploTTXmlGetEncodedNoteText.xml");
    end        
    
end

private function CreaDoc
objects
begin
    doc as integer
    node as integer
    node2 as integer
    nodeText as integer
    buffer as Char
end
begin

    doc = TTXmlNewDoc(varCharset);

    node = TTXmlNewNode("nodoprincipal");

    TTXmlDocSetRootElement(doc, node);
    
    TTXmlNewEncodedProp(doc, node, "prop1", "valor de prop1", varCharset);
    
    node2 = TTXmlNewChild(doc, node, "nodo1", NULL);
    TTXmlNewEncodedProp(doc, node2, "Empresa", "Nombre Empresa", varCharset);
    TTXmlNewEncodedProp(doc, node2, "Direccion", "C/ Dirección Empresa", varCharset);
    
    nodeText = TTXmlNewEncodedTextChild(doc, node2, "texto", "Explotación de plantas acuíferas ", varCharset);


   
    TTXmlSaveFormatFileEnc(doc, Module.ProjectDir()+"\EjemploTTXmlGetEncodedNoteText.xml", varCharset);
    
    TTXmlFreeDoc(doc);
    

end

private function RecorreDoc return integer
objects begin
    doc as integer
end
begin
    doc = TTXmlOpenDoc(Module.ProjectDir()+"\EjemploTTXmlGetEncodedNoteText.xml");
    if doc == 0 then begin
        "No se puede abrir el fichero".Trace();
        return 0;
    end
    NavigateTree(doc);
    return 1;
end


private function NavigateElement(doc as integer, node as integer, level as integer)
objects begin
    curnode as integer
    nodeName as Char
    propValue as Char
    nodeType as integer
    nodeText as Char
end
begin

    curnode = node;
    while TRUE do
    begin
        if curnode == 0 then begin
            break;
        end else begin

            nodeType = TTXmlGetNodeType(doc, curnode);
            switch nodeType
            begin
                case 1://elemento
                begin
                    nodeName = TTXmlGetNodeName(doc, curnode);
                    Traza(level.Char + " " + nodeName);                    
                    if nodeName == "texto" then
                    begin
                        nodeText = TTXmlGetEncodedNodeText(doc, curnode, varCharset);
                        if nodeText is not null then
                        begin
                            Traza(level.Char + " " + nodeText);
                        end                        
                    end else begin
                        propValue = TTXmlGetEncodedProp(doc, curnode, "prop1", varCharset);
                        if propValue is not null then
                        begin
                            Traza(level.Char + " " + propValue);
                            TTXmlRemoveProperty(doc, curnode, "Empresa");
                        end
                    end                    
                end                
                default:
                begin
                end
            end
        end
        NavigateElement(doc, TTXmlGetFirstChildNode(doc, curnode), level + 1);    
        curnode = TTXmlGetNextNode(doc, curnode);
    end
    
    
end

private function NavigateTree(doc as integer)
objects begin
    rootnode as integer
    node as integer
    curnode as integer
end
begin
    rootnode = TTXmlGetDocRootNode(doc);
    curnode = rootnode;
    NavigateElement(doc, curnode, 0);
end

private function Traza (text as char)
begin
end


private function CreaLista
objects begin
    doc as integer
    xpathcontext as integer
    xpathlist as integer
    node as integer
    expression as Char
    nodeText as Char
    numNodes as integer
    i as integer
end
begin
    doc = TTXmlOpenDoc(Module.ProjectDir()+"\Lista.xml");
    
    xpathcontext = TTXmlCreateXPathContext(doc);
    expression = "/autos/auto/fabricante";
    xpathlist = TTXmlCreateXPathList(doc, xpathcontext, expression);
    
    numNodes = TTXmlGetXPathListNumNodes(doc, xpathlist);
    i = 1;
    
    while i <= numNodes do
    begin
        node = TTXmlGetXPathListNode(doc, xpathlist, i);
        nodeText = TTXmlGetNodeText(doc, node);
        ++i;
    end
    
    
    TTXmlFreeXPathContext(doc, xpathcontext);
    TTXmlFreeXPathList(doc, xpathlist);
    TTXmlFreeDoc(doc);
end

main
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");

    Sql.UnloadTo(ProjectDir+"\customers.xls", "select customer, company, surname, fname, phone from customers ", 0);
    Sql.UnloadTo(ProjectDir+"\customers.ods", "select customer, company, surname, fname, phone from customers ", 1);
    Sql.UnloadTo(ProjectDir+"\customers.pdf", "select customer, company, surname, fname, phone from customers ", 2);
    Sql.UnloadTo(ProjectDir+"\customers.html", "select customer, company, surname, fname, phone from customers ", 3);


    if Yes("Desea abrir los documentos generados?") then begin  
        OpenFileWithDefaultApp(ProjectDir+"\customers.xls");
        OpenFileWithDefaultApp(ProjectDir+"\customers.ods");
        OpenFileWithDefaultApp(ProjectDir+"\customers.pdf");
        OpenFileWithDefaultApp(ProjectDir+"\customers.html");
    end
    Sql.Disconnect();
end

On Open 
begin
    lst1.FieldSeparator= "|";
    lst1.SetColumnChars(1,20);
    estableceDatasourceDomDocument();
end

On Close
begin
   Module.Delete(ficheroXml);
end

private function estableceDatasourceDomDocument()
objects begin
    strTableName as Char
    strConnection as Char
    strPath as Char
    ret as Boolean
    nLockType as integer
    Cuantos nCursorType as integer
    domDoc as ActiveX    
end
begin
    domDoc.CreateActiveXFromProgID( "msxml2.DOMDocument.6.0");


    ficheroXml = Sql.UnloadToDomDocument("select tabname, colname, coltype from systables, syscolumns "+
                                        " where syscolumns.tabid = systables.tabid and tabname  not matches 'ep_*' and tabname  not matches 'sys*'"+
                                         " order by tabname ", domDoc); //Carga los registro consultados en el Objeto DOM
        
    spRecordset.CreateActiveXFromProgID( "ADODB.Recordset"); //Crea un objeto Recordset
    spRecordset.Invoke("Open", ret,domDoc);
    RecorrerRecorset();
end
Private  RecorrerRecorset() 
Objects begin
    bEof as boolean
    bBof as boolean
    lChValue lChTablename lChTablenameLast lChRecordValue as char
    i j as integer
    fields as ActiveX
    NumFields as integer default 0
    oArrayActiveXColumns as cArrayActiveX
    lInSizeArray as Integer
    lInNode as Integer
    lInValue as Integer
    nuevogrupo as boolean
end
begin
    spRecordset.Invoke("MoveFirst", null);
    spRecordset.GetProperty("EOF" ,bEof);
    spRecordset.GetProperty("BOF" ,bBof);
    i = 1;
    nuevogrupo = TRUE;
    while not (bEof or bBof) do begin
        spRecordset.GetProperty("Fields",fields);
        fields.GetProperty("Count", NumFields);
        
        for j = 0 to (NumFields - 1) do begin
            lInSizeArray = j+1;
            oArrayActiveXColumns.Add(lInSizeArray);
            fields.GetProperty("Item", oArrayActiveXColumns[lInSizeArray], j);
            if j < 2 then 
                oArrayActiveXColumns[lInSizeArray].GetProperty("Value",lChValue);
            else begin
                oArrayActiveXColumns[lInSizeArray].GetProperty("Value",lInValue);    
                lChValue = GetType(lInValue);
            end    
            if nuevogrupo then
            begin
                lChTablename =lChValue;
                lInNode =  lst1.AddTreeString(0 ,lChTablename,true);
                nuevogrupo = FALSE;
            end
            
            if j > 0 then 
                lChRecordValue += lChValue + "|";
            else begin //j==0
                lChTablename = lChValue;
            end
            lChValue="";
            if j == (NumFields - 1) then begin
                lst1.AddTreeString(lInNode, lChRecordValue);
                lChRecordValue = "";
            end            
        end   
        
        if lChTablenameLast is not null and lChTablenameLast != lChTablename then nuevogrupo = TRUE;
        
        lChTablenameLast = lChTablename;
        
        spRecordset.Invoke("MoveNext", null);
        spRecordset.GetProperty("EOF" ,bEof);
        spRecordset.GetProperty("BOF" ,bBof);
        ++i;
    end

end

Public GetType (pInType as integer) return char
Objects begin
    lChType as char
end
begin
    if pInType >= 256.Integer then pInType = pInType - 256.Integer;
    switch pInType
    begin
        case 0.Integer:
            lChType = 'char';
        case 1.Integer:
            lChType = 'smallint';
        case 2.Integer:
            lChType = 'integer';
        case 3.Integer:
            lChType = 'time';
        case 5.Integer:
            lChType = 'decimal';
        case 6.Integer:
            lChType = 'serial';
        case 7.Integer:
            lChType = 'date';
        case 8.Integer:
            lChType = 'money';
        case 10.Integer:
            lChType = 'datetime';
        case 11.Integer:
            lChType = 'binary';
        default:
            lChType = 'Invalido';
    end

    return lChType;
end


private function estableceDatasourceDomDocument1()
objects begin
    strTableName as Char
    strConnection as Char
    strPath as Char
    ret as Boolean
    nLockType as integer
    Cuantos nCursorType as integer
    domDoc as ActiveX    
end
begin
    domDoc.CreateActiveXFromProgID( "msxml2.DOMDocument.6.0");


    ficheroXml = Sql.UnloadToDomDocument("select company , customer from customers ", domDoc); //Carga los registro consultados en el Objeto DOM
    
    spRecordset.CreateActiveXFromProgID( "ADODB.Recordset"); //Crea un objeto Recordset
    spRecordset.Invoke("Open", ret,domDoc);
    RecorrerRecorset2();
end

Private  RecorrerRecorset2() 
Objects begin
    bEof as boolean
    bBof as boolean
    lChValue lChTablename lChTablenameLast lChRecordValue as char
    i j as integer
    fields as ActiveX
    NumFields as integer default 0
    oArrayActiveXColumns as cArrayActiveX
    lInSizeArray as Integer
    lInNode as Integer
    lInValue as Integer
    nuevogrupo as boolean
end
begin
    spRecordset.Invoke("MoveFirst", null);
    spRecordset.GetProperty("EOF" ,bEof);
    spRecordset.GetProperty("BOF" ,bBof);
    i = 1;
    while not (bEof or bBof) do begin
        spRecordset.GetProperty("Fields",fields);
        fields.GetProperty("Count", NumFields);
        for j = 0 to (NumFields - 1) do begin
            lInSizeArray = j+1;
            oArrayActiveXColumns.Add(lInSizeArray);
            fields.GetProperty("Item", oArrayActiveXColumns[lInSizeArray], j);
            if j < 1 then 
                oArrayActiveXColumns[lInSizeArray].GetProperty("Value",lChValue);
            else begin
                oArrayActiveXColumns[lInSizeArray].GetProperty("Value",lInValue);    
                lChValue = lInValue;
            end    
            lChRecordValue += lChValue + "|";
            lst1.AddTreeString(0, lChRecordValue);
            lChRecordValue = "";
            lChValue="";
        end   
        
        if lChTablenameLast is not null and lChTablenameLast != lChTablename then nuevogrupo = TRUE;
        
        lChTablenameLast = lChTablename;
        
        spRecordset.Invoke("MoveNext", null);
        spRecordset.GetProperty("EOF" ,bEof);
        spRecordset.GetProperty("BOF" ,bBof);
        ++i;
    end

end
Public Add(i as integer) 
begin  
    if Self.Size() < i then begin
        Self.Resize(i+1);    
    end
    
end
main
objects
begin
     of as frm
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    of.Run();
    Sql.Disconnect();
end

main
objects
begin
     
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");

    Sql.UnloadToXml(ProjectDir+"\customers.xml" ,"select customer, company, surname, fname, phone from customers "+
                    " where customer not in(115, 1111, 11111) ");
   
    OpenFileWithDefaultApp(ProjectDir+"\customers.xml");
    Sql.Disconnect();
end

On Open begin
    listBox.FieldSeparator= "|";
    listBox.AddString("1|text1");
    listBox.AddString("2|text2");
end
On Command CmdModificarTexto
begin
    listBox.UpdateString(1 ,"1|modifcarText1");
    listBox.UpdateString(2 ,"1|modifcarText2");
end
main
objects
begin
     of as frm
end
begin
     of.Run();
end

On Open begin
    
end
On Command CmdAceptar 
Objects begin
    sStream as Stream
    line as char
    i as smallint default 0
end
begin

    switch begin
        case de_codigo is null: begin
             "No ha indicado el código del país sobre el que desaa obtener la información".Trace();
        end
        default: begin
            LimpiarControles();
            WebServiceCountryInfoService();
            sStream.Open(outFile, 1);
            lb_get.Reset();
            sStream.ReadLineInto(line);
            while not sStream.EOF do begin
                lb_get.AddString(line);
                Yield;
                sStream.ReadLineInto(line);
                ++i;    
            end
        end
    end
end
Public LimpiarControles()
begin
    text_codigo.Text= "";
    text_pais.Text="";
    text_capital.Text="";
    text_codtf.Text="";
    text_continente.Text="";
    text_codidioma.Text="";    
    text_idioma.Text="";
    bmp_bandera.Bitmap = "";
end
public function WebServiceCountryInfoService
objects
begin
    serverUrl as Char 
    headerSend as Char
    headerReceive as Char
    SOAPAction as Char
    lChCodigo as char
    lChMensaje as char
end
begin
    lChCodigo = de_codigo.Text;
    switch 
    begin
        case peticion == 1: begin
            lb_post.Reset;
            lb_post.AddString('  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:q0="http://www.oorsprong.org/websamples.countryinfo" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">   ');
            lb_post.AddString('  <soapenv:Body>   ');
            lb_post.AddString('  <q0:ListOfCountryNamesByCode />    ');
            lb_post.AddString('  </soapenv:Body>   ');
            lb_post.AddString('  </soapenv:Envelope>   ');            
            headerSend = 
                '  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:q0="http://www.oorsprong.org/websamples.countryinfo" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">   '+
                '  <soapenv:Body>   '+
                '  <q0:ListOfCountryNamesByCode />    '+
                '  </soapenv:Body>   '+
                '  </soapenv:Envelope>   ';
            lChMensaje = '. (Códigos de paises)';
        end
        case peticion == 2:begin
             headerSend = 
                '  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:q0="http://www.oorsprong.org/websamples.countryinfo" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">   '+
                '  <soapenv:Body>   '+
                '  <q0:CountryName>   '+
                '  <q0:sCountryISOCode>'+lChCodigo+'</q0:sCountryISOCode>    '+
                '  </q0:CountryName>   '+
                '  </soapenv:Body>   '+
                '  </soapenv:Envelope>   ';
             lChMensaje = '. (Descripción del país)';                
        end
        case peticion == 3:begin
            lb_post.Reset;
            lb_post.AddString('  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:q0="http://www.oorsprong.org/websamples.countryinfo" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">   ');
            lb_post.AddString('  <soapenv:Body>   ');
            lb_post.AddString('  <q0:FullCountryInfo>   ');
            lb_post.AddString('  <q0:sCountryISOCode>'+lChCodigo+'</q0:sCountryISOCode>    ');
            lb_post.AddString('  </q0:FullCountryInfo>   ');      
            lb_post.AddString('  </soapenv:Body>   ');      
            lb_post.AddString( '  </soapenv:Envelope>   ');      
            
            headerSend = 
                '  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:q0="http://www.oorsprong.org/websamples.countryinfo" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">   '+
                '  <soapenv:Body>   '+
                '  <q0:FullCountryInfo>   '+
                '  <q0:sCountryISOCode>'+lChCodigo+'</q0:sCountryISOCode>    '+
                '  </q0:FullCountryInfo>   '+
                '  </soapenv:Body>   '+
                '  </soapenv:Envelope>   ';
            lChMensaje = '. (Información completa del país)';    
        end            
    end
    box_lstget.Reset();
   

    serverUrl = "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL";
    SOAPAction = NULL;
    panel_msg.Text = "Conectandose al WebServer......"; 
    Yield;
    Module.CallWebService(serverUrl, headerSend, headerReceive, outFile, SOAPAction);    
    panel_msg.Text = "Respuesta obtenida" + lChMensaje ;
    Yield;
    RecorreDoc();
    panel_msg.Text = "Proceso Finalizado"+lChMensaje ;
    Yield;
end
private function RecorreDoc return integer
objects begin
    doc as integer
end
begin
    doc = TTXmlOpenDoc(GetEnv("DBTEMP")+ "\CountryName.xml");
    if doc == 0 then begin
        "No se puede abrir el fichero".Trace();
        return 0;
    end
    NavigateTree(doc);
    return 1;
end
private function NavigateTree(doc as integer)
objects begin
    rootnode as integer
    node as integer
    curnode as integer
end
begin
    rootnode = TTXmlGetDocRootNode(doc);
    curnode = rootnode;
    NavigateElement(doc, curnode, 0);
end


private function NavigateElement(doc as integer, node as integer, level as integer)
objects begin
    curnode aux_curnode aux_curnode2 as integer
    nodeName as Char
    propValue as Char
    nodeType as integer
    nodeText as Char
end
begin

    curnode = node;
    while TRUE do
    begin
        if curnode == 0 then begin
            break;
        end else begin

            nodeType = TTXmlGetNodeType(doc, curnode);
            switch nodeType begin
                case 1: begin //elemento
                    nodeName = TTXmlGetNodeName(doc, curnode);
                    switch begin
                       case peticion == 1:begin             
                            if nodeName == "sISOCode" then begin
                                nodeText = TTXmlGetEncodedNodeText(doc, curnode, varCharset);
                                if nodeText is not null then
                                begin
                                    de_codigo.AddString(nodeText);
                                end
                            end  //   if nodeName == "CountryNameResult"                       
                        end //ofrm.rb_peticion.Selected == 2:

                        case peticion == 2:begin             
                            if nodeName == "CountryNameResult" then begin
                                nodeText = TTXmlGetEncodedNodeText(doc, curnode, varCharset);
                                if nodeText is not null then
                                begin
                                    text_nombrepais.Invisible = FALSE;
                                    text_nombrepais.Text=nodeText;
                                    Yield;
                                end
                            end  //   if nodeName == "CountryNameResult"                       
                        end //ofrm.rb_peticion.Selected == 2:
     
                        case peticion == 3:begin 
                           if nodeName == 'FullCountryInfoResult'  then begin
                                curnode = TTXmlGetFirstChildNode(doc , curnode);
                                nodeName = TTXmlGetNodeName(doc, curnode);
                                while nodeName != 'Languages' do begin
                                    RecorrerNodoFullCountryInfoResult(doc, curnode , nodeName,  'FullCountryInfoResult' );
                                end    
                                
                            end
                            if nodeName == 'Languages' then begin
                                RecorrerNodoLanguages( doc ,  curnode , nodeName , 'Languages');
                            end //if nodeName == 'Languages'    
                        end //ofrm.rb_peticion.Selected == 3:
                    end //switch   
                end   //case elemento             
            end//Switch
        end //else 
        NavigateElement(doc, TTXmlGetFirstChildNode(doc, curnode), level + 1);    
        curnode = TTXmlGetNextNode(doc, curnode);
    end //while
    
    
end

Public RecorrerNodoFullCountryInfoResult(var doc as integer, var curnode as integer, var nodeName as char, nodeFather as char)
objects begin
    nodeText as char default "a"
    nodeType as integer
end
begin
    nodeType = TTXmlGetNodeType(doc, curnode);
    nodeText = TTXmlGetEncodedNodeText(doc, curnode, varCharset);
    switch nodeFather
    begin
        case 'FullCountryInfoResult':begin
            if nodeName == "sISOCode" then begin
                if nodeText is not null then
                begin
                    text_codigo.Text=nodeText;
                    Yield;
                end
            end    
            if nodeName == "sName" then begin
        
                if nodeText is not null then
                begin
                    text_pais.Text=nodeText;
                    Yield;
                end
            end  //   if nodeName == "sName"                       
            if nodeName == "sCapitalCity" then begin
        
                if nodeText is not null then
                begin
                    text_capital.Text=nodeText;
                    Yield;
                end
            end  //   if nodeName == "sCapitalCity"                       
            if nodeName == "sPhoneCode" then begin
                if nodeText is not null then
                begin
                    text_codtf.Text=nodeText;
                    Yield;
                end
            end  //   if nodeName == "sPhoneCode"         
            if nodeName == 'sContinentCode' then begin
                if nodeText is not null then
                begin
                    text_continente.Text=nodeText;
                    Yield;
                end
            end
            if nodeName == 'sCountryFlag' then begin
                if nodeText is not null then begin
                    localFile = GetEnv("DBTEMP") +"\"+nodeText.GetWord("/",nodeText.NumWords("/"));
                    Module.GetUrlFile(nodeText ,localFile, FALSE, FALSE);
                    bmp_bandera.Bitmap = localFile;
                    Yield;
                end
                    
            end
        end    
    end
    curnode = TTXmlGetNextNode(doc, curnode);
    nodeName = TTXmlGetNodeName(doc, curnode);    
end
{
       <m:Languages>
          <m:tLanguage>
            <m:sISOCode>eng</m:sISOCode>
            <m:sName>English</m:sName>
          </m:tLanguage>
        </m:Languages>
}
Public RecorrerNodoLanguages(var doc as integer, var curnode as integer, var nodeName as char, nodeFather as char) 
Objects begin
    nodeText as Char
    nodeNameChild as char
    nodeChild as integer
end
begin
    nodeChild = DameHijos(doc, curnode) ; //Devuelve el nodo del hijo
    nodeNameChild = TTXmlGetNodeName(doc, nodeChild);
    nodeName = TTXmlGetNodeName(doc, curnode);
    while nodeNameChild == 'text' and (nodeName == 'Languages' or nodeName == 'tLanguage') do begin
        curnode = TTXmlGetNextNode(doc, nodeChild);
        RecorrerNodoLanguages( doc , curnode ,  nodeName, nodeName);
    end
    if nodeName == "sISOCode" then begin
        nodeText = TTXmlGetEncodedNodeText(doc, curnode, varCharset);            
        if nodeText is not null then
        begin
            text_codidioma.Text=nodeText;
            Yield;
        end
    end // if nodeName == "sISOCode"
    curnode = TTXmlGetNextNode(doc, curnode);
    nodeName = TTXmlGetNodeName(doc, curnode);    
    curnode = TTXmlGetNextNode(doc, curnode);
    nodeName = TTXmlGetNodeName(doc, curnode);    
    if nodeName == "sName" then begin
        nodeText = TTXmlGetEncodedNodeText(doc, curnode, varCharset);                        
        if nodeText is not null then
        begin
            text_idioma.Text=nodeText;
            Yield;
        end
    end  //   if nodeName == "sName"   
    
end

Public DameHijos (doc as integer, node as integer) return integer
objects begin
    ChildNode as integer
    nodeName as char
end
begin
    ChildNode = TTXmlGetFirstChildNode(doc , node);
    return ChildNode;
   
end
On Command CmdCargarlistapiases
Objects begin
    sStream as Stream
    line as char
    i as smallint default 0
end
begin
    if peticion == 1 then begin
        WebServiceCountryInfoService();
        RecorreDoc();
    end
    de_codigo.SetFocus();
    de_codigo.Unfold();
    sStream.Open(outFile, 1);
    lb_get.Reset();    
    sStream.ReadLineInto(line);
    while not sStream.EOF do begin
    
        lb_get.AddString(line);
        Yield;
        sStream.ReadLineInto(line);
        ++i;    
    end
    
    panel_msg.Text = "Seleccione el código del pais que desea consultar.";
    Yield;
end

On event SelChange control de_codigo(e as event)
begin
    peticion = 2;
    SendCommand('CmdAceptar');

    peticion = 3;
    SendCommand('CmdAceptar');
    Delete(localFile);//Jgp con la imagen de la bandera.
end
main
objects
begin
   
end
begin

    ofrm.Run();
end



On Command CmdEnviarConsultaMunicipios begin
    list_municipios.Reset();
    WebServiceCatastro();
end    
    
public function WebServiceCatastro
objects
begin
    serverUrl as Char 
    headerSend as Char
    headerReceive as Char
    SOAPAction as Char
end
begin


    headerSend = 
        '  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:q0="http://www.catastro.meh.es/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> '+
        '  <soapenv:Body> '+
        '  <q0:Provincia>'+ChProvin+'</q0:Provincia>  '+
        '  <q0:Municipio></q0:Municipio>  '+           //sin valor consulta todos los municipios de la provincia
        '  </soapenv:Body> '+
        '  </soapenv:Envelope> ';

    headerReceive = NULL;
    outFile = GetEnv("DBTEMP")+"\ConsultaMunicipio.xml";
    serverUrl = "http://ovc.catastro.meh.es/ovcservweb/OVCSWLocalizacionRC/OVCCallejero.asmx?WSDL";
    SOAPAction = "http://tempuri.org/OVCServWeb/OVCCallejero/ConsultaMunicipio";
    Module.CallWebService(serverUrl, headerSend, headerReceive, outFile, SOAPAction);    
    RecorreXml();

end

private function RecorreXml return integer
objects begin
    doc as integer
end
begin
    doc = TTXmlOpenDoc(outFile);
    if doc == 0 then begin
        "No se puede abrir el fichero".Trace();
        return 0;
    end
    NavigateTree(doc);
    return 1;
end
private function NavigateTree(doc as integer)
objects begin
    rootnode as integer
    node as integer
    curnode as integer
end
begin
    rootnode = TTXmlGetDocRootNode(doc);
    curnode = rootnode;
    NavigateElement(doc, curnode, 0);
end
private function NavigateElement(doc as integer, node as integer, level as integer)
objects begin
    curnode as integer
    nodeName as Char
    propValue as Char
    nodeType as integer
    nodeText as Char
end
begin

    curnode = node;
    while TRUE do
    begin
        if curnode == 0 then begin
            break;
        end else begin

            nodeType = TTXmlGetNodeType(doc, curnode);
            switch nodeType begin
                case 1: begin //elemento
                    nodeName = TTXmlGetNodeName(doc, curnode);
                    if nodeName == 'nm' then begin
                        list_municipios.AddString(TTXmlGetEncodedNodeText(doc, curnode, 10)) ;
                    end
                    if nodeName == 'err' then begin
                        RecorrerNodoErr(doc, curnode);
                    end
                end   //case elemento             
            end//Switch
        end //else 
        NavigateElement(doc, TTXmlGetFirstChildNode(doc, curnode), level + 1);    
        curnode = TTXmlGetNextNode(doc, curnode);
    end //while
    
    
end
private RecorrerNodoErr(doc as integer, curnode as integer) 
Objects begin
    nodeName as Char
    nodeType as integer
end
begin
    while TRUE do
    begin
        if curnode == 0 then begin
            break;
        end else begin

            nodeType = TTXmlGetNodeType(doc, curnode);
            switch nodeType begin
                case 1: begin //elemento
                    nodeName = TTXmlGetNodeName(doc, curnode);
                    if nodeName == 'des' then begin
                        list_municipios.AddString(TTXmlGetEncodedNodeText(doc, curnode, 10));     
                    end
                end   //case elemento             
            end//Switch
        end //else 
        RecorrerNodoErr(doc, TTXmlGetFirstChildNode(doc, curnode));    
        curnode = TTXmlGetNextNode(doc, curnode);
    end //while
end
    
On Command CmdEditarXml
begin
    OpenFileWithDefaultApp(outFile);
end
main
objects
begin
      of as frm
end
begin
     of.Run();
end

On Open begin
    lb_tablaCharSet.FieldSeparator = "|";
    CargarTabla();
end

On event DblClick control lb_tablaCharSet(e as event)

begin
    lb_tablaCharSet.GetListColumnInto(lb_tablaCharSet.Selected,2 ,varCharset) ;
    Close();
end
Private CargarTabla()
begin
  
lb_tablaCharSet.AddString("NONE|0"); // No char encoding detected */
lb_tablaCharSet.AddString("UTF8|1"); // UTF-8 */
lb_tablaCharSet.AddString("8859_1|10"); //ISO-8859-1 ISO Latin 1 */
lb_tablaCharSet.AddString("8859_2|11"); //ISO-8859-2 ISO Latin 2 */
lb_tablaCharSet.AddString("8859_3|12"); //ISO-8859-3 */
lb_tablaCharSet.AddString("8859_4|13"); //ISO-8859-4 */
lb_tablaCharSet.AddString("8859_5|14"); //ISO-8859-5 */
lb_tablaCharSet.AddString("8859_6|15"); //ISO-8859-6 */
lb_tablaCharSet.AddString("8859_7|16"); //ISO-8859-7 */
lb_tablaCharSet.AddString("8859_8|17"); //ISO-8859-8 */
lb_tablaCharSet.AddString("8859_9|18"); //ISO-8859-9 */
lb_tablaCharSet.AddString("2022_JP|19"); //ISO-2022-JP */
lb_tablaCharSet.AddString("SHIFT_JIS|20"); //Shift_JIS */
lb_tablaCharSet.AddString("EUC_JP|21"); //EUC-JP */
lb_tablaCharSet.AddString("ASCII|222"); // pure ASCII */


    

end
main
objects begin
    of as frm
end
    
begin
    of.Run();
    varCharset.Trace();
    CreaDoc();
    RecorreDoc();
    if Yes("Desea editar el fichero generado") then begin
        Module.OpenFileWithDefaultApp(Module.ProjectDir()+"\fichero2.xml");
    end        
    
end

private function CreaDoc
objects
begin
    doc as integer
    node as integer
    node2 as integer
    node3 as integer
    buffer as Char
end
begin

    doc = TTXmlNewDoc(varCharset);

    node = TTXmlNewNode("nodoprincipal");

    TTXmlDocSetRootElement(doc, node);
    
    TTXmlNewEncodedProp(doc, node, "prop1", "valor de prop1", varCharset);
    
    node2 = TTXmlNewChild(doc, node, "nodo1", NULL);
    TTXmlNewEncodedProp(doc, node2, "prop1", "prop1node1", varCharset);
    TTXmlNewEncodedProp(doc, node2, "prop2", "prop2node1", varCharset);
    TTXmlNewEncodedProp(doc, node2, "prop3", "prop3node1", varCharset);

    node2 = TTXmlNewChild(doc, node, "nodo2", NULL);
    TTXmlNewEncodedProp(doc, node2, "prop1", "prop1node2", varCharset);
    TTXmlNewTextChild(doc, node2, "eltexto", "contenido del texto 1");
    TTXmlNewEncodedProp(doc, node2, "prop2", "prop2node2", varCharset);
    TTXmlNewEncodedProp(doc, node2, "prop3", "prop3node2", varCharset);

    node3 = TTXmlNewChild(doc, node2, "nodo3", NULL);
    TTXmlNewEncodedProp(doc, node3, "prop1", "prop1node3", varCharset);
    TTXmlNewEncodedProp(doc, node3, "prop2", "prop2node3", varCharset);
    TTXmlNewEncodedProp(doc, node3, "prop3", "prop3node3", varCharset);

    node2 = TTXmlNewComment(doc, node, "esto es un comentario");

    node2 = TTXmlNewTextChild(doc, node, "eltexto", "contenido del texto 2");
    
    buffer = TTXmlGetDocBuffer(doc, varCharset);
    buffer.Trace();
    
    DumpBuffer(buffer);
    
    TTXmlSaveFormatFileEnc(doc, Module.ProjectDir()+"\fichero2.xml", varCharset);
    
    TTXmlFreeDoc(doc);
    

end

private function RecorreDoc
objects begin
    doc as integer
end
begin
    doc = TTXmlOpenDoc(Module.ProjectDir()+"\fichero2.xml");
    NavigateTree(doc);
    TTXmlSaveFormatFileEnc(doc, Module.ProjectDir()+"\fichero2.xml", varCharset);
    TTXmlFreeDoc(doc);
end

private function DumpBuffer( buffer as Char)
objects begin
    miStream as Stream
end
begin
    miStream.Open(ProjectDir()+"\fichero_stream.xml",2);
    miStream.Write(buffer);
    miStream.NewLine();
    miStream.Close();
end

private function NavigateElement(doc as integer, node as integer, level as integer)
objects begin
    curnode as integer
    nodeName as Char
    propValue as Char
    nodeType as integer
    nodeText as Char
end
begin

    curnode = node;
    while TRUE do
    begin
        if curnode == 0 then begin
            break;
        end else begin

            nodeType = TTXmlGetNodeType(doc, curnode);
            switch nodeType
            begin
                case 1://elemento
                begin
                    nodeName = TTXmlGetNodeName(doc, curnode);
                    Traza(level.Char + " " + nodeName);                    
                    if nodeName == "eltexto" then
                    begin
                        nodeText = TTXmlGetNodeText(doc, curnode);
                        if nodeText is not null then
                        begin
                            Traza(level.Char + " " + nodeText);
                        end                        
                    end else begin
                        propValue = TTXmlGetEncodedProp(doc, curnode, "prop1", varCharset);
                        if propValue is not null then
                        begin
                            Traza(level.Char + " " + propValue);
                            TTXmlRemoveProperty(doc, curnode, "prop2");
                            TTXmlUpdateEncodedProp(doc, curnode, "prop3", "valor nuevo de prop3", varCharset);
                        end
                    end                    
                end                
                case 3://texto
                begin
                end                
                case 8://comentario
                begin
                    nodeText = TTXmlGetNodeText(doc, curnode);
                    Traza(level.Char + " " + nodeText);
                    TTXmlRemoveNode(doc, curnode);
                end                
                default:
                begin
                end
            end
        end
        NavigateElement(doc, TTXmlGetFirstChildNode(doc, curnode), level + 1);    
        curnode = TTXmlGetNextNode(doc, curnode);
    end
    
    
end

private function NavigateTree(doc as integer)
objects begin
    rootnode as integer
    node as integer
    curnode as integer
end
begin
    rootnode = TTXmlGetDocRootNode(doc);
    curnode = rootnode;
    NavigateElement(doc, curnode, 0);
end

private function Traza (text as char)
begin
end






  main
  objects
  begin
    c as color
    o as open
    d as day
    t as has
  end
  begin
    (foot+hands).Trace;
    Monday.Trace;
    d = Monday;
    d.Trace;
    d = Thuesday;
    d.Trace;

    t.Trace;
    t = foot;
    t.Trace;
    t = t + head;
    t.Trace;
    t = t + hands;
    t.Trace;
  end

main 
    objects
begin
    str as char
    str1 as char(49)
    i as smallint
    l as integer
    dec as decimal
end
begin  
    str1=GetEnv("LANG");
    ("LANG="+str1).Trace;
    PutEnv("LANG", "SPANISH");
    str1=GetEnv("LANG");
    ("LANG="+ str1).Trace;
end

On Click (sender as char)
begin
    switch sender
    begin
    case "normal":
        text1.Etched = 0;
    case "echin":
        text1.Etched = 1; 
    case "echout":
        text1.Etched = 2;
    case "miBold":
        if text1.Bold==TRUE then
            text1.Bold=FALSE;
        else  
            text1.Bold=TRUE; 
    end
end
main
objects begin
    f as MiForm
end
begin
    f.Run; 
end

main 
objects begin
    i as smallint default 0
end
begin
    forever begin
    ++i;
    i.Trace;
    if i>10 then
        break;
    end
end

On Open begin
    customers.Query();
    CargaLista();
    lst2.LoadSelect("select *, date(today), time(now), current from customers");
end

On Command CmdExportarExcel
begin
    idgridCustomer.ExportToExcel(GetEnv("DBTEMP")+"\customerGrid.xlsx");
    lst1.ExportToExcel(GetEnv("DBTEMP")+"\customerList.xlsx");
    lst2.ExportToExcel(GetEnv("DBTEMP")+"\customerListSql.xlsx");
end


On Fetch table customers 
Begin
    If customers.company is null
    then begin
        lblCustomer.Background = Rgb(255, 0, 0);
        lblCustomer.Foreground = Rgb(0, 0, 255);
        lblCustomer.Bold = true;
    End
End

Private CargaLista
    Objects Begin
        c as SqlCursor
        icon as integer default 0
        texto as char
    End
Begin
    lst1.FieldSeparator = "|";
    lst1.SetColumnType(1 ,1);
    c.Prepare("select *, date(today), time(now), current from customers");
    c.Open;
    texto = c.FetchTuple;
    While c.Found
    Do begin
        ++icon;
        lst1.AddString(texto);
        If icon%2 == 0 
        then begin
            lst1.SetRowBackground(icon ,Rgb(255, 255,200));
        End
        Else Begin
            lst1.SetRowBackground(icon ,Rgb(200, 255,255));
        End
        texto = c.FetchTuple;
    end
    c.Close.Free;
End

main
objects
begin
      of as frm
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    of.Run();
    Sql.Disconnect();
end

main
objects
begin   
    st as sqlstatement   
    nominativo as strpayforms
end
begin
    nominativo.payform="NMT";
    nominativo.description="nominativo";   
    Sql.AttachConnection();     
    st.AttachServer(Sql);    
    Sql.Connect("stock");      
         if st.Error >=0 then st.AttachServer(Sql);      
    st.Prepare("insert into payforms values (?,?)"); 
    st.Execute(nominativo);          
    Sql.SelectWindow(NULL,"select * from payforms",0,"PayForms",1);     
    st.Prepare("delete from payforms where payform=?");
    st.Execute(nominativo.payform);
    st.Free;    
    Sql.Disconnect;    
end

On Exit id_pay
begin
    id_invoiced.SetFocus();
end

On command Delete
begin
    Beep(0);
    if(MessageBox("Do you want to delete the current row?","DELETE",36)==6) then
        orders.Delete;
end

On command Update
begin
    if(Yes("Do you want to update the current row?","UPDATE")==TRUE) then
        orders.Update;       
end

On command Close
begin
    if(Ok("Do you want to exit?","CLOSE")==TRUE) then
       Exit(1);      
end
main 
objects begin
    MForm as fr
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");   
    MForm.AttachServer(Sql); 
    if MForm.SqlError < 0 then 
             MForm.SqlErrMsg.Trace;       
    MForm.Run;
    Sql.Disconnect;  
end

main
objects begin
    n n1 as smallint
end
begin
    n = 3;
    n1 = 4;
    n = n ** n1;
    n1.Trace;
    n.Trace;
end

On Open begin
    ctr_bmp.Bitmap = ProjectDir() + "\example.jpg";
end

On event Click control btn_exportImagen(e as event)
begin
   ctr_bmp.ExportImageEx(ProjectDir + "\exporta\ExportImageEx.bmp", "BMP");

   ctr_bmp.ExportImageEx(ProjectDir + "\exporta\ExportImageEx.jpg", "jpg");

end
main
objects
begin
    o as frm
end
begin

    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    o.Run();
    Sql.Disconnect();
end

On Open begin
    
    CargaLista("sql");

end  

Private CargaLista ( pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    listSql.Reset();    
    
    listSql.AlternateBackColor(  Rgb(254, 247, 224), Rgb(207, 207, 207) , 2);
    
    listSql.FieldSeparator = "|";
    
    FormatListColumnChar(1, 30, listSql); //State
    
    FormatListColumnChar(2, 300, listSql); //Customer
    FormatListColumnDate(3, 70, listSql);  //Date

      
    FormatListColumnDate(4, 70, listSql);  //Date

    FormatListColumnChar(5, 20, listSql);  //Status

    
    listSql.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 50,0, listSql); //Cod item
    FormatListColumnChar(8, 150, listSql);  //Descripcion item

    FormatListColumnNumeric(9, 50 ,0, listSql); //Cantidad
    FormatListColumnNumeric(10, 50,0, listSql); //Descuento
    FormatListColumnNumeric(11, 50, 2, listSql); //Precio     
    listSql.SetColumnMask(11,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";
    
    if pType == "sql" then begin
       gNumRows =  listSql.LoadSelect(InstruSelect);
    end
End


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnWidth(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnWidth(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnWidth(pNumColumn,pLengthColumns);
end
On Command CmdEstilosColSql
begin
    CrearEstilos();

end

On Command CmdEstilosCeldasSql
begin
    EstilosCeldas();
end
Private CrearEstilos()
begin
    cellStyleIdx_12 = listSql.CreateListCellStyle("Calibri;Size=9", Module.Rgb(255,255,255), Module.Rgb(0,0,0), 0);
    cellStyleIdx_13 = listSql.CreateListCellStyle("Calibri;Size=9;bold", Module.Rgb(255,0,0), Module.Rgb(255,128,128), 0);
    listSql.SetListColumnStyle(1 ,cellStyleIdx_12);
    listSql.SetListColumnStyle(2 ,cellStyleIdx_13);
end

Private EstilosCeldas()
Objects begin
    cellStyleIdx_16 as integer
end
begin
    cellStyleIdx_16 = listSql.CreateListCellStyle("Calibri;italic;Size=9", Module.Rgb(255,255,0), Module.Rgb(0,0,255), 2);
    listSql.SetListCellStyle(3,3,cellStyleIdx_16);
end
Private ExportarListas(ConStilo as boolean)
Objects begin
    lChName as char
    i as integer
    lInWidth as integer
end
begin
    lChName = listSql.Name();
    listSql.AllowExportListCellStyles(ConStilo);
    listSql.ExportToPDFEx(ProjectDir()+"\"+lChName+"_ExportToPdfEx.pdf" ,-1,-1); 
    OpenFileWithDefaultApp(ProjectDir()+"\"+lChName+"_ExportToPdfEx.pdf");
    
    lInWidth = 0;
    for i = 1 to listSql.NumColumns do begin
        if listSql.IsColumnVisible(i) then 
            lInWidth += listSql.GetColumnWidth(i);
    end
    
    listSql.ExportToPDFEx(ProjectDir()+"\"+lChName+"_ExportToPdfEx_2.pdf" ,lInWidth +20 ,794); //Forzamos tamaño. Se añaden pixeles de margen derecho.
    OpenFileWithDefaultApp(ProjectDir()+"\"+lChName+"_ExportToPdfEx_2.pdf");    
end


On Command CmdResetStyleSql
Objects begin
    i as smallint
    nRow as integer
end
begin
    for nRow = 1 to gNumRows do begin
        for i = 1 to 11 do begin 
            if nRow == 1 then listSql.ResetListColumnStyles(i);
            listSql.ResetListCellStyles(nRow, i);
        end    
    end
    
end



On event Click control btn_export_ConEstilo(e as event)
begin
    CrearEstilos();
    EstilosCeldas();
    ExportarListas(TRUE);
end

On event Click control btn_export_SinEstilo(e as event)
begin
    SendCommand("CmdResetStyleSql");
    ExportarListas(FALSE);
end


main
objects
begin
      of as frm
      i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("DRAWTREELISTLINES", "TRUE");

    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

On Open begin
    CargaLista(lstStrings, "strings");
    CargaLista(listSql, "sql");

end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
   
    
    pList.IconFile = "listaiconosgif";



    
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 15, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 15, pList);  //Status

    
    FormatListColumnChar(6, 15, pList);  //Descripcion item

    FormatListColumnNumeric(7, 20, 2, pList); //Precio     
    pList.SetColumnMask(7,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " items.description,  price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer";

    

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
    end // if
    
    if pType == "sql" then begin
       gNumRows =  pList.LoadSelect(InstruSelect);
    end
    FShowMultiColumnGroupDlg(pList);
    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , 
                    description, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|" +  description +"|"+ price.Using(12) ;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

On Command CmdAgruparAgregadosSql
begin
    FShowMultiColumnGroupDlg(listSql);
end
On Command CmdAgruparAgregadosString 

begin
    
    FShowMultiColumnGroupDlg(lstStrings);
end


Private FShowMultiColumnGroupDlg(pList as SimpleFormControl)
begin

    pList.ShowListAsMultiColumnGroup("GROUPBY:1,2;AGGREGATES:7=SUM;SHOWDETAILLINES:YES;",
                                    0 , 0 , FALSE,
                                     "Suma:" 
                                    );
end


On Command CmdExportListStrings
begin   
    lstStrings.ExportToExcel((GetEnv("DBTEMP") +"\lstStringsExcelXLSX.xlsx"));
end

On Command CmdExportListSql
begin
    listSql.ExportToExcel((GetEnv("DBTEMP") +"\listSqlExcelXLSX.xlsx"));
end

On Command CmdPonColor
begin
    FPonColor(lstStrings);
    FPonColor(listSql);
end

Private FPonColor(pList as SimpleFormControl)
begin
    pList.SetListColorByLevel(1 ,Rgb(147,201,255)); //Asigna los colores de Fondo
    pList.SetListColorByLevel(2 ,Rgb(255,255,210));
    pList.EnableListColorByLevel(True); //Permite la visualizacion de los colores asignados con el método SetListColorByLevel
end
main
objects
begin
    of as frm
    i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

On Open
objects begin
    cosmosdir as char
    s1 as char
end
begin
    cosmosdir=CosmosDir;
    s1= cosmosdir +"\etc\cosmos.ini";
    text1.Text= s1;
    list1.ListFile = s1;

    mpanel.Text="Write the name of the file that you want to display and click on the button";
end

On Click butfile
objects begin
    s as char
end
begin
    s = text1.Text;
    list1.ListFile = s;
end

main
objects
begin
    f as MiForm
end
begin
    f.Run;
end


On Open 
objects begin
    i as smallint
end
begin
for i = 1 to 4 do 
  begin
    mlist.AddString("a" + i);
    mlist.AddString("b" + i);
  end
end

On Click bfind
objects begin
    s as char
    i as smallint
end
begin
    s=medit.Text; 
    i=mlist.FindString(s);  
    i.Trace;
    if(i>0)then
        s="The element " + i + " has been found " + mlist.GetListText(i);
    else
        s="There are not elements";
    s.Trace;
end

On Click bfexact
objects begin
    s as char
    i as smallint
end
begin
    s=medit.Text; 
    i=mlist.FindStringExact(s);  
    i.Trace;
    if(i>0)then
        s="The element " + i + " has been found " + mlist.GetListText(i);
    else
        s="There are not elements";
    s.Trace;
end
main
objects begin
    Mform as ff
end
begin
    Mform.Run; 
end


On Open 
objects begin
    i as smallint
end
begin
for i = 1 to 4 do 
  begin
    mlist.AddString("a" + i);
    mlist.AddString("b" + i);
  end
end

On Click bfind
objects begin
    s as char
    i as smallint
end
begin
    s=medit.Text; 
    i=mlist.FindString(s);  
    i.Trace;
    if(i>0)then
        s="The element " + i + " has been found " + i + " " + mlist.GetListText(i);
    else
        s="There are not elements";
    s.Trace;
end

On Click bfexact
objects begin
s as char
i as smallint
end
begin
    s=medit.Text; 
    i=mlist.FindStringExact(s);  
    i.Trace;
    if(i>0)then
        s="The element " + i + " has been found " + mlist.GetListText(i);
    else
        s="There are not elements";
    s.Trace;
end
main
objects begin
    Mform as ff
end
begin
    Mform.Run; 
end

on Click mboton
objects begin
    i as integer
end
begin
    i= mdrop.FindCol(1,"b3");
    ("b3 : " +i + " element").Trace;
end
main 
objects begin
mifr as fr 
end
begin
mifr.Run;
end

public dll "cossignpdf" CosSignPDFCreateSigner() return integer
public dll "cossignpdf" CosSignPDFSetProperty(signerId as integer, propertyName as char, propertyValue as char) return integer
public dll "cossignpdf" CosSignPDFDoSign(signerId as integer) return integer
public dll "cossignpdf" CosSignPDFFreeSigner(signerId as integer) return integer
public dll "cossignpdf" CosSignPDFSetTraceFile(outFile as char)

main begin
    
    firmaKeystoreFichero();
    firmaAlmacenWindows();
    firmaKeystoreFicheroUnico();
end

public function firmaKeystoreFichero()
objects begin
    signerId as integer
    fichPDF fichPNG outputFolder as char
    i as integer
end
begin
    
    fichPDF = ProjectDir() + "\input\Prueba firma PDF.pdf";
    fichPDF = ProjectDir() + "\input\*.pdf";
    fichPNG = ProjectDir() + "\example.jpg";
    outputFolder = ProjectDir() + "\output";
    
    CosSignPDFSetTraceFile("c:\tmp\salidatraza.txt");
    signerId = CosSignPDFCreateSigner();
    
    if signerId != -1 then begin
        CosSignPDFSetProperty(signerId, "KEYSTOREFILE", ProjectDir() + "\keystore.jks" );
        CosSignPDFSetProperty(signerId, "CERTTYPE", "JKS");
        CosSignPDFSetProperty(signerId, "KEYSTOREPASSWD", "contraseña_del_almacen_de_certificados");
        CosSignPDFSetProperty(signerId, "KEYPASSWD", "contraseña_del_certificado");
        CosSignPDFSetProperty(signerId, "OUTFILESUFFIX", "_sufijo");
        CosSignPDFSetProperty(signerId, "PDFFILENAME", fichPDF);
        CosSignPDFSetProperty(signerId, "OUTPUTFOLDER", outputFolder);
        CosSignPDFSetProperty(signerId, "VISIBLESIGNATURE", "TRUE");
        CosSignPDFSetProperty(signerId, "IMAGEPATH", fichPNG);
        CosSignPDFSetProperty(signerId, "UPPERRIGHTX", "395");
        CosSignPDFSetProperty(signerId, "UPPERRIGHTY", "150");
        CosSignPDFSetProperty(signerId, "LOWERLEFTX", "200");
        CosSignPDFSetProperty(signerId, "LOWERLEFTY", "50");
        CosSignPDFSetProperty(signerId, "PAGENUMBER", "1");
        CosSignPDFSetProperty(signerId, "KEYINDEX", "0");
    
        CosSignPDFDoSign(signerId);
        CosSignPDFFreeSigner(signerId);
        
    end else begin
        "Compruebe que la licencia está registrada".Trace();    
    end
    
end


public function firmaKeystoreFicheroUnico()
objects begin
    signerId as integer
    fichPDF fichPNG outputFolder as char
    i as integer
end
begin
    
    fichPDF = ProjectDir() + "\input\Prueba firma PDF.pdf";
    fichPNG = ProjectDir() + "\example.jpg";
    outputFolder = ProjectDir() + "\output";
    
    signerId = CosSignPDFCreateSigner();
    
    if signerId != -1 then begin
    
        CosSignPDFSetProperty(signerId, "KEYSTOREFILE", ProjectDir() + "\almacen_un_solo_certificado.p12" );
        CosSignPDFSetProperty(signerId, "KEYSTOREPASSWD", "passwd_del_almacen");
        CosSignPDFSetProperty(signerId, "OUTFILESUFFIX", "_sufijo");
        CosSignPDFSetProperty(signerId, "PDFFILENAME", fichPDF);
        CosSignPDFSetProperty(signerId, "OUTPUTFOLDER", outputFolder);
        CosSignPDFSetProperty(signerId, "VISIBLESIGNATURE", "TRUE");
        CosSignPDFSetProperty(signerId, "IMAGEPATH", fichPNG);
        CosSignPDFSetProperty(signerId, "UPPERRIGHTX", "395");
        CosSignPDFSetProperty(signerId, "UPPERRIGHTY", "150");
        CosSignPDFSetProperty(signerId, "LOWERLEFTX", "200");
        CosSignPDFSetProperty(signerId, "LOWERLEFTY", "50");
        CosSignPDFSetProperty(signerId, "PAGENUMBER", "1");
        CosSignPDFSetProperty(signerId, "KEYINDEX", "0");
    
        CosSignPDFDoSign(signerId);
        CosSignPDFFreeSigner(signerId);

    end else begin
        "Compruebe que la licencia está registrada".Trace();
    end
   

end

public function firmaAlmacenWindows()
objects begin
    signerId as integer
    fichPDF fichPNG outputFolder as char
    i as integer
end
begin
    
    fichPDF = ProjectDir() + "\input\Prueba firma PDF.pdf";
    fichPNG = ProjectDir() + "\example.jpg";
    outputFolder = ProjectDir() + "\output";

    signerId = CosSignPDFCreateSigner();
    
    if signerId != -1 then begin
        CosSignPDFSetProperty(signerId, "CERTTYPE", "WINDOWS-MY");
    
        CosSignPDFSetProperty(signerId, "OUTFILESUFFIX", "_sufijo");
        CosSignPDFSetProperty(signerId, "PDFFILENAME", fichPDF);
        CosSignPDFSetProperty(signerId, "OUTPUTFOLDER", outputFolder);
        
        CosSignPDFSetProperty(signerId, "VISIBLESIGNATURE", "TRUE");
        CosSignPDFSetProperty(signerId, "IMAGEPATH", fichPNG);
        CosSignPDFSetProperty(signerId, "UPPERRIGHTX", "395");
        CosSignPDFSetProperty(signerId, "UPPERRIGHTY", "150");
        CosSignPDFSetProperty(signerId, "LOWERLEFTX", "200");
        CosSignPDFSetProperty(signerId, "LOWERLEFTY", "50");
        CosSignPDFSetProperty(signerId, "PAGENUMBER", "1");
    
        CosSignPDFDoSign(signerId).Trace();
        CosSignPDFFreeSigner(signerId);
    end else begin
        "Compruebe que la licencia está registrada".Trace();
    end
    
end

public dll "cossignfile.dll" CosSignFileCreateSigner() return integer
public dll "cossignfile.dll" CosSignFileFreeSigner(signer as integer)
public dll "cossignfile.dll" CosSignFileSignFacturaE(
    signer as integer,
    xmlPath as char, 
    xsigPath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char) return integer

public dll "cossignfile.dll" CosSignFileSignPDF(
    signer as integer,
    inPDFPath as char, 
    outPDFPath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char) return integer

public dll "cossignfile.dll" CosSignFileSignPAdES(
    signer as integer,
    inFilePath as char, 
    outFilePath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char,
    algorithm as char,
    format as char,
    mode as char) return integer

public dll "cossignfile.dll" CosSignFileSignXAdES(
    signer as integer,
    inFilePath as char, 
    outFilePath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char,
    algorithm as char,
    format as char,
    mode as char) return integer

public dll "cossignfile.dll" CosSignFileSignCAdES(
    signer as integer,
    inFilePath as char, 
    outFilePath as char, 
    keystorePath as char,
    keystoreFormat as char,
    keyStorePasswd as char,
    alias as char,
    aliasPasswd as char,
    algorithm as char,
    format as char,
    mode as char) return integer

public dll "cossignfile.dll"  CosSignFileGetKeystoreFormats(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileGetSignAlgorithms(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileGetPAdESSignFormats(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileGetCAdESSignFormats(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileGetXAdESSignFormats(signer as integer) return char
public dll "cossignfile.dll"  CosSignFileGetSignModes(signer as integer) return char


main
objects
begin
end
begin
    firmaFacturaE_P12();
    firmaPDF_P12();
    firmaPAdES_P12();
    firmaXAdES_P12();
    firmaCAdES_P12();
    firmaGetKeystoreFormats();
    firmaGetSignAlgorithms();
    firmaGetPAdESSignFormats();
    firmaGetCAdESSignFormats();
    firmaGetXAdESSignFormats();
    firmaGetSignModes();
end

private function firmaFacturaE_P12
objects begin
    signer as integer
    xmlPath as char
    xsigPath as char 
    p12Path as char
    keyStorePasswd as char
    alias as char
    aliasPasswd as char
    
    
end
begin
    
    xmlPath = ProjectDir() + "\firmaXML\factura_electronica.xml";
    xsigPath = ProjectDir() + "\firmaXML\out\factura_electronica.xsig";
    p12Path = ProjectDir() + "\firmaXML\p12depruebas.p12"; //Almacén de firmas en formato P12
    
    xmlPath.Replace("\", "/");
    xsigPath.Replace("\", "/");
    p12Path.Replace("\", "/");
   
    keyStorePasswd = "passwdAlmacen";
    alias = "alias de firma dentro del almacen";
    aliasPasswd = "passwdAlias";
    
    signer = CosSignFileCreateSigner();
    CosSignFileSignFacturaE(signer, xmlPath, xsigPath , p12Path, "pkcs12", keyStorePasswd, alias, aliasPasswd).Trace();
    CosSignFileFreeSigner(signer);
end

private function firmaPDF_P12
objects begin
    signer as integer
    inPDFPath as char
    outPDFPath as char 
    p12Path as char
    keyStorePasswd as char
    alias as char
    aliasPasswd as char
    
end
begin
    
    inPDFPath = ProjectDir() + "\firmaXML\fichero_pdf.pdf";
    outPDFPath = ProjectDir() + "\firmaXML\out\fichero_pdf_firmado.pdf";
    p12Path = ProjectDir() + "\firmaXML\p12depruebas.p12"; //almacen de firmas en formato P12
    
    inPDFPath.Replace("\", "/");
    outPDFPath.Replace("\", "/");
    p12Path.Replace("\", "/");
    
    keyStorePasswd = "passwdAlmacen";
    alias = "alias de firma dentro del almacen";
    aliasPasswd = "passwdAlias";
    
    signer = CosSignFileCreateSigner();
    CosSignFileSignPDF(signer, inPDFPath, outPDFPath , p12Path, "pkcs12", keyStorePasswd, alias, aliasPasswd);
    CosSignFileFreeSigner(signer);
end

private function firmaPAdES_P12
objects begin
    signer as integer
    inFilePath as char
    outFilePath as char 
    p12Path as char
    keyStorePasswd as char
    alias as char
    aliasPasswd as char
    algorithm as char
    format as char
    mode as char
end
begin
    
    inFilePath = ProjectDir() + "\firmaXML\fichero_pdf.pdf";
    outFilePath = ProjectDir() + "\firmaXML\out\fichero_pdf_firmado_PAdES.pdf";
    p12Path = ProjectDir() + "\firmaXML\p12depruebas.p12"; //almacen de firmas en formato P12
    
    inFilePath.Replace("\", "/");
    outFilePath.Replace("\", "/");
    p12Path.Replace("\", "/");
    
    keyStorePasswd = "passwdAlmacen";
    alias = "alias de firma dentro del almacen";
    aliasPasswd = "passwdAlias";
    
    format = "PAdES"; //CosSignFileGetPAdESSignFormats
    mode = "implicit"; //CosSignFileGetSignModes
    algorithm = "SHA512withRSA"; //CosSignFileGetSignAlgorithms
    
    signer = CosSignFileCreateSigner();
    CosSignFileSignPAdES(signer, inFilePath, outFilePath , p12Path, "pkcs12", keyStorePasswd, alias, aliasPasswd, algorithm, format, mode);
    CosSignFileFreeSigner(signer);
end

private function firmaXAdES_P12
objects begin
    signer as integer
    inFilePath as char
    outFilePath as char 
    p12Path as char
    keyStorePasswd as char
    alias as char
    aliasPasswd as char
    algorithm as char
    format as char
    mode as char
end
begin
    
    inFilePath = ProjectDir() + "\firmaXML\factura_electronica.xml";
    outFilePath = ProjectDir() + "\firmaXML\out\factura_electronica_XAdES.xsig";
    p12Path = ProjectDir() + "\firmaXML\p12depruebas.p12"; //almacen de firmas en formato P12
    
    inFilePath.Replace("\", "/");
    outFilePath.Replace("\", "/");
    p12Path.Replace("\", "/");
    
    keyStorePasswd = "passwdAlmacen";
    alias = "alias de firma dentro del almacen";
    aliasPasswd = "passwdAlias";
    
    format = "XAdES Detached"; //CosSignFileGetXAdESSignFormats
    mode = "implicit";//CosSignFileGetSignModes
    algorithm = "SHA512withRSA"; //CosSignFileGetSignAlgorithms

    signer = CosSignFileCreateSigner();
    CosSignFileSignXAdES(signer, inFilePath, outFilePath , p12Path, "pkcs12", keyStorePasswd, alias, aliasPasswd, algorithm, format, mode);
    CosSignFileFreeSigner(signer);
end

private function firmaCAdES_P12
objects begin
    signer as integer
    inFilePath as char
    outFilePath as char 
    p12Path as char
    keyStorePasswd as char
    alias as char
    aliasPasswd as char
    algorithm as char
    format as char
    mode as char
end
begin
    
    inFilePath = ProjectDir() + "\firmaXML\factura_electronica.xml";
    outFilePath = ProjectDir() + "\firmaXML\out\factura_electronica_CAdES.xsig";
    p12Path = ProjectDir() + "\firmaXML\p12depruebas.p12"; //almacen de firmas en formato P12
    
    inFilePath.Replace("\", "/");
    outFilePath.Replace("\", "/");
    p12Path.Replace("\", "/");
    
    keyStorePasswd = "passwdAlmacen";
    alias = "alias de firma dentro del almacen";
    aliasPasswd = "passwdAlias";
    
    format = "XAdES Detached"; //CosSignFileGetXAdESSignFormats
    mode = "implicit";//CosSignFileGetSignModes
    algorithm = "SHA512withRSA"; //CosSignFileGetSignAlgorithms

    signer = CosSignFileCreateSigner();
    CosSignFileSignCAdES(signer, inFilePath, outFilePath , p12Path, "pkcs12", keyStorePasswd, alias, aliasPasswd, algorithm, format, mode);
    CosSignFileFreeSigner(signer);
end

private function firmaGetKeystoreFormats
objects begin
    signer as integer
    retStr as char
end
begin
    signer = CosSignFileCreateSigner();
    retStr = CosSignFileGetKeystoreFormats(signer);
    retStr.Trace;
    CosSignFileFreeSigner(signer);
end

private function firmaGetSignAlgorithms
objects begin
    signer as integer
    retStr as char
end
begin
    signer = CosSignFileCreateSigner();
    retStr = CosSignFileGetSignAlgorithms(signer);
    retStr.Trace;
    CosSignFileFreeSigner(signer);
end

private function firmaGetPAdESSignFormats
objects begin
    signer as integer
    retStr as char
end
begin
    signer = CosSignFileCreateSigner();
    retStr = CosSignFileGetPAdESSignFormats(signer);
    retStr.Trace;
    CosSignFileFreeSigner(signer);
end

private function firmaGetCAdESSignFormats
objects begin
    signer as integer
    retStr as char
end
begin
    signer = CosSignFileCreateSigner();
    retStr = CosSignFileGetCAdESSignFormats(signer);
    retStr.Trace;
    CosSignFileFreeSigner(signer);
end

private function firmaGetXAdESSignFormats
objects begin
    signer as integer
    retStr as char
end
begin
    signer = CosSignFileCreateSigner();
    retStr = CosSignFileGetXAdESSignFormats(signer);
    retStr.Trace;
    CosSignFileFreeSigner(signer);
end

private function firmaGetSignModes
objects begin
    signer as integer
    retStr as char
end
begin
    signer = CosSignFileCreateSigner();
    retStr = CosSignFileGetSignModes(signer);
    retStr.Trace;
    CosSignFileFreeSigner(signer);
end


On Open
objects begin
   cellStyleIdx_1 cellStyleIdx_2 as integer 
end
begin
    lst.SetColumnChars(1,20);
    lst.SetColumnChars(2,20);
    lst.SetColumnChars(3,30);
    lst.SetColumnChars(4,15);
    cellStyleIdx_1 = lst.CreateListCellStyle("Times New Roman;Size=10", Module.Rgb(255,0,0), -1,2);
    cellStyleIdx_2 = lst.CreateListCellStyle("Times New Roman;Size=10", Module.Rgb(0,0,255), -1,2);
    DoSetSkin(lst);
    Sql.SqlExec("select ( price) ingresos, ( price * 1.34) gastos from lines "+
                " into temp balance");
    lst.LoadSelect("select ingresos, gastos, ABS(ingresos - gastos), (ingresos -gastos) from balance");
    lst.SetListColumnConditionalStyle(3,cellStyleIdx_2 ,"$3$ > 0");
    lst.SetListColumnConditionalStyle(4,cellStyleIdx_1 ,"$4$ < 0");
    lst.SetListColumnConditionalStyle(4,cellStyleIdx_2 ,"$4$ > 0");
end
private DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    skindir = ProjectDir()+"\skin\blue";
    pList.ListSetSkin(skindir + "\miskin.txt");        
    
end
On Close begin
    Sql.SqlExec("drop table balance");
end
{
    Esta función retorna una fecha truncada a la unidad especificada por el formato.
}
main
objects
begin
    ofrm as frm
end
begin
    PutEnv("DBPATH",ProjectDir());
    Sql.Connect("stock");
    ofrm.Run();
    Sql.Disconnect();
end

On Open 
Objects begin
   cellStyleIdx_1 cellStyleIdx_2 cellStyleIdx_3 as integer
end
begin
    lst.FieldSeparator = "|";
    lst.SetColumnChars(1,50);
    lst.LoadSelect("SELECT company,"+
                    " DECODE(state,'VA', 'Virginia',"+
                    " 'MA', 'Massachusetts'," +
                    " 'Other')" +
                " FROM customers");
    lst.AlternateBackColor( Rgb(255, 255, 210) , Rgb(255, 255, 255), 2);
    cellStyleIdx_1 = lst.CreateListCellStyle("Times New Roman;Size=10", Module.Rgb(0,0,255), -1,0);
    cellStyleIdx_2 = lst.CreateListCellStyle("Times New Roman;Size=10", Module.Rgb(0,255,0), -1,0);
    cellStyleIdx_3 = lst.CreateListCellStyle("Times New Roman;Size=10", Module.Rgb(255,0,0), -1,0);
    lst.SetListColumnConditionalStyle(2, cellStyleIdx_1, "equalstringnocase($2$,Virginia)");        
    lst.SetListColumnConditionalStyle(2, cellStyleIdx_2, "equalstringnocase($2$,Massachusetts)");     
    lst.SetListColumnConditionalStyle(2, cellStyleIdx_3, "equalstringnocase($2$,Other)");     
    DoSetSkin(lst);
end
private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    skindir = ProjectDir()+"\skin\orange";
    pList.ListSetSkin(skindir + "\solocabecera.txt");        
    
end
{Esta funcion devuelve todos los registros de la tabla clientes cuyas provincia sea Alava, Barcelona, Madrid, Otra provincia.
En la intrucción select no se mostraá el código si no la descripción}

main
objects
begin
    ofrm as frm
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    ofrm.Run()                ;
    Sql.Disconnect();
end

On Open 
Objects begin
    cellStyleIdx_1 as integer
end
begin
    
    cellStyleIdx_1 = lst1.CreateListCellStyle("Times New Roman;italic;Size=9", Module.Rgb(0,0,255), -1,0);
    lst1.SetListCellStyle(1,2,cellStyleIdx_1);     
    DoSetSkin(lst);
    DoSetSkin(lst1);
end
private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    skindir = ProjectDir()+"\skin\orange";
    pList.ListSetSkin(skindir + "\solocabecera.txt");        
    
end


main
objects
begin
    ofrm as frm
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    
    Sql.SqlExec("update customers set company = null where customer = 1");
    { NVL. Compara una expresión con NULL si esto es así en lugar de retornar NULL retorno la expresión que se pase como segundo parámetro}   
    
    ofrm.txt_1.Text = "SELECT customer,"+
                    " company "+
                    " FROM customers order by customer";
    ofrm.txt_2.Text = "SELECT customer,"+
                    " NVL(company,'FALTA NOMBRE EMPRESA') Company "+
                    " FROM customers order by customer";
    ofrm.lst.LoadSelect("SELECT customer,"+
                    " company"+
                    " FROM customers order by customer");
                    
    ofrm.lst1.LoadSelect("SELECT customer,"+
                    " NVL(company,'FALTA NOMBRE EMPRESA') Company "+
                    " FROM customers order by customer");

     ofrm.Run();
    Sql.SqlExec("update customers set company = 'COMPEX INC.' where customer = 1");                
    Sql.Disconnect();
end

On Open
begin
    lst.LoadSelect("select SIGN(121354),  SIGN(-121354),SIGN(0) ,SIGN(-121354.12365) from systables where rowid = 1");
end
main
objects
begin
    ofrm as frm
end
begin
    PutEnv("DBPATH",ProjectDir());
    Sql.Connect("stock");
    ofrm.Run();
    Sql.Disconnect();
end

On Open 
begin
    DoSetSkin(lst);
    LoadFormatList();
    LoadList(false);
end

private function CreaQuery(isToday as boolean)
objects begin
    query as char
    tab as char
    i siz as integer
    str strRet as char    
    lastItem as Boolean default false
    miSqlStmt as SqlStatement
    colChar as char
    last_exit_date as date
    strFormat as char
end
begin
    Module.ErrorLevel(0);    
    Sql.SqlExec("drop table tmp1");
    Module.ErrorLevel(3);
    lbl_query.Text =  null;
    
    Sql.SqlExec(" create temp table tmp1 " + 
                " (valDate date Label 'Fecha', " + 
                " valQuery char(256) Label 'TRUNC', " +
                " valFormat char(30) Label 'Formato' , " + 
                " valRes char (256) Label 'Resultado' , " +
                " valDescription char(256) Label 'Descripción')");
    miSqlStmt.Prepare("insert into tmp1 values (?,?,?,?,?)");
    
    if isToday then begin
        tab = " FROM systables where rowid = 1 ";
    end else begin
        tab = " FROM items limit 1 ";
    end
    strRet = " ";
    
    siz = oFormatArray.Size();
    for i = 1 to siz do
    begin
        if isToday then begin
            str = "SELECT date(today) ,  " ;
            strFormat = "TRUNC ( DATE ( TODAY ), '" + oFormatArray[i].formatCode + "'";
        end else begin
            str = "SELECT last_exit_date,  " ;
            strFormat = "TRUNC( last_exit_date , '" + oFormatArray[i].formatCode + "'";
        end
            strFormat = strFormat +  ") ";


        str = str + strFormat;
        strRet = strRet + str + tab;
        
        Sql.Select( strRet, last_exit_date, colChar);

        miSqlStmt.Execute(last_exit_date, strFormat, oFormatArray[i].formatCode, colChar,  oFormatArray[i].formatDescription);
        
        
        strRet = null;
        strFormat = null;
        str = null;
    end
    
    strRet = "select * from tmp1";
    lst.LoadSelect(strRet);
    
    lst.Selected = 1;
    SetLabelValue();
end

private function LoadList (isToday as boolean)
objects begin
    query as char
end
begin
    lst.Reset();
    CreaQuery(isToday);
    lst.SetColumnChars(1, 15);
    lst.SetColumnChars(2, 35);
    lst.SetColumnChars(4, 30);
    lst.SetLockColumns(1);
    lst.AlternateBackColor(Module.Rgb(214, 254, 254), Module.Rgb(255,255, 255), 2);
    Self.Maximize();
end

private Function AddFormat(formatCode as Char,  formatDescription as char, resize as boolean default true)
objects begin
    siz as integer
end
begin
    siz = oFormatArray.Size();
    if (resize) then begin
        ++siz;
        oFormatArray.Resize(siz);
    end
    
    oFormatArray[siz].formatCode = formatCode;
    oFormatArray[siz].formatDescription = formatDescription;
end

private Function LoadFormatList()
begin
    
    AddFormat('SYYYY', "Retorna 1 de enero del año de la fecha indicada.", FALSE);
    AddFormat('YYYY', "Retorna 1 de enero del año de la fecha indicada.");
    AddFormat('YEAR', "Retorna 1 de enero del año de la fecha indicada.");
    AddFormat('SYEAR', "Retorna 1 de enero del año de la fecha indicada.");
    AddFormat('YYY', "Retorna 1 de enero del año de la fecha indicada.");
    AddFormat('YY', "Retorna 1 de enero del año de la fecha indicada.");
    AddFormat('Y', "Retorna 1 de enero del año de la fecha indicada.");
    

    AddFormat('IYYYY', "Retorna 1 de enero del año de la fecha indicada.");
    AddFormat('IY', "Retorna al primer día del año ISO de la fecha indicada. Será el lunes anterior al 4 de enero del año indicado.");
    AddFormat('I', "Retorna al primer día del año ISO de la fecha indicada. Será el lunes anterior al 4 de enero del año indicado.");


    AddFormat('MONTH', "Retorna el primer día del mes (día 1).");
    AddFormat('MON',  "Retorna el primer día del mes (día 1).");
    AddFormat('MM',  "Retorna el primer día del mes (día 1).");
    AddFormat('RM', "Retorna el primer día del mes (día 1).");
    
    AddFormat('WW', "Redondea al mismo día de la semana que el primer día del año. Por ejemplo, si el primer día del año fue un miércoles, retornará el miércoles anterior a la fecha indicada.");
    AddFormat('W', "Devuelve el día de la semana que coincida con el primer día del mes. ");
    AddFormat('IW', "Semana ISO. Devuelve la fecha del día de la semana igual al primer día de la semana del año ISO, es decir, al lunes anterior de la semana a la que pertenece la fecha indicada.");
    
    
    AddFormat('DDD', "Retorna el mismo día.");
    AddFormat('DD', "Retorna el mismo día.");
    AddFormat('DAY', "Retorna al lunes de la semana a la que pertenece la fecha indicada. Igual que IW.");
    AddFormat('DY', "Retorna al lunes de la semana a la que pertenece la fecha indicada. Igual que IW.");
    AddFormat('D', "Retorna al lunes de la semana a la que pertenece la fecha indicada. Igual que IW.");
    
end


On event Click control chk_today(e as event)
begin
    LoadList (chk_today.Checked);
end

On event SelChange control lst(e as event)
begin
    SetLabelValue();
end

private Function SetLabelValue
objects begin
    colval as char
    queryVal as char
end
begin
    lst.GetListColumnInto(lst.Selected, 2, colval);
    if chk_today.Checked then begin
        queryVal = "Select  date(today)," + colval + " from systables where rowid = 1";
        lbl_query.Text = queryVal;
    end else begin    
        queryVal = "Select  last_exit_date," + colval + " from items limit 1";
        lbl_query.Text = queryVal;
    end
end
private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    skindir = ProjectDir()+"\skin\green";
    pList.ListSetSkin(skindir + "\miskin.txt");        
    
end
main
objects
begin
    lDtFecha as date
    c1 as SqlCursor
    lChlinea as char
    s as Stream
    ofrm as frm
end
begin
    PutEnv("DRAWLISTELLIPSIS","TRUE");
    PutEnv("DBPATH",ProjectDir());
    Sql.Connect("stock");
    ofrm.Run();
    Sql.Disconnect();
end

On Open 
begin
    LoadFormatList();
    LoadList(false);
    DoSetSkin(lst);
end

private function CreaQuery(isToday as boolean)
objects begin
    query as char
    tab as char
    i siz as integer
    str strRet as char    
    lastItem as Boolean default false
    miSqlStmt as SqlStatement
    colChar as char
    last_exit_date as date
    strFormat as char
end
begin
    Module.ErrorLevel(0);    
    Sql.SqlExec("drop table tmp1");
    Module.ErrorLevel(3);
    lbl_query.Text =  null;
    
    Sql.SqlExec(" create temp table tmp1 " + 
                " (valDate date Label 'Fecha', " + 
                " valQuery char(256) Label 'TO_CHAR', " +
                " valFormat char(30) Label 'Formato' , " + 
                " valLang char(30) Label 'Idioma' , " + 
                " valRes char (256) Label 'Resultado' , " +
                " valDescription char(256) Label 'Descripción')");
    miSqlStmt.Prepare("insert into tmp1 values (?,?,?,?,?,?)");
    
    if isToday then begin
        tab = " FROM systables where rowid = 1 ";
    end else begin
        tab = " FROM items limit 1 ";
    end
    strRet = " ";
    
    siz = oFormatArray.Size();
    for i = 1 to siz do
    begin
        if isToday then begin
            str = "SELECT date(today) ,  " ;
            strFormat = "TO_CHAR ( DATE ( TODAY ), '" + oFormatArray[i].formatCode + "'";
        end else begin
            str = "SELECT last_exit_date,  " ;
            strFormat = "TO_CHAR( last_exit_date , '" + oFormatArray[i].formatCode + "'";
        end
        if oFormatArray[i].formatLang is not null then begin
            strFormat = strFormat + ", '" + oFormatArray[i].formatLang + "' )";
        end else begin
            strFormat = strFormat +  ") ";
        end
        
        str = str + strFormat;
        strRet = strRet + str + tab;
        
        Sql.Select( strRet, last_exit_date, colChar);

        miSqlStmt.Execute(last_exit_date, strFormat, oFormatArray[i].formatCode, oFormatArray[i].formatLang, colChar,  oFormatArray[i].formatDescription);
        
        
        strRet = null;
        strFormat = null;
        str = null;
    end
    
    strRet = "select * from tmp1";
    lst.LoadSelect(strRet);
    
    lst.Selected = 1;
    SetLabelValue();
end

private function LoadList (isToday as boolean)
objects begin
    query as char
end
begin
    lst.Reset();
    CreaQuery(isToday);
    lst.SetColumnChars(1, 15);
    lst.SetColumnChars(2, 75);
    lst.SetColumnChars(3, 15); //Formato
    lst.SetColumnChars(4, 35);
    lst.SetColumnChars(5, 35);
    lst.SetLockColumns(1);
    lst.AlternateBackColor(Module.Rgb(214, 254, 254), Module.Rgb(255,255, 255), 2);
    Self.Maximize();
end

private Function AddFormat(formatCode as Char, formatLabel as Char, formatLang as char, formatDescription as char, resize as boolean default true)
objects begin
    siz as integer
end
begin
    siz = oFormatArray.Size();
    if (resize) then begin
        ++siz;
        oFormatArray.Resize(siz);
    end
    
    oFormatArray[siz].formatCode = formatCode;
    oFormatArray[siz].formatLabel = formatLabel;
    oFormatArray[siz].formatLang = formatLang;
    oFormatArray[siz].formatDescription = formatDescription;
end

private Function LoadFormatList()
objects begin
    descripcion as char
end
begin
    AddFormat('AD', 'AD', null, "Indicador AD sin puntuación", FALSE);
    AddFormat('SCC', 'SCC', null, "Siglo con signo");
    AddFormat('CC', 'CC', null, "Siglo sin signo");
    AddFormat('DDD', 'DDD', null, "Día ordinal del año");
    AddFormat('DD', 'DD', null, "Día del mes");
    AddFormat('D', 'D', null, "Día de la semana (1-7)");
    AddFormat('DAY', 'DAY_GERMAN', 'NLS_DATE_LANGUAGE=GERMAN', "Nombre del día de la semana en alemán");
    AddFormat('DAY', 'DAY_ENGLISH', 'NLS_DATE_LANGUAGE=ENGLISH', "Nombre del día de la semana en inglés");
    AddFormat('DAY', 'DAY_SPANISH', 'NLS_DATE_LANGUAGE=SPANISH', "Nombre del día de la semana en español");
    AddFormat('DAY', 'DAY_ITALIAN', 'NLS_DATE_LANGUAGE=ITALIAN', "Nombre del día de la semana en italiano");
    AddFormat('DAY', 'DAY_FRENCH', 'NLS_DATE_LANGUAGE=FRENCH', "Nombre del día de la semana en francés");
    AddFormat('DAY', 'DAY_DAY_PC_LANG', null, "Nombre del día de la semana usando la locale actual del PC");
    AddFormat('DL', 'DL', null, "Fecha en formato largo");
    AddFormat('DY', 'DY', null, "Nombre del día de la semana abreviado a tres caracteres");
    AddFormat('DY', 'DY',  'NLS_DATE_LANGUAGE=GERMAN', "Nombre del día de la semana en alemán abreviado a tres caracteres");
    AddFormat('DY', 'DY',  'NLS_DATE_LANGUAGE=ENGLISH', "Nombre del día de la semana en inglés abreviado a tres caracteres");
    AddFormat('DY', 'DY',  'NLS_DATE_LANGUAGE=FRENCH', "Nombre del día de la semana en francés abreviado a tres caracteres");
    AddFormat('DS', 'DS', null, "Fecha en formato corto, teniendo en cuenta la DBDATE. dd/mm/yyyy por defecto");
    AddFormat('IW', 'IW', null, "Semana del año (1-52 o 1-53) basado en el estándar ISO");
    AddFormat('IYYY', 'IYYY', null, "Año en 4 dígitos basado en el estándar ISO");
    AddFormat('IYY', 'IYY', null, "Últimos 3 dígitos del año basados en el estándar ISO");
    AddFormat('IY', 'I', null, "Últimos 2 dígitos del año basados en el estándar ISO");
    AddFormat('I', 'I', null, "Últimos dígito del año basado en el estándar ISO");
    AddFormat('MM', 'MM', null, "Mes (01-12; Enero = 01)");
    AddFormat('MONTH', 'MONTH', 'NLS_DATE_LANGUAGE=GERMAN', "Nombre del mes en formato largo en alemán");
    AddFormat('MONTH', 'MONTH', 'NLS_DATE_LANGUAGE=ENGLISH', "Nombre del mes en formato largo en inglés");
    AddFormat('MONTH', 'MONTH', 'NLS_DATE_LANGUAGE=ITALIAN', "Nombre del mes en formato largo en italiano");
    AddFormat('MONTH', 'MONTH', 'NLS_DATE_LANGUAGE=FRENCH', "Nombre del mes en formato largo en francés");
    AddFormat('MONTH', 'MONTH', null, "Nombre del mes en formato largo en el idioma de la locale del PC");
    AddFormat('MON', 'MON', 'NLS_DATE_LANGUAGE=GERMAN', "Nombre del mes abreviado a tres caracteres en alemán");
    AddFormat('MON', 'MON', 'NLS_DATE_LANGUAGE=ENGLISH', "Nombre del mes abreviado a tres caracteres en inglés");
    AddFormat('MON', 'MON', 'NLS_DATE_LANGUAGE=FRENCH', "Nombre del mes abreviado a tres caracteres en francés");
    AddFormat('MON', 'MON', 'NLS_DATE_LANGUAGE=ITALIAN', "Nombre del mes abreviado a tres caracteres en italiano");
    AddFormat('MON', 'MON', null, "Nombre del mes abreviado en el idioma de la locale del PC");
    AddFormat('Q', 'Q', null, "Trimestre del año (1, 2, 3, 4; Enero - Marzo = 1)");
    AddFormat('RM', 'RM', null, "Mes en números romanos (I-XII; Enero = I)");
    AddFormat('WW', 'WW', null, "Semana del año (1-53), donde la semana 1 comienza en el primer día del año y continúa hasta el séptimo día del año");
    AddFormat('W', 'W', null, "Semana del mes (1-5), donde la semana 1 comienza en el primer día del mes y finaliza en el séptimo día del mes");
    AddFormat('SYYYY', 'SYYYY', null, "Año en 4 dígitos; La S indica que los años anteriores al año 1 llevarán como prefijo un signo menos (-)");
    AddFormat('YYYY', 'YYYY', null, "Año en 4 dígitos");
    AddFormat('Y,YYY', 'Y_YYY', null, "Año en 4 dígitos con la coma en la tercera posición");
    AddFormat('YYY', 'YYY', null, "Últimos 3 dígitos del año");
    AddFormat('YY', 'YY', null, "Últimos 2 dígitos del año");
    AddFormat('Y', 'Y', null, "Último dígito del año");
    AddFormat('YEAR', 'YEAR', null, "Año escrito (en español)");
    AddFormat('DDSP', 'DDSP', null, "Día del mes (Spelled number)");
    AddFormat('MMSP', 'MMSP', null, "Mes (Spelled number)");
    AddFormat('YYYYSP', 'YYYYSP', null, "Año (Spelled number)");
    AddFormat('DAY, MONTH, Semana: WW', 'Varios', 'NLS_DATE_LANGUAGE=SPANISH', "Es posible incluir varios formatos en el parámetro de formato de la función");
end


On event Click control chk_today(e as event)
begin
    LoadList (chk_today.Checked);
end

On event SelChange control lst(e as event)
begin
    SetLabelValue();
end

private Function SetLabelValue
objects begin
    colval as char
    queryVal as char
end
begin
    lst.GetListColumnInto(lst.Selected, 2, colval);

    if chk_today.Checked then begin
        queryVal = "select  date(today)," + colval + " from systables where rowid = 1";
        lbl_query.Text = queryVal;
    end else begin    
        queryVal = "select  last_exit_date," + colval + " from items limit 1";
        lbl_query.Text = queryVal;
    end
end
private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    skindir = ProjectDir()+"\skin\green";
    pList.ListSetSkin(skindir + "\miskin.txt");        
    
end
main
objects
begin
    lDtFecha as date
    c1 as SqlCursor
    lChlinea as char
    s as Stream
    ofrm as frm
end
begin
    PutEnv("DRAWLISTELLIPSIS","TRUE");
    PutEnv("DBPATH",ProjectDir());
    Sql.Connect("stock");
    ofrm.Run();
    Sql.Disconnect();
end

On Open 
objects
begin
   cCursor as SqlCursor
end
begin
    Self.Maximize();
    PutEnv("DRAWLISTELLIPSIS","TRUE");
    DoSetSkin(lst);
    lst.FieldSeparator = "|";
    lst.SetColumnChars(1,15);
    lst.SetColumnAlign(1,2);
    lst.SetColumnType(1,1);
    lst.SetColumnChars(2,43); //TO_CHAR
    lst.SetColumnChars(3,15); //Formato
    lst.SetColumnChars(4,60); //resultado
    lst.SetColumnChars(5,20);
    lst.SetLockColumns(1);
    lst.SetLockColumns(2);
    LoadFormatList();
    CreaQuery();
    cCursor.Prepare("Select * from tmp1");
    cCursor.Open();
    lst.AddString(cCursor.FetchTuple());
    While cCursor.Found() do begin
        lst.AddString(cCursor.FetchTuple());
    
    end
    

end
On event SelChange control lst(e as event)
begin
    SetValueSelect();
end
Private SetValueSelect()
Objects begin
    lChNumber as char
    lChformato as char
    lChNLS as char default null
end
begin
    lst.GetListColumnInto(lst.Selected, 1, lChNumber);
    lst.GetListColumnInto(lst.Selected, 3, lChformato);
    lst.GetListColumnInto(lst.Selected, 4, lChNLS);
    if lChNLS is null then 
        txt_select.Text= "select "+lChNumber+", TO_CHAR("+lChNumber+",'"+lChformato+"') from systables where rowid = 1";
    else begin
        txt_select.Text= "select "+lChNumber+", TO_CHAR("+lChNumber+",'"+lChformato+"','"+lChNLS+"') from systables where rowid = 1";    
        
    end    
end
private Function LoadFormatList()
objects begin
    descripcion as char
end
begin
    AddFormat('0.999', '0.123', null, "0: Rellena con ceros por la izquierda (parte entera).", FALSE);
    AddFormat('0.99999', '0.123', null, "0: Por la derecha (parte decimal) rellena a '0' en el caso de que no existan dígitos en esa posición.");
    
    AddFormat('B.999', '0.123', null, "B: Si la parte entera es 0, retorna una cadena de blancos en su lugar.");
    AddFormat('B999', '0', null, "B: Si el número es 0, retorna una cadena de blancos.");
    
    AddFormat('9.999', '0.123', null, "9: Retorna el valor con el número especificado de dígitos con un espacio inicial si es positivo. Los ceros iniciales estarán en blanco.");
    AddFormat('9.999', '-0.123', null, "9: Retorna el valor con el número especificado de dígitos con con un signo menos delante si es negativo. Los ceros iniciales estarán en blanco.");
    
    AddFormat('99,999.999', '12333.896', null, "9: Retorna el valor con el número especificado de dígitos con un espacio inicial si es positivo. Los ceros iniciales estarán en blanco.");
    AddFormat('99,999.999', '-12333.896', null, "9: Retorna el valor con el número especificado de dígitos con con un signo menos delante si es negativo. Los ceros iniciales estarán en blanco.");
    
    
    AddFormat('S9.999', '-0.123', null, "S: Si el número es negativo y se indica S al principio del formato, mostrará un signo '-' al comienzo del mismo.");        
    AddFormat('S0.999', '-0.123', null, "Ejemplo de formato S con formato 0");        
    AddFormat('SB.999', '-0.123', null, "Ejemplo de formato S con formato B");        
    AddFormat('9.999S', '-0.123', null, "S: Si el número es negativo y se indica S al principio del formato, mostrará un signo '-' al comienzo del mismo.");        
    AddFormat('S9.999', '0.123', null, "S: Si el número es positivo y se indica S al principio del formato, mostrará un signo '+' al comienzo del mismo.");           
    AddFormat('S0.999', '0.123', null, "Ejemplo com formato S y 0");           
    AddFormat('SB.999', '0.123', null, "Ejemplo com formato S y 0");           
    AddFormat('9.999S', '0.123', null, "S: Si el número es positivo y se indica S al principio del formato, mostrará un signo '+' al comienzo del mismo.");           


    AddFormat('9.999PR', '-0.123', null, "PR: Si el número es negativo, retorna el número entre signos de menor que (<) y mayor que (>).");
    
    AddFormat('9999.999FM', '-0.123', null, "FM: Retorna un valor sin blancos a la izquierda");
    AddFormat('FM90.9', '-10.7', null, "FM: Retorna un valor sin blancos a la izquierda");        
    
    AddFormat('RN', '525', null, "RM: Retorna el número en caracteres romanos.");        

    AddFormat('L9999', '2356', null, "L: Retorna el símbolo local de moneda en la posición especificada.");
    AddFormat('9999L', '-2356', null, "L: Retorna el símbolo local de moneda en la posición especificada.");
    
    AddFormat('9999C', '1000', null, "C: Retorna el nombre ISO de moneda en la posición especificada.");
    
    AddFormat('9G999', '1000', null, "G: Retorna el carácter separador de grupo (miles) en la posición especificada.");
    AddFormat('9D999', '1.000', null, "D: Retorna el carácter decimal en la posición especificada.");
    
    AddFormat('fm999g999d999', '125939.23', null, "Ejemplo con formato FM (elimina espacios en blanco), g(separador de miles) y d(separador decimal)");
    AddFormat('fm999,999.999', '125939.23', null, "Ejemplo con formato FM (elimina espacios en blanco), ','(separador de miles) y '.'(separador decimal)");
    AddFormat('999,999.999', '125939.23', null, "Ejemplo SIN formato FM (elimina espacios en blanco), ','(separador de miles) y '.'(separador decimal)");
    
    AddFormat('99G999D99LPR', '-18939.01', null, "Ejemplo con formato L, PR ,g(separador de miles) y d(separador decimal)");
    AddFormat('99G999D99LPR', '-18939.01', 'NLS_NUMERIC_CHARACTERS=''.,'' ', "Esta variable indica que para el formato D el valor será '.' y no la coma que es el valor por defecto. Para el formato G el valor será ',' ");    
    
    AddFormat('99G999D99LPR', '-18939.01', 'NLS_NUMERIC_CHARACTERS=''.,'' NLS_CURRENCY = ''AusDollars''', "NLS_CURRENCY. Esta variable indica la cadena de caracteres (texto libre) que se empleará como símbolo local de moneda cuando se utilice el operador L en la cadena de formato del segundo parámetro");    
    
    AddFormat('99G999D99C', '12939.23', null, "C: Retorna el nombre ISO de moneda en la posición especificada.");
    AddFormat('99G999D99C', '12939.23', 'NLS_NUMERIC_CHARACTERS=''.,'' NLS_ISO_CURRENCY = ''germany''', "NLS_ISO_CURRENCY: Si se desea emplear un nombre de moneda, en operador C, diferente a la configuración regional, se indicará en la variable NLS_ISO_CURRENCY el nombre del país");    
    AddFormat('99G999D99C', '12939.23', 'NLS_NUMERIC_CHARACTERS=''.,'' NLS_ISO_CURRENCY = ''MEXICO''', "En esta caso se mostrará en el operador C el nombre de la moneda mejicana");    
    
    
    
end

private Function AddFormat(formatCode as Char, formatNumber as Char, formatLang as char, formatDescription as char, resize as boolean default true)
objects begin
    siz as integer
end
begin
    siz = oFormatArray.Size();
    if (resize) then begin
        ++siz;
        oFormatArray.Resize(siz);
    end
    
    oFormatArray[siz].formatCode = formatCode;
    oFormatArray[siz].formatNumber = formatNumber;
    oFormatArray[siz].formatLang = formatLang;
    oFormatArray[siz].formatDescription = formatDescription;
end
private function CreaQuery()
objects begin
    query as char
    tab as char
    i siz as integer
    str strRet as char    
    lastItem as Boolean default false
    miSqlStmt as SqlStatement
    colChar as char
    lChNumber as char
    strFormat as char
end
begin
    Module.ErrorLevel(0);    
    Sql.SqlExec("drop table tmp1");
    Module.ErrorLevel(3);
    txt_select.Text =  null;
    
    Sql.SqlExec(" create temp table tmp1 " + 
                " (valNumero char(20) Label 'Número', " + 
                " valQuery char(256) Label 'TO_CHAR', " +
                " valFormat char(30) Label 'Formato' , " + 
                " valLang char(60) Label 'Idioma' , " + 
                " valRes char (256) Label 'Resultado' , " +
                " valDescription char(256) Label 'Descripción')");
    miSqlStmt.Prepare("insert into tmp1 values (?,?,?,?,?,?)");
    

    tab = " FROM systables where rowid = 1 ";
    strRet = " ";
    
    siz = oFormatArray.Size();
    for i = 1 to siz do
    begin
            str = "SELECT "+oFormatArray[i].formatNumber+",";
            strFormat = "TO_CHAR( "+oFormatArray[i].formatNumber+", '" + oFormatArray[i].formatCode + "'";
        if oFormatArray[i].formatLang is not null then begin
            strFormat = strFormat + ", '" + oFormatArray[i].formatLang + "' )";
        end else begin
            strFormat = strFormat +  ") ";
        end
        
        str = str + strFormat;
        strRet = strRet + str + tab;
        Sql.Select( strRet, lChNumber, colChar);

        miSqlStmt.Execute(oFormatArray[i].formatNumber, strFormat, oFormatArray[i].formatCode, oFormatArray[i].formatLang, colChar,  oFormatArray[i].formatDescription);
        
        
        strRet = null;
        strFormat = null;
        str = null;
    end
    lst.Selected = 1;
end

private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    skindir = ProjectDir()+"\skin\orange";
    pList.ListSetSkin(skindir + "\solocabecera.txt");        
    
end



{
  
}
main
objects
begin
    c1 as SqlCursor
    
    ofrm as frm
    lChar as Char
end
begin
    PutEnv("DBPATH",ProjectDir());
    Sql.Connect("stock");
    ofrm.Run();
    Sql.Disconnect();
end

On Open 
objects
begin
   
end
begin
    DoSetSkin(lst);
    
    LoadFormatList();
    CreaQuery();
    

    lst.FieldSeparator = "|";
    lst.SetColumnChars(1,22);
    lst.SetColumnChars(2,85); //TO_DATE
    lst.SetColumnChars(3,25); //FORMATO
    lst.SetColumnChars(4,15);
    lst.SetColumnChars(5,15);
    lst.LoadSelect("Select * from tmp1");
    lst.SetLockColumns(1);
    lst.SetLockColumns(2);
end
private Function LoadFormatList()
objects begin
    descripcion as char
end
begin
    AddFormat('DAY DD MONTH YYYY', 'lunes 10 Febrero 2014', null, "DAY:Día de la semana en formato largo. "+
                                                                                "DD: Día del mes. "+
                                                                                "MONTH: Nombre del mes en formato largo (n caracteres)."+
                                                                                "YYYY: Últimos 4 dígitos del año.", FALSE);
    AddFormat('DAY DD MONTH YYYY', 'So 16 august 2014', 'NLS_DATE_LANGUAGE=german', "NLS_DATE_LANGUAGE, esta variable especifica el idioma de los nombres de los días de la semana y de los meses. En este caso el idioma es alemán");
    AddFormat('DAY DD MONTH YYYY', 'Sunday 16 august 2014', 'NLS_DATE_LANGUAGE=english', "NLS_DATE_LANGUAGE, esta variable especifica el idioma de los nombres de los días de la semana y de los meses. En este caso el idioma es inglés");
    AddFormat('DD MON RR', '10 Feb 34', null, "RR: Últimos 2 dígitos del año. Si es < 50, pertenece al siglo XXI. Si es igual o mayor a 50, pertenece al siglo XX.");
    AddFormat('DD MON RR', '10 Feb 68', null, "RR: Últimos 2 dígitos del año. Si es < 50, pertenece al siglo XXI. Si es igual o mayor a 50, pertenece al siglo XX.");
end

private Function AddFormat(formatCode as Char, formatNumber as Char, formatLang as char, formatDescription as char, resize as boolean default true)
objects begin
    siz as integer
end
begin
    siz = oFormatArray.Size();
    if (resize) then begin
        ++siz;
        oFormatArray.Resize(siz);
    end
    
    oFormatArray[siz].formatCode = formatCode;
    oFormatArray[siz].formatCadena = formatNumber;
    oFormatArray[siz].formatLang = formatLang;
    oFormatArray[siz].formatDescription = formatDescription;
end
private function CreaQuery()
objects begin
    query as char
    tab as char
    i siz as integer
    str strRet as char    
    lastItem as Boolean default false
    miSqlStmt as SqlStatement
    colChar as char
    lChCadena as char
    strFormat as char
end
begin
    Module.ErrorLevel(0);    
    Sql.SqlExec("drop table tmp1");
    Module.ErrorLevel(3);
    
    Sql.SqlExec(" create temp table tmp1 " + 
                " (valCadena char(30) Label 'Número', " + 
                " valQuery char(256) Label 'TO_DATE', " +
                " valFormat char(30) Label 'Formato' , " + 
                " valLang char(60) Label 'Idioma' , " + 
                " valRes char (256) Label 'Resultado' , " +
                " valDescription char(256) Label 'Descripción')");
    miSqlStmt.Prepare("insert into tmp1 values (?,?,?,?,?,?)");
    

    tab = " FROM systables where rowid = 1 ";
    strRet = " ";
    
    siz = oFormatArray.Size();
    for i = 1 to siz do
    begin
            str = "SELECT '"+oFormatArray[i].formatCadena+"',";
            strFormat = "TO_DATE( '"+oFormatArray[i].formatCadena+"', '" + oFormatArray[i].formatCode + "'";
        if oFormatArray[i].formatLang is not null then begin
            strFormat = strFormat + ", '" + oFormatArray[i].formatLang + "' )";
        end else begin
            strFormat = strFormat +  ") ";
        end
        
        str = str + strFormat;
        strRet = strRet + str + tab;
        Sql.Select( strRet, lChCadena, colChar);

        miSqlStmt.Execute(oFormatArray[i].formatCadena, strFormat, oFormatArray[i].formatCode, oFormatArray[i].formatLang, colChar,  oFormatArray[i].formatDescription);
        
        
        strRet = null;
        strFormat = null;
        str = null;
    end
    lst.Selected = 1;
end


On event SelChange control lst(e as event)
Objects begin
    lChFecha as char
    lChfuncion as char
    lChformato as char
end
begin
    lst.GetListColumnInto(lst.Selected, 1, lChFecha);
    lst.GetListColumnInto(lst.Selected, 2, lChfuncion);
    lst.GetListColumnInto(lst.Selected, 3, lChformato);
    txt_select.Text= "select "+lChfuncion+" from systables where rowid = 1";
end

private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    skindir = ProjectDir()+"\skin\orange";
    pList.ListSetSkin(skindir + "\solocabecera.txt");        
    
end



{
    Esta función retorna una fecha truncada a la unidad especificada por el formato.
}
main
Objects begin
    Stmt as SqlStatement
    lFecha as date
    ofrm as frm
end
begin
    PutEnv("DRAWLISTELLIPSIS","TRUE");
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    ofrm.Run();
    

    Sql.Disconnect();
end

On Open
begin
    DoSetSkin(lst);
    DoSetSkin(lst1);
    DoSetSkin(lst2);
end
private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    skindir = ProjectDir()+"\skin\orange";
    pList.ListSetSkin(skindir + "\miskin.txt");        
    
end

{
    Esta función retorna una fecha truncada a la unidad especificada por el formato.
}
main
objects
begin
    ofrm as frm
end
begin
    PutEnv("DRAWLISTELLIPSIS","TRUE");
    PutEnv("DBPATH",ProjectDir());
    Sql.Connect("stock");
    if not Sql.Select("select * from systables where tabname= 'lines'") then begin
        Sql.SqlExec('CREATE TABLE lines ('+
                    ' order_nbr INTEGER NOT NULL LABEL "Order Nbr.",'+
                    ' line_nbr SMALLINT NOT NULL FORMAT "##" LABEL "Line Nbr.",'+
                    ' item SMALLINT LABEL "Item Code",'+
                    ' supplier INTEGER LABEL "Supplier Code",'+
                    ' quantity SMALLINT FORMAT "###" LABEL "Quantity",'+
                    ' discount SMALLINT LABEL "Discount",'+
                    ' price DECIMAL(15,6) LABEL "Unit Price")'+
                    ' PRIMARY KEY (order_nbr,line_nbr)');
        Sql.Unload(ProjectDir()+"\orderlines.unl", "select * from orderlines");
        Sql.Load(ProjectDir()+"\orderlines.unl", "lines");
        Sql.SqlExec("update lines set price = price * 0.123456");
    end     
    ofrm.lst.SetColumnChars(1,13);
    ofrm.lst1.SetColumnChars(1,13);
    ofrm.lst2.SetColumnChars(1,13);
    ofrm.txt_1.Text= "SELECT price, TRUNC(price,0)  FROM lines";
    ofrm.txt_2.Text= "SELECT price, TRUNC(price,3)  FROM lines";
    ofrm.txt_3.Text= "SELECT price, TRUNC(price,5) FROM lines";
    ofrm.lst.LoadSelect("SELECT price, TRUNC(price,0)  FROM lines");
    ofrm.lst1.LoadSelect("SELECT price, TRUNC(price,3) FROM lines");
    ofrm.lst2.LoadSelect("SELECT price, TRUNC(price,5) FROM lines");
    ofrm.Run();
    Sql.Disconnect();
end

main
objects
begin
    s result as smallint
    c as char
end
begin
    result = 0;
    for s = 1 to 5 do 
        result += s;
    
    result = 0;
    for s = 5 down to 1 do 
        result += s;
    
    result = 0;
    for s = 0 to 10 step 2 do 
        result += s / 2;
    
    result = 0;
    for s = 10 down to 0 step 2 do 
        result += s / 2;
    
    result = 0;
    for s as 1,2,3,4,5 do 
        result += s;
    
    result = 0;
    for c = "x" to "xxxxx" step "x" do 
        result += c.Length;
end

main
objects
begin
    s suma as smallint
    c as char
end
begin
   
    suma = 0;
    for s = 1 to 5 do suma += s;
    
    suma = 0;
    for s = 5 down to 1 do suma += s;
    
    suma = 0;
    for s = 0 to 10 step 2 do suma += s / 2;
    
    suma = 0;
    for s = 10 down to 0 step 2 do suma += s / 2;
    
    suma = 0;
    for s as 1,2,3,4,5 do suma += s;
    
    suma = 0;
    for c = '1' to '11111' step '1' do suma += c.Length;
    
    suma = 0;
end

main
objects
begin
    i as date
end
begin
    for i = "01/01/1994" to "15/01/1994" step 2 do begin
        i.Trace;
    end    
end

On Click bfore
begin
    Mitab.Foreground = Rgb(255,0,0); 
end

On Click bbackground
begin
    Mitab.Background = Rgb(0,255,0); 
end
Main 
objects begin
    Miform as fr
end
begin
    Miform.Run; 
end

main 
begin
    forever if Ok("Finish?") then 
        break;
    
end


main
objects
begin
    f as Mform
end
begin
    f.Run;
end


On Open
begin
    Sql.SqlExec("database almacen");
    AttachServer(Sql);
    SetEditMode(TRUE);
end

On Command AcceptEdit table provincias
begin
    AcceptEdit;
    "Acepta los datos".Trace;
end

On Command CancelEdit table provincias
begin
    CancelEdit;
    "No acepta los datos".Trace;
end

On Command EditNew table provincias
begin
    provincias.EditNew;
    "Entra en edición para añadir".Trace;
end

On Command EditUpdate table provincias
begin
    provincias.EditUpdate;
    "Entra en edición para modificar".Trace;
end

On Command EditQuerylike
begin
    "Entra en edición para QueryLike".Trace;
    EditQueryLike; 
end


main
objects begin
    miform as fr
end
begin
    miform.Run;
end

main
objects
begin
    s suma as smallint
    c as char
end
begin
   
    suma = 0;
    for s = 1 to 5 do suma += s;
    
    suma = 0;
    for s = 5 down to 1 do suma += s;
    
    suma = 0;
    for s = 1 to 10 step 2 do suma += s;
    
    suma = 0;
    for s = 10 down to 1 step 2 do suma += s;
    
    suma = 0;
    for s as 1,2,3,4,5 do suma += s;
    
    suma = 0;
    for c = '1' to '11111' step '1' do suma += s;
end

On command Delete
begin
    Beep(0);
    if(MessageBox("Do you want to delete the current row?","DELETE",36)==6) then
        orders.Delete;
end

On command Update
begin
    if(Yes("Do you want to update the current row?","UPDATE")==TRUE) then
        orders.Update;       
end

On command Close
begin
    if(Ok("Do you want to exit?","CLOSE")==TRUE) then
       Exit(1);      
end
main 
objects begin
    MForm as fr
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");   
    MForm.AttachServer(Sql); 
    if MForm.SqlError < 0 then 
             MForm.SqlErrMsg.Trace;       
    MForm.Run;
    Sql.Disconnect;  
end


On Open 
objects
begin
   
end
begin
    DoSetSkin(lst);
    lst.FieldSeparator = "|";
    lst.SetColumnChars(1,23);
    lst.SetColumnChars(2,87);
    lst.SetColumnChars(3,30);
    lst.SetColumnChars(4,15);
    lst.SetLockColumns(1);
    lst.SetLockColumns(2);
    CargarLista();
    

end



Private CargarLista()
objects
begin
   lDtFecha as date default null
   lChFecha as char
   lDtFecha2 as date default null
end

begin
    lst.Reset();
    
    lst.AddString("2009-31-ENE|FromChar('2009-31-ENE', 'YYYY-DD-MON')|'YYYY-DD-MON'|"+lDtFecha.FromChar('2009-31-ENE', 'YYYY-DD-MON')+
                    "||YYYY: Últimos 4 dígitos del año. DD: Día del mes. MON: Nombre del mes en formato corto (3 caracteres)");

    lst.AddString("2009-28-FEBRERO|FromChar('2009-28-FEBRERO', 'YYYY-DD-MONTH')|'YYYY-DD-MONTH'|"+lDtFecha.FromChar('2009-28-FEBRERO', 'YYYY-DD-MONTH')+
                        "||YYYY: Últimos 4 dígitos del año. DD: Día del mes. MONTH: Nombre del mes en formato largo (n caracteres)");
    

    lst.AddString("2009-28-FEBRUAR|FromChar('2009-28-FEBRUAR', 'YYYY-DD-MONTH','NLS_DATE_LANGUAGE=german')|YYYY-DD-MONTH|"+
                    lDtFecha.FromChar('2009-28-FEBRUAR', 'YYYY-DD-MONTH','NLS_DATE_LANGUAGE=german')+"|alemán");
    lst.AddString("2009-28-FEBRUARY|FromChar('2009-28-FEBRUARY', 'YYYY-DD-MONTH','NLS_DATE_LANGUAGE=english')|YYYY-DD-MONTH|"+
                    lDtFecha.FromChar('2009-28-FEBRUARY', 'YYYY-DD-MONTH','NLS_DATE_LANGUAGE=english')+"|inglés");

    lst.AddString("34-28-FEBRERO|FromChar('34-28-FEBRERO', 'RRRR-DD-MONTH')|RRRR-DD-MONTH|"+lDtFecha.FromChar('34-28-FEBRERO', 'RRRR-DD-MONTH')+
                    "||RRRR: Últimos 2 dígitos del año. Si es < 50, pertenece al siglo XXI. Si es igual o mayor a 50, pertenece al siglo XX."); 
    lst.AddString("68-28-FEBRERO|FromChar('68-28-FEBRERO', 'RRRR-DD-MONTH')|RRRR-DD-MONTH|"+lDtFecha.FromChar('68-28-FEBRERO', 'RRRR-DD-MONTH')+
                    "||RRRR:Últimos 2 dígitos del año. Si es < 50, pertenece al siglo XXI. Si es igual o mayor a 50, pertenece al siglo XX."); 
    
    lst.AddString("34-28-FEBRERO|FromChar('34-28-FEBRERO', 'RR-DD-MONTH')|RR-DD-MONTH|"+lDtFecha.FromChar('34-28-FEBRERO', 'RR-DD-MONTH')+
                    "||RR: Últimos 2 dígitos del año. Si es < 50, pertenece al siglo XXI. Si es igual o mayor a 50, pertenece al siglo XX."); 
    lst.AddString("68-28-FEBRERO|FromChar('68-28-FEBRERO', 'RR-DD-MONTH')|RR-DD-MONTH|"+lDtFecha.FromChar('68-28-FEBRERO', 'RR-DD-MONTH')+
                    "||RR: Últimos 2 dígitos del año. Si es < 50, pertenece al siglo XXI. Si es igual o mayor a 50, pertenece al siglo XX."); 
    

end    



On event SelChange control lst(e as event)
Objects begin
    lChFecha as char
    lChfuncion as char
    lChformato as char
    lChDescripcion as char
end
begin
    lst.GetListColumnInto(lst.Selected, 4, lChFecha);
    lst.GetListColumnInto(lst.Selected, 2, lChfuncion);
    lst.GetListColumnInto(lst.Selected, 3, lChformato);
    lst.GetListColumnInto(lst.Selected, 6, lChDescripcion);
    if lChDescripcion is not null then 
        lChDescripcion = "DESCRIPCIÓN FORMATO: " + lChDescripcion;
    txt_select.Text= lChFecha +"."+lChfuncion+" from systables where rowid = 1" + 13.Character() + 10.Character() +  lChDescripcion;
end
private Function DoSetSkin(pList as SimpleFormControl)
objects begin
    skindir as char
end
begin
    skindir = ProjectDir()+"\skin\orange";
    pList.ListSetSkin(skindir + "\solocabecera.txt");        
    
end
main
objects
begin
    o as frm
end
begin
    o.Run();    
end

On Click btn_probar
begin
    campo1.GetAssociatedVarName ().Trace;
end
main
objects
begin
end
begin
    f.Run();
end

On Open
begin
end

On Click btnCarga
objects begin
    fichero as char
end
begin
    fichero = Module.TreeWalk(ProjectDir() + "\json","json");
    lst_Json.ListFile = fichero;
    if fichero is not null then begin
        CargaJSonEnLista(fichero);
    end
end

private function CargaJSonEnLista (fichero as char)
objects begin
    jsonObj as json
end
begin
    ctrTree.Reset();
    ctrTree.FieldSeparator = "|";
    ctrTree.SetColumnChars(1, 40);
    jsonObj.LoadFromFile(fichero);
    if jsonObj.GetType() == "array" then begin
       RecorreArrayJSon(jsonObj,ctrTree.AddTreeString(0, "JSON", TRUE));
   end else begin
       RecorreJSon(jsonObj, ctrTree.AddTreeString(0, "JSON", TRUE));
   end
end

public function RecorreJSon (objJson as json, nivel as integer)
objects begin
    lista as char
    nombreObjeto as char
    num i as integer
    objHijoJson as json
    valorPropiedad as char
    index as integer
end
begin
    lista = objJson.GetChildList();
    num = lista.NumWords("|");
    
    for i = 1 to num do begin
        nombreObjeto = lista.GetWord( "|" , i);
        objHijoJson = objJson.Get(nombreObjeto);
        
        if objHijoJson.GetType() == "string" or objHijoJson.GetType() == "number" or objHijoJson.GetType() == "boolean" then begin
            valorPropiedad = objHijoJson;
        end else begin
            valorPropiedad = "";
        end

        index = ctrTree.AddTreeString(nivel, nombreObjeto + "|" + valorPropiedad, FALSE);
        
        if objHijoJson.GetType() == "array" then begin
            RecorreArrayJSon(objHijoJson,index);
        end else begin
            RecorreJSon(objHijoJson, index);
        end
        
    end
end

public function RecorreArrayJSon(objJson as json, nivel as integer)
objects begin
    numElements i as integer
    elementJSon as json
    index as integer
    singleChild as char default ""
end
begin
    numElements = objJson.GetSize();
    for i = 1 to numElements do begin
        elementJSon = objJson.Get("[" + i + "]");
        if elementJSon.GetChildList().NumWords("|") == 0 then begin
            singleChild = elementJSon;
        end else begin
            singleChild = "";
        end
        index = ctrTree.AddTreeString(nivel, "[" + (i) + "]" + "|" + singleChild, FALSE);        
        RecorreJSon(elementJSon, index);            
    end
end
main
objects
begin
    f as frm
end
begin
    f.Run;
end

On Open
begin

end

On Click ctrPegarGriego
objects begin
    str as char
end
begin
    str = Module.GetClipboardTextUTF8();
    str.UTF8ToAnsi(1253);
    txtgriegodespues.Text = str;
end


On event Click control btn_OpenFile(e as event)
Objects begin
    lFile as char
end
begin
    lFile = Module.TreeWalk(ProjectDir + "\pdfmulticharset" , "txt"); 
    Module.OpenFileWithDefaultApp(lFile);
end

On Click ctrPegarTurco
objects begin
    str as char
end
begin
    str = Module.GetClipboardTextUTF8();
    str.UTF8ToAnsi(1254);
    txtrusodespues.Text = str;
end
main
objects
begin
    f as frm
end
begin
    f.Run();
end

main
objects
begin
    vComputerName as Char
end
begin
    GetComputerName(vComputerName);
    vComputerName.Trace;
end


main
objects
begin
    vDiskFreeSpace as Decimal
end
begin
    GetDiskFreeSpace("c:\", vDiskFreeSpace);
    vDiskFreeSpace.Trace;
end


main
objects
begin
    vDriveSize as Decimal
end
begin
    GetDiskSize("c:\", vDriveSize);
    vDriveSize.Trace;
end


On Open
begin
    txt_msg.Text = "Hacer Drag and Drop desde LIST 1 a LIST 2, o de LIST 2 a LIST 1." +
    "" + 10.Character() +
    "En la lista de la derecha se mostrará la siguiente información:" +
    "" + 10.Character() +
    "Control origen, control destino, fila y columna origen, fila y columna destino.";

    lstLog.FieldSeparator = "|";
    lstLog.SetColumnChars(1, 20);
    IDLIST2.FieldSeparator = "|";
    
    IDLIST1.AddString("LIST_1_1");
    IDLIST1.AddString("LIST_1_2");  
    IDLIST1.AddString("LIST_1_3");  
    IDLIST1.AddString("LIST_1_4");
    IDLIST1.AddString("LIST_1_5");  
    IDLIST1.AddString("LIST_1_6");  

    IDLIST2.AddString("LIST_2_1|LIST_2_1");
    IDLIST2.AddString("LIST_2_2|LIST_2_2");  
    IDLIST2.AddString("LIST_2_3|LIST_2_3");  
    IDLIST2.AddString("LIST_2_4|LIST_2_4");
    IDLIST2.AddString("LIST_2_5|LIST_2_5");  
    IDLIST2.AddString("LIST_2_6|LIST_2_6");  

end


on Dragover (ctr as char,fromCtr as SimpleFormControl, fromItem as integer, var result as integer)
begin
    if(fromCtr.Name == "IDLIST2" OR fromCtr.Name == "IDLIST1") then
        result = 1;
    else
        result = 0;
end

on Dragdrop IDLIST2 (item as integer, fromCtr as SimpleFormControl, fromItem as integer, var result as integer)
objects begin
    str as char
end
begin
    
    AddToLogList("Control Desde", fromCtr.Name);
    AddToLogList("Control Hasta", "IDLIST2");
    
    if(fromCtr.Name == "IDLIST1") then
    begin
        result = 1;
        AddToLogList("Fila Desde", fromItem);
        AddToLogList("Columna Desde", fromCtr.GetDragColumn());
        AddToLogList("Fila Hasta", item);
        AddToLogList("Columna Hasta", IDLIST2.GetDropColumn());        
    end
    else
    if(fromCtr.Name == "IDLIST2") then
    begin
        result = 1;

        AddToLogList("Fila Desde", fromItem);
        AddToLogList("Columna Desde", IDLIST2.GetDragColumn());
        AddToLogList("Fila Hasta", item);
        AddToLogList("Columna Hasta", fromCtr.GetDropColumn());
    end
    else
        result = 0;
        
    AddToLogList("====", "====");
end

on Dragdrop IDLIST1 (item as integer, fromCtr as SimpleFormControl, fromItem as integer, var result as integer)
objects begin
    str as char
end
begin
    
    AddToLogList("Control Desde", fromCtr.Name);
    AddToLogList("Control Hasta", "IDLIST1");
    
    if(fromCtr.Name == "IDLIST1") then
    begin
        result = 1;
        AddToLogList("Fila Desde", fromItem);
        AddToLogList("Columna Desde", fromCtr.GetDragColumn());
        AddToLogList("Fila Hasta", item);
        AddToLogList("Columna Hasta", IDLIST2.GetDropColumn());        
    end
    else
    if(fromCtr.Name == "IDLIST2") then
    begin
        result = 1;

        AddToLogList("Fila Desde", fromItem);
        AddToLogList("Columna Desde", IDLIST2.GetDragColumn());
        AddToLogList("Fila Hasta", item);
        AddToLogList("Columna Hasta", fromCtr.GetDropColumn());
    end
    else
        result = 0;
        
    AddToLogList("====", "====");
end

private function AddToLogList(col1 as char, col2 as char)
objects begin
    str as char
end
begin
    str = col1 + "|" + col2;
    lstLog.AddString(str);
    lstLog.Selected = lstLog.Count();
end

main
begin
    oDrag.Run;
end

main
begin
    GetDriveType("c:\").Trace;
    GetDriveType("d:\").Trace;
end

{*
#define DRIVE_UNKNOWN     0
#define DRIVE_NO_ROOT_DIR 1
#define DRIVE_REMOVABLE   2
#define DRIVE_FIXED       3
#define DRIVE_REMOTE      4
#define DRIVE_CDROM       5
#define DRIVE_RAMDISK     6
*}



On Open
begin
    
    SetEditMode(true);
    Query();

    p_coment.Text = "Haga Click en una celda (los controles hijos del grid deben estar deshabilidatos)";
end


On event Click control id_grid(e as event)
begin
    p_coment.Text = "Fila : <" +  id_grid.GetGridClickedRow() + "> Columna :<" + e.GetItem + ">";

end
main
objects
begin
oCAutoEditMode as CGrid
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("Stock");
    oCAutoEditMode.Run;
    Sql.Disconnect;
    Sql.DettachConnection;
end


On Open
begin
    
    SetEditMode(true);
    Query();
    
    p_coment.Text = "Pulsar botón ordenación";
end




On Command CmdOrder
begin
    id_grid.SetGridColumnsOrder("ed_name|ed_state");
end
main
objects
begin
oCAutoEditMode as CGrid
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("Stock");
    oCAutoEditMode.Run;
    Sql.Disconnect;
    Sql.DettachConnection;
end

On Open
begin
    numInteger = 12345678;
    txtInteger = " ";
    txtIntegerConvertido = " ";
end

On Click btnConvertir
objects begin
    
end
begin

    txtInteger.Text = numInteger.ToCharHex;
    txtIntegerConvertido.Text = txtInteger.Text.GetIntegerFromCharHex();

end
main
objects
begin
    f as frm
end
begin
    f.Run;
end



On Open begin
    CargaLista(lstStrings, "strings");
    CargaLista(listSql, "sql");
    txt_help2.Text = txt_help1.Text = "Primer paso. Pulsar botón 'Crear Lista'";
        
end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    pList.Reset();    
    
    pList.AlternateBackColor( Rgb(207, 247, 254) , Rgb(254, 247, 224), 2);
    pList.SetLockColumns(1);
   
 
   
    
    pList.IconFile = "listaiconosgif";



    
    pList.FieldSeparator = "|";
    
    FormatListColumnChar(1, 15, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date

      
    FormatListColumnDate(4, 15, pList);  //Date

    FormatListColumnChar(5, 15, pList);  //Status

    
    FormatListColumnNumeric(6,10, 0, pList); //Número de la linea
    pList.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 10,0, pList); //Cod item
    FormatListColumnChar(8, 15, pList);  //Descripcion item

    FormatListColumnNumeric(9, 15 ,0, pList); //Cantidad
    FormatListColumnNumeric(10, 15,0, pList); //Descuento
    FormatListColumnNumeric(11, 20, 2, pList); //Precio     
    pList.SetColumnMask(11,4);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    

    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
    end // if
    
    if pType == "sql" then begin
       gNumRows =  pList.LoadSelect(InstruSelect);
    end

    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(12) ;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    

On Command CmdAgruparAgregadosSql
begin
    txt_help2.Text = "Siguiente Paso: Crear la lista y después de crear la lista agrupada pulsar botón 'Guardar Lista'";
    FShowMultiColumnGroupDlg(listSql);
end
On Command CmdAgruparAgregadosString 

begin
    txt_help1.Text = "Siguiente Paso: Crear la lista y después de crear la lista agrupada pulsar botón 'Guardar Lista'";
    FShowMultiColumnGroupDlg(lstStrings);
end




Private FShowMultiColumnGroupDlg(pList as SimpleFormControl)
begin
    pList.ShowMultiColumnGroupDlg(TRUE, 62,60 , TRUE, "Cuantos registros para  %n", NULL, "Mínimo valor %n en %p", "Suma en: %p", "Valor medio: %p");
end
Private EliminarVistaEnArbol(pList as SimpleFormControl)
begin
    pList.RemoveListGroupTreeView();
end


On Command CmdSaveString
begin
    if lstStrings.GetListMultiColumnGroupStr() == "" then
        txt_help1.Text = "No ha configurado la lista." ;
    else
        txt_help1.Text = "Siguiente Paso: Configuración guardada ("+lstStrings.GetListMultiColumnGroupStr()+"). Siguiente Paso: Pulsar botón 'Resetear List'" ;

end


On Command CmdSaveListSql
begin
    if listSql.GetListMultiColumnGroupStr() == "" then
        txt_help2.Text = "No ha configurado la lista." ;
    else
        txt_help2.Text = "Siguiente Paso: Configuración guardada ("+listSql.GetListMultiColumnGroupStr()+"). Siguiente Paso: Pulsar botón 'Resetear List'" ;
end


On Command CmdResetString 
begin
    EliminarVistaEnArbol(lstStrings);
    txt_help1.Text = "Siguiente Paso: Pulsar botón 'Ver Lista Guardada'" ;
end

On Command CmdRestoreListString
begin
    lstStrings.ShowListAsMultiColumnGroup(lstStrings.GetListMultiColumnGroupStr(), 62,60);
end


On Command CmdResetListSql
begin
    listSql.RemoveListGroupTreeView();
    txt_help2.Text = "Siguiente Paso: Pulsar botón 'Ver Lista Guardada'" ;
end

On Command CmdReloadListSql
begin
    listSql.ShowListAsMultiColumnGroup(listSql.GetListMultiColumnGroupStr(), 62,60);
end
main
objects
begin
    of as frm
    i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

On Open begin
    CargaLista(lstStrings, "strings");
    lstSql.LoadSelect("select customers.state, customers.company , order_date, items.description,  price"+
                    " from orders, orderlines, items , customers"+
                    " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                    " and orderlines.supplier = items.supplier and orders.customer = customers.customer");
    
end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
Objects begin
    InstruSelect as char
end
begin
    pList.Reset();    
    pList.IconFile = "listaiconosgif";
    pList.FieldSeparator = "|";
    pList.SetColumnMask(7,4);

    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " items.description,  price " +
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer";
    if pType == "strings" then begin
        LoadString( pList, InstruSelect );
        pList.NumericColumnsFormattedToChar(true);
    end // if
   
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin
    c.Prepare(pInstruSelect);
    
    c.Open;
    
    While c.Fetch(state, company , order_date, pay_date , order_status , 
                description, price ).Found
    Do begin
    
        texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|" +  description +"|"+ price.Using(12) ;
    
        j = pList.AddString(texto ,0);                        
        ++i;
        pList.SetListInfo(j, j);
    end
    c.Close.Free;
end

On Click btn_restaurarLString
objects begin
    lChAttr linea as char
    oStreamAttr as Stream
    i as smallint    
end
begin
    idpanel.Text = null;
    oStreamAttr.Open(ProjectDir()+"\EJGetListStatus1.txt", 1);
    
    While not oStreamAttr.EOF do begin
        oStreamAttr.ReadLineInto(linea);
        if linea is not null and linea != "" then begin
            lChAttr += linea;
        end    
    end
    lstStrings.SetListStatusStr(lChAttr);
    
    
    for i = 1 to lChAttr.NumWords(";") do begin
        idpanel.Text += lChAttr.GetWord(";", i) + 13.Character() + 10.Character();  
   end
   
end


On Click  btn_guardarLString
objects begin
    lChAttr as char
    oStreamAttr as Stream
    i as smallint    
end
begin
     idpanel.Text = null;
    oStreamAttr.Open(ProjectDir()+"\EJGetListStatus1.txt", 2);
    lChAttr = lstStrings.GetListStatusStr();
    oStreamAttr.Write(lChAttr).NewLine();
    oStreamAttr.Close();
    
    for i = 1 to lChAttr.NumWords(";") do begin
        idpanel.Text += lChAttr.GetWord(";", i) + 13.Character() + 10.Character();  
   end

end


On event Click control btn_guardarLSql(e as event)
objects begin
    lChAttr as char
    oStreamAttr as Stream
    i as smallint
end
begin
    txt_sql.Text = null;
    oStreamAttr.Open(ProjectDir()+"\EJGetListStatus2.txt", 2);
    lChAttr = lstSql.GetListStatusStr();
    oStreamAttr.Write(lChAttr).NewLine();
    oStreamAttr.Close();
    for i = 1 to lChAttr.NumWords(";") do begin
        txt_sql.Text += lChAttr.GetWord(";", i) + 13.Character() + 10.Character();  
   end


end

On event Click control btn_restaurarlSql(e as event)
objects begin
    lChAttr linea as char
    oStreamAttr as Stream
    i as smallint
end
begin
    txt_sql.Text = null;
    oStreamAttr.Open(ProjectDir()+"\EJGetListStatus2.txt", 1);
    While not oStreamAttr.EOF do begin
        oStreamAttr.ReadLineInto(linea);
        if linea is not null and linea != "" then begin
            lChAttr += linea;
        end    
    end
    lstSql.SetListStatusStr(lChAttr);
    for i = 1 to lChAttr.NumWords(";") do begin
        txt_sql.Text += lChAttr.GetWord(";", i) + 13.Character() + 10.Character();  
   end
   
end

main
objects
begin
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    f.Run();
    Sql.Disconnect();    
end

On Open
begin
    lstInfo.FieldSeparator = "|";
    setListStyle();
    refreshMemoryInfo();
end

private function setListStyle()
objects begin
    estilo_1 estilo_2 as integer
end
begin
    estilo_1 = lstInfo.CreateListCellStyle("microsoft sans seriff;Size=10;bold" ,Module.Rgb(0, 0, 0) ,Module.Rgb(255, 255, 255), 0);
    lstInfo.SetListColumnStyle(1, estilo_1);
    
    estilo_2 = lstInfo.CreateListCellStyle("microsoft sans seriff;bold;Size=10" ,Module.Rgb(0, 0, 255) ,Module.Rgb(255, 255, 255), 2);
    lstInfo.SetListColumnStyle(2, estilo_2);

    lstInfo.SetColumnWidth(1, 300);
    lstInfo.SetColumnWidth(2, 300);
end

private function refreshMemoryInfo()
objects
begin
    vMemoryStatus as decimal(12,0)
    vLstLine as char
    i as integer
    retVal as char
end
begin
    lstInfo.Reset();
    

    Module.GetMemoryStatus(1, vMemoryStatus);
    vLstLine = "% memoria usada|"+vMemoryStatus + " %";
    lstInfo.AddString(vLstLine);

    Module.GetMemoryStatus(2, vMemoryStatus);
    retVal = GetFormattedStrBytes(vMemoryStatus);
    vLstLine = "Total Memoria Física|"+retVal;
    lstInfo.AddString(vLstLine);

    Module.GetMemoryStatus(3, vMemoryStatus);
    retVal = GetFormattedStrBytes(vMemoryStatus);
    vLstLine = "Memoria Física Disponible|"+retVal;
    lstInfo.AddString(vLstLine);

    Module.GetMemoryStatus(4, vMemoryStatus);
    retVal = GetFormattedStrBytes(vMemoryStatus);
    vLstLine = "Tamaño del fichero de paginación|"+retVal;
    lstInfo.AddString(vLstLine);

    Module.GetMemoryStatus(5, vMemoryStatus);
    retVal = GetFormattedStrBytes(vMemoryStatus);
    vLstLine = "Bytes disponibles en fichero de paginación|"+retVal;
    lstInfo.AddString(vLstLine);

    Module.GetMemoryStatus(6, vMemoryStatus);
    retVal = GetFormattedStrBytes(vMemoryStatus);
    vLstLine = "Total virtual|"+retVal;
    lstInfo.AddString(vLstLine);

    Module.GetMemoryStatus(7, vMemoryStatus);
    retVal = GetFormattedStrBytes(vMemoryStatus);
    vLstLine = "Memoria virtual disponible|"+retVal;
    lstInfo.AddString(vLstLine);

end

private function GetFormattedStrBytes(valDec as decimal) return char
objects begin
    retStr as char 
    div as integer
    retInt as integer
end
begin
    retStr = valDec.Using(11) + " bytes";
    return retStr;
end

private function GetFormattedStrMB(valDec as decimal) return char
objects begin
    retStr as char 
    div as integer
    retInt as integer
end
begin

    div = 1048576;
    retInt = (valDec/div);
    retStr = "" + retInt + " MB";
    return retStr;

end


On Click btnRefresh
begin
    refreshMemoryInfo();
end
main
begin
    f.Run;
end

on command AddAlbaran begin
  albaranes.Add;
end

on command UpdateAlbaran begin
  albaranes.Update;
end

on command DeleteAlbaran begin
 albaranes.Delete;
end

on command AddLinea begin
  lineas.Add;
end

on command UpdateLinea begin
    albaranes.ChildTable.Update;
end

On Add Table(tab as char)
begin
if tab== "clientes" then
    "Añadida columna".Trace;
end

On Delete Table(tab as char)
begin
if tab== "albaranes" then
    "Fila borrada".Trace;
end

On Update Table(tab as char)
begin
if tab== "clientes" then
    "Fila modificada".Trace;
end

on New Table(tab as char)
begin
if tab== "clientes" then
    "La tabla clientes ya esta en estado New".Trace;
end

on command DeleteLinea begin
    lineas.Delete;
end

on Click borderby
begin
    albaranes.OrderBy("fecha_albaran");
end

on Fetch Table(tab as char) begin
    if tab == "lineas" then
        lineas.totlinea = (lineas.cantidad * lineas.precio)*(100-lineas.descuento)/100;
end
main
objects
begin
    miForm as triple
    s as char
end
begin
    Sql.Connect("almafac");
    miForm.AttachServer(Sql);
    s = miForm.GetQueryByForm;
    s.Trace;
    miForm.Run;
    Sql.Disconnect;
    "Fin".Trace;
end

On Open
begin
    numSmallint = 12345;
  
    
    txtSmallint = " ";

    txtSmallintConvertido = " ";
 
end

On Click btnConvertir
objects begin
    
end
begin
    txtSmallint.Text = numSmallint.ToCharHex;
    txtSmallintConvertido.Text = txtSmallint.Text.GetSmallintFromCharHex();

 

end
main
objects
begin
    f as frm
end
begin
    f.Run;
end



On Open
begin
    SetTimer(555 , 1000);
end

On Timer (idtimer as integer)
begin
    txt_time_local_GMT = GetLocalTimeFormattedGMT();
    txt_time_utc = GetUTCTimeFormatted();
    txt_time_local =  GetLocalTimeFormatted();
end

private function GetUTCTimeFormatted() return char
objects begin
    dia mes anno diasemana hora minutos segundos milisegundos as integer
    str as char
end
begin

    Module.GetSystemTimeUTC(anno , mes, diasemana , dia, hora, minutos, segundos, milisegundos);    

    str = 
        MyGetIntPadding(anno, 2, "0") + "-" + MyGetIntPadding(mes, 2, "0") + "-" + MyGetIntPadding(dia, 2, "0") + "T" + 
        MyGetIntPadding(hora, 2, "0") + ":" + MyGetIntPadding(minutos, 2, "0") + ":" + MyGetIntPadding(segundos, 2, "0") + "Z";
    
    return str;
end

private function GetLocalTimeFormattedGMT() return char
objects begin
    dia mes anno diasemana hora minutos segundos milisegundos as integer
    str as char
    nowTime as DateTime    
end
begin

    nowTime = current;
    
    anno = nowTime.GetDate().Year();
    mes = nowTime.GetDate().Month();
    diasemana = nowTime.GetDate().WeekDay();
    dia = nowTime.GetDate().Day();
    hora = nowTime.GetTime().Hour();
    minutos = nowTime.GetTime().Minute();
    segundos = nowTime.GetTime().Second();
    milisegundos = 0;

    str = 
        MyGetIntPadding(anno, 2, "0") + "-" + MyGetIntPadding(mes, 2, "0") + "-" + MyGetIntPadding(dia, 2, "0") + "T" + 
        MyGetIntPadding(hora, 2, "0") + ":" + MyGetIntPadding(minutos, 2, "0") + ":" + MyGetIntPadding(segundos, 2, "0");
        
    return str;
end


private function GetLocalTimeFormatted() return char
objects begin
    dia mes anno diasemana hora minutos segundos milisegundos as integer
    str as char
    nowTime as DateTime    
    utcTime as DateTime
    diffTime as Interval
    strDiffHours as char
    strDiffHours_2 as char
end
begin
    nowTime = current;
    
    Module.GetSystemTimeUTC(anno , mes, diasemana , dia, hora, minutos, segundos, milisegundos);    

    utcTime = MyGetIntPadding(dia, 2, "0") + "/" + MyGetIntPadding(mes, 2, "0") + "/" + MyGetIntPadding(anno, 4, "0") + " " +
        MyGetIntPadding(hora, 2, "0") + ":" + MyGetIntPadding(minutos, 2, "0") + ":" + MyGetIntPadding(segundos, 2, "0");
        
    diffTime = utcTime - nowTime;
    strDiffHours = diffTime.Char.GetWord(" ", 2);
    strDiffHours_2 = strDiffHours.GetWord(":", 1) + ":" + strDiffHours.GetWord(":", 2);
    if utcTime > nowTime then begin
        strDiffHours_2 = "-" + strDiffHours_2;
    end else begin
        strDiffHours_2 = "+" + strDiffHours_2;
    end
    
    str = 
        MyGetIntPadding(anno, 2, "0") + "-" + MyGetIntPadding(mes, 2, "0") + "-" + MyGetIntPadding(dia, 2, "0") + "T" + 
        MyGetIntPadding(hora, 2, "0") + ":" + MyGetIntPadding(minutos, 2, "0") + ":" + MyGetIntPadding(segundos, 2, "0") + strDiffHours_2;

        
    return str;
end

private function MyGetIntPadding(number as integer, stringLength as integer, paddingChar as char) return char
objects begin
    auxStr as char
    retStr as char
    i len1 j len2 as integer
end
begin
    auxStr = number;
    
    if auxStr.Length >= stringLength then begin
        retStr = auxStr;
    end else begin
        retStr = paddingChar[1,1].StrRepeat(stringLength);
        
        len1 = retStr.Length();
        len2 = auxStr.Length();
        j = len1;
        
        for i = len2 down to 1 do begin
            retStr.ReplaceAt(auxStr[i],j);
            --j;
        end
    end
    
    return retStr;
end
 
main
objects
begin
end
begin
    f.Run;
end


On Command CmdgetFile 
Objects begin
    Url as char
end
begin
    
    if idRadioButton.Selected == 1 then begin
         Url = "ftp://"+ cUsuario +":" +cPassword+ "@" + cUrl;
         Url.Trace();
         
    end
    else begin
        Url = "http://"+ cUsuario +":" +cPassword+ "@" + cUrl;
        Url.Trace;
    end    
    idPanel.Text = "ftp://"+ cUsuario +":" +cPassword+ "@"+ cUrl;


    
    if Module.GetUrlFile(Url ,cRutaLocal ,True ,True) then begin
        idPanel.Text = "";
        idPanel.Text = "Descarga completada con exito";
    end
    else begin
        idPanel.Text = " ERROR ";
    end
end

main
objects
begin
     of as frm
end
begin
    of.Run();
end

On Command CmdgetFile 
begin

   

    if Module.GetUrlFileEx(Url ,cRutaLocal ,True ,True) then begin
        idPanel.Text = "";
        idPanel.Text = "Descarga completada con exito";
    end
    else begin
        idPanel.Text = " ERROR ";
    end
end


On event Click control idRadioButton(e as event)
Objects begin

end
begin
    switch 
    begin
        case idRadioButton.Selected == 1:
            Url = "sftp://"+ cUsuario +":" +cPassword+ "@" + vHost + cUrl;            
        case idRadioButton.Selected == 2:begin
           ef_url.Text = Url = cUrl ;
        end   
        default:
            ;
    end
    idPanel.Text = Url;

end
main
objects
begin
    ofrm as frm
end
begin
    ofrm.Run();
    
end

main
objects
begin
    vUserName as Char
end
begin
    GetUserName(vUserName);
    vUserName.Trace;
end


main
objects
begin
    vVolumeFileSystemName as Char
end
begin
    GetVolumeFileSystemName("c:\", vVolumeFileSystemName);
    vVolumeFileSystemName.Trace;
end


main
objects
begin
    vVolumeName as Char
end
begin
    GetVolumeName("c:\", vVolumeName);
    vVolumeName.Trace;
end


main
objects
begin
    vVolumeSerialNumber as Char
end
begin
    GetVolumeSerialNumber("c:\", vVolumeSerialNumber);
    vVolumeSerialNumber.Trace;
end

main
objects begin
    vMajorVersion as Integer
    vMinorVersion as Integer
    vBuildNumber as Integer
    vPlatformId as Integer
    CompleteVersionString as Char
end
begin
    GetWindowsVersion(vMajorVersion, vMinorVersion, vBuildNumber, vPlatformId, CompleteVersionString);
    vMajorVersion.Trace;
    vMinorVersion.Trace;
    vBuildNumber.Trace;
    vPlatformId.Trace;    
    CompleteVersionString.Trace;
end


on Click(sender as char)
objects begin
    i as smallint
end
begin
    switch(sender)
    begin
        case "bget":
        begin
            i=migrid.Count;
            i.Trace;
        end
        case "btrunc":
        begin
            migrid.Truncate(2);   
        end
    end
end
main
objects begin
Miform as fr
end
begin
Miform.Run;
end


main
objects
begin
    miForm as CFormLineas
    st as SqlStatement
    srv as SqlServer
end
begin
    srv.Connect("almacen");
    miForm.AttachServer(srv);
    miForm.Query;
    miForm.Run;
    srv.Disconnect;
    "Fin".Trace;
end

main
objects
begin
    stm as SqlStatement
    cur as SqlCursor
    vstate1 as integer
    vcompany as char
    vitem as smallint
    vprcost as  money    
    vstate2 as smallint
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("Stock");
    cur.Prepare("select suppliers.supplier, company, item, cost_price, state "
                "  from suppliers, items "
                "  where suppliers.supplier = items.supplier "
                "            and suppliers.supplier < 3"
                "  order by 1");
    cur.GroupBy(1);
    cur.Totalize(4);
    cur.Open;
    cur.Fetch(vstate1,vcompany,vitem,vprcost,vstate2);
    while(cur.Found) do 
        begin
            if(cur.BreakLevel) == 1 then
            begin
                cur.GroupSum(1, 4).Trace; //Suma por ruptura de grupo
            end
            cur.Fetch(vstate1,vcompany,vitem,vprcost,vstate2);
        end

    if(cur.BreakLevel) == 1 then begin
       cur.GroupSum(1, 4).Trace; //Suma por ruptura de grupo
    end
    cur.GroupSum(0, 4).Trace; //Suma Total
    cur.Close.Free;
end


main
objects
begin
    idRequest as Integer
end
begin
    idRequest = CosHttpNewRequest();
    CosHttpUseSSL(idRequest, FALSE);
    CosHttpRequestSetUrl(idRequest, "http://localhost:8081/stock/rest/headerHTTP/GetHeader");
    CosHttpRequestSetMethod(idRequest, "GET");
    CosHttpSetResponseFile(idRequest, ProjectDir() + "\responseFile.txt");
    CosHttpSetResponseHeaderFile(idRequest,ProjectDir() + "\headerFile.txt");
    CosHttpSendRequest(idRequest, false);
    CosHttpGetErrorStr(idRequest).Trace();
    CosHttpFreeRequest(idRequest);
end



On Open
Begin
 

End

On Command CmdAceptar
    objects begin
        oLstStates as LstStates
    end
begin
    oLstStates.listado();
end




On Command CmdHideExportPDFButton
objects begin
    oLstStates as LstStates
end
begin
    oPrn.HideExportPDFButton(TRUE);
    oLstStates.listado();
end

On Command CmdMostrarExportPDFButton
objects begin
    oLstStates as LstStates
end
begin
    oPrn.HideExportPDFButton(FALSE);
    oLstStates.listado();
end
Public listado()
    Objects begin
        lc as SqlCursor
        lline as Smallint 
    end
Begin
    lline = 0;
    lc.Prepare("select customer, company, surname, fname, phone from customers ");
    lc.Into(customer, company, surname, fname, phone);
    lc.Open;
    While lc.Fetch.Found do
    begin
        ++lline;
        MyGroup.CurrentRow = lline;
        MyGroup.PrintVars();
    end
    if {MyGroup.CurrentRow != 1 and}  MyGroup.CurrentRow is not null then begin
        oPrn.SendPage(self);
 
        oPrn.Preview();
    end
    else "No hay datos para imprimir. Eliga otro estado".Trace;
    lc.Close.Free;

End
main
objects
begin
    oFrmCondition as FrmCondition
end
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
    oFrmCondition.Run;
end

On Open
Begin
    SetEditMode;
    Query;
End


On Command Activar
Begin
    grd.SetProperty("HideNewRow",true);
End


On Command Desactivar
Begin
    grd.SetProperty("HideNewRow", false);
End


On Command CancelEdit
Begin
    CancelEdit;
    Query;
    
End
main
objects
begin
     o_f as Frm
end
begin
    Sql.AttachConnection();
    Sql.Connect("stock");
     o_f.Run;
    Sql.Disconnect;
end

On Click (sender as char)
objects begin
    s as smallint
end
begin
    switch sender
    begin
        case "nexticon": // Display the next icon of the file
        begin
            s = caja.Icon;
            caja.Icon = s + 1;
        end         
        case "previousicon": // Display the previous icon of the file
        begin
            s = caja.Icon;
            caja.Icon = s - 1;
      end         
    end
end
main
objects begin
    f as MiForm
end
begin
    f.Run;
end

main
begin
    PutEnv("DBDATE","MDY2-");
    
    
    if today.Char[1,5] between "03-21" and "06-20"
    then
        "it is spring!".Trace;
    else
        "it is not spring!".Trace;

    
    if not (today.Char[1,5] between "03-21" and "06-20")
    then
        "it is not spring! ".Trace;   
    else
        "it is spring!".Trace;
        
end

On Click butfile
objects begin
    s as char
end
begin
    s = text1.Text;
    list1.IconFile = s;
    s.Trace;
end

On Open 
objects begin
    i j root indi indj as smallint
end
begin
    i = 1;
    root = list1.AddTreeString(0, "root");  
    list1.SetListIcon(root, 2,3);  
    while i <= 3 do begin
        indi = list1.AddTreeString(root, "son" + i);     
        list1.SetListIcon(indi, 4,5);
        j = 1;
        while j <= 5 do begin
            indj = list1.AddTreeString(indi, "grandson" + j);        
            list1.SetListIcon(indj, 6,7);   
            ++j;
        end     
        ++i;
    end
end



main
objects
begin
f as MForm
s as smallint
end
begin

    f.mipanel.Text="Choose an icon file and click on butfile ";
    f.Run; 
  
end

On Open
begin
    Module.LoadCustomColors(ProjectDir() + "\themes\theme_black.ini");

end

private function repaint
begin
    Frame.Refresh();
end


On event Click control btnCambiaEstilo(e as event)
objects begin
    fileName as char
    i as integer
end
begin
    fileName = TreeWalk(ProjectDir() + "\themes");
    if fileName is not null then begin
        Module.LoadCustomColors(fileName);
        repaint;
        fileVisualStyle = fileName;
    end


end

On event Click control chk_ignoreCustomColors(e as event)
begin
    if chk_ignoreCustomColors.Checked == TRUE then begin
        Frame.Next(3).IgnoreCustomColors(true);
        lst.Reset();
        lst.AddString(Frame.Next(3).Name());
        repaint;
        lFnIgnoreCustomColors(Frame.Next(3).Next(3));
         
    end
    else begin
         Frame.Next(3).IgnoreCustomColors(false);
         lst.Reset();
         lst.AddString(Frame.Next(3).Name());
         repaint;
         lFnActiveCustomColors(Frame.Next(3).Next(3));
         
    end 
end

Private lFnIgnoreCustomColors(pControl as SimpleControl) 
begin
    lst.AddString(pControl.Name());
    if pControl is not null then begin
        pControl.IgnoreCustomColors(true);
        repaint;
        
        lFnIgnoreCustomColors(pControl.Next(7));
    end  
end

Private lFnActiveCustomColors(pControl as SimpleControl) 
begin
    lst.AddString(pControl.Name());
    if pControl is not null then begin
        pControl.IgnoreCustomColors(false);
        repaint;
        
        lFnActiveCustomColors(pControl.Next(7));
    end  
end


main
objects
begin
end
begin
    Module.PutEnv("COSMOSVISUALMODE","7");
    f.Run;
end

Public Listado 
Objects begin
    oprDocPDF oprDocInmpresora as PrnDocument
    str as char
end    
begin

    Cirilico;
    Chino;
    Griego;
    Turco;
    v1 = "versión";
    PrintVars();
   oprDocPDF.WritePage(self);
   oprDocPDF.Preview(NULL);
   oprDocPDF.ClosePrinter();
end

private function Cirilico
objects begin
    str as char
end
begin
    str.LoadFromFile(ProjectDir() + "\pdfmulticharset\cirilico_utf8.txt");
    str.UTF8ToAnsi(1251);
    str = str.SubString(1, 50);
    cirilico_1.Text = str;
    cirilico_2.Text = str;
    cirilico_3.Text = str;
    
    str.LoadFromFile(ProjectDir() + "\pdfmulticharset\textoCirilicoISO8859-5.txt");
    str.AnsiToUTF8(28595).UTF8ToAnsi(1251);
    str = str.SubString(1, 50);
    cirilico_4.Text = str;
    
    str.LoadFromFile(ProjectDir() + "\pdfmulticharset\ruso_1251.txt");
    str = str.SubString(1, 50);
    cirilico_5.Text = str;
end

private function Chino
objects begin
    str as char
end
begin
    str.LoadFromFile(ProjectDir() + "\pdfmulticharset\chino_cp936.txt");
    str = str.SubString(1, 50);
    chino_1.Text = str;
    chino_2.Text = str;
    
    str.LoadFromFile(ProjectDir() + "\pdfmulticharset\chino_GB2312.txt");
    str = str.SubString(1, 50);
    chino_3.Text = str;
end


private function Griego
objects begin
    str as char
end
begin
    str.LoadFromFile(ProjectDir() + "\pdfmulticharset\griego_utf8.txt");
    str.UTF8ToAnsi(1253);
    str = str.SubString(1, 50);
    griego_1.Text = str;
end

private function Turco
objects begin
    str as char
end
begin
    str.LoadFromFile(ProjectDir() + "\pdfmulticharset\turco_utf8.txt");
    str.UTF8ToAnsi(1254);
    str = str.SubString(1, 50);
    turco_1.Text = str;
end

main
objects
begin
    o as cPAge
end
begin
    MessageBox("Si al imprimir el listado  a pdf no se muestra correctamente alguno de los texto del mismo esto puede deberse a que no tiene "+
                "instalada las fuentes utilizadas en el mismo."+ 13.Character + 10.Character() +
                "Para instalar las fuentes necesarias ir a INICIO - CONFIGURACION - APLICACIONES Y CARACTERÍSTICAS - CARACTERÍSTICAS OPCIONALES - "+
                "AGREGAR UNA CARACTERÍSTICA- Seleccionar fuente" , "WARNING");
    o.Listado;
end


main
objects begin
    n as smallint
    b as boolean
end
begin
    n = 3;
    if 5 in(1,3,5,6,8,12)
    then
        "5 is in (1,3,5,6,8,12)".Trace;
    else
        "5 isn't in (1,3,5,6,8,12)".Trace;
end

Public ExportarListas( pList as SimpleFormControl)
Objects begin
    lChName as char
end
begin
    lChName = pList.Name();
    pList.ExportToExcel((GetEnv("DBTEMP") +"\"+lChName+"Excel.xls"));
    pList.ExportToHTML(GetEnv("DBTEMP") +"\"+lChName+"Html.htm");
    pList.ExportToODS((GetEnv("DBTEMP") +"\"+lChName+"ODS.ods"));
    pList.ExportToPDF(GetEnv("DBTEMP") +"\"+lChName+"Pdf.pdf");


end


main
objects begin
    n as smallint
end
begin
    n = 3;
    n.Trace;
    ++n;
    n.Trace;
end

Public Start begin    
    PutEnv("COSMOSVISUALMODE", "7");
end

On Open 
objects begin
    i as smallint
end
begin
    i=mlist.AddString("a1");
    i=mlist.AddString("a2");
    i=mlist.AddString("a3");
    i=mlist.AddString("a4"); 
end

On Click binsert
objects begin
    s as char
    i as smallint
end
begin
    s=medit.Text; 
    i = mlist.Selected;
    i=mlist.InsertString(i,s);  
end

main
objects begin
    Mform as ff
end
begin
    Mform.Run;
end

On Click bvisible
begin
    Midrop.Invisible=FALSE;
    isinvisible();
end

On Click botinv
begin
    Midrop.Invisible=TRUE;
    isinvisible();
end

public isinvisible()
begin
    if Midrop.Invisible 
    then
        "the control is invisible".Trace;
    else
        "the control is visible".Trace;
end
Main 
objects begin
    Miform as fr
end
begin
    Miform.Run; 
end


main
objects
begin
    
end
begin
    Module.IsLicenseRegistered().Trace();
end


On Click btn_show_status
begin
    chk_wnd_maximized.Checked = self.IsMaximized;
    chk_wnd_minimized.Checked = self.IsMinimized;
    chk_wnd_open.Checked = self.IsOpen;
end

main
objects
begin
end
begin
    f1.Run();
end

main
objects
begin
end
begin
    if module.IsX64Runtime() then "RT x64".Trace();
    if not module.IsX64Runtime() then "RT x86".Trace();
    
end

main
objects
begin
    lJson as Json
end
begin
    lJson.SetNull("nombre"); // no añade el elemento
    lJson.Set("Apellido1", "lópez"); 
    lJson.Set("Apellido2", ""); //añade el elemento pero en lugar de asignar valor  pone llaves
    lJson.Set("Edad", "23"); 
    lJson.Trace;
end


On Click blabel
objects begin
    s as char
end
begin
    mibox.Label="Styles"; 
    mitab.Label="Page A1|Page A2";
end
main 
objects begin
    Miform as fr
end
begin
    Miform.Run;
end

main
objects begin
    n as smallint
    b as boolean
end
begin
b.Trace;
n = 3;
n.Trace;
b= n <= 5;
b.Trace;
end

main
objects begin
    n as smallint
    b as boolean
end
begin
    b.Trace;
    n = 3;
    n.Trace;
    b= n < 5;
    b.Trace;
end

public dll "ttchartdll.dll" InitChartWindow(hWindow as integer, xsize as integer, ysize as integer) return boolean

public dll "ttchartdll.dll" NewXYChart(hWindow as integer)

public dll "ttchartdll.dll" NewPieChart(hWindow as integer)

public dll "ttchartdll.dll" ChartLayerSet3D(hWindow as integer, nchartlayer as integer, set3d as boolean)

public dll "ttchartdll.dll" ChartLayerIs3D(hWindow as integer, nchartlayer as integer) return boolean

public dll "ttchartdll.dll" NewChartLayer  (hWindow as integer, nchartlayer as integer, chartlayertype as integer) return boolean

public dll "ttchartdll.dll" NewChartElement(hWindow as integer, nchartlayer as integer, elementvalue as decimal, elementcolorFrom as integer, elementcolorTo as integer, elementLabel as Char, colorLabel as integer) return integer

public dll "ttchartdll.dll" RemoveChartElement(hWindow as integer, nchartlayer as integer, elementId as integer) return boolean

public dll "ttchartdll.dll" UpdateChartElement(hWindow as integer, nchartlayer as integer, elementId as integer, elementvalue as decimal, elementcolorFrom as integer, elementcolorTo as integer, elementLabel as Char, colorLabel as integer) return integer

public dll "ttchartdll.dll" SetChartBackColor(hWindow as integer, chartColorFrom as integer, chartColorTo as integer)

public dll "ttchartdll.dll" ChartSwapXY(hWindow as integer, sethoriz as boolean) return boolean

public dll "ttchartdll.dll" ChartIsHorizontal(hWindow as integer) return boolean

public dll "ttchartdll.dll" ChartSetXAxysLabels(hWindow as integer, labels as char) return boolean

public dll "ttchartdll.dll" ChartSetTitle(hWindow as integer, chartTitle as char, chartFontName as char, chartTitleColor as integer) return boolean

public dll "ttchartdll.dll" ChartAddLegend(hWindow as integer, LegendTxtList as char, LegendType as smallint, textColorType as smallint, backBoxColor as integer, backBoxPattern as smallint) return boolean

public dll "ttchartdll.dll" ChartSetPanelBackColor(hWindow as integer, PanelBackColor as integer) return boolean

public dll "ttchartdll.dll" ChartEnableBlur(hWindow as integer, EnableBlur as boolean) return boolean

public dll "ttchartdll.dll" ChartRemove(hWindow as integer) return boolean

public dll "ttchartdll.dll" ChartLayerSetDot(hWindow as integer,  nchartlayer as integer, dotSize as decimal, dotColor as integer, dotType as integer) return boolean

public dll "ttchartdll.dll" ChartElementSetDot(hWindow as integer,  nchartlayer as integer, elementId as integer, dotSize as decimal, dotColor as integer, dotType as integer) return boolean

public dll "ttchartdll.dll" ChartLayerSetLineWidth(hWindow as integer,  nchartlayer as integer, lineWidth as decimal) return boolean

public dll "ttchartdll.dll" ChartLayerSetCurvedLine(hWindow as integer,  nchartlayer as integer, iscurved as boolean) return boolean

public dll "ttchartdll.dll" ChartLayerIsCurvedLine(hWindow as integer, nchartlayer as integer) return boolean



public dll "ttchartdll.dll" ChartHideLineOnNullLabel(hWindow as integer, hideLine as boolean) return boolean
public dll "ttchartdll.dll" ChartIsHiddenLineOnNullLabel(hWindow as integer) return boolean

public dll "ttchartdll.dll" ChartSetMultiBarType(hWindow as integer, multiBarType as smallint) return boolean

public dll "ttchartdll.dll" ChartLayerShiftToSecondaryYAxis(hWindow as integer, nchartlayer as integer, show as boolean)
public dll "ttchartdll.dll" ChartSetShortYAxisLabel(hWindow as integer, mainYAxis as boolean, doSet as boolean) return boolean
public dll "ttchartdll.dll" ChartSetTitleScale(hWindow as integer, scale as smallint) return boolean
public dll "ttchartdll.dll" ChartSetYAxisColorLabel(hWindow as integer, primaryYAxis as boolean, textColor as integer) return boolean

public dll "ttchartdll.dll" ChartShowElementLabelAsTooltip(hWindow as integer, showAsTooltip as boolean) return boolean
public dll "ttchartdll.dll" ChartSetXAxisColorLabel(hWindow as integer, textColor as integer) return boolean
public dll "ttchartdll.dll" ChartSetXAxisColorLine(hWindow as integer, lineColor as integer) return boolean
public dll "ttchartdll.dll" ChartSetYAxisColorLine(hWindow as integer, lineColor as integer) return boolean

public dll "ttchartdll.dll" ChartSetViewDataRange(hWindow as integer, mainYAxis as boolean, enable as boolean, minValue as decimal, maxValue as decimal) return boolean
public dll "ttchartdll.dll" ChartSetYAxisLabelScale(hWindow as integer, precision as integer, mainYAxis as boolean)

public dll "ttchartdll.dll" ChartExportImage(hWindow as integer, outFile as char, fileFormat as char) return boolean

public dll "ttchartdll.dll"  ChartLegendSetXShift(hWindow as integer, xShift as decimal) return boolean
public dll "ttchartdll.dll"  ChartGraphSetXShift(hWindow as integer, xShift as decimal) return boolean

public dll "ttchartdll.dll"  ChartGraphRadarSetScaleType(hWindow as integer, scaleType as integer) return boolean


public function Start
begin
    PutEnv("DBPATH", ProjectDir);
    Sql.Connect("stock");
end

public function Ending
begin
    Sql.Disconnect;
end


public dll "coscompressdll.dll" CosCompressNew() return integer
public dll "coscompressdll.dll" CosCompressAddFile (zipId as integer, fileFrom as char, fileTo as char) return integer
public dll "coscompressdll.dll" CosCompressAddFolder (zipId as integer, folderFrom as char, folderTo as char) return integer
public dll "coscompressdll.dll" CosCompressCreateFolder (zipId as integer, folderName as char) return integer
public dll "coscompressdll.dll" CosCompressSetZipLevel (zipId as integer, level as integer) return integer
public dll "coscompressdll.dll" CosCompressSave (zipId as integer, outFile as char, format as char, showProgressWindow as boolean) return integer
public dll "coscompressdll.dll" CosCompressFree (zipId as integer) return integer
public dll "coscompressdll.dll" CosCompressExtract (compressedFile as char, outputFolder as char, format as char, showProgressWindow as boolean) return integer
public dll "coscompressdll.dll" CosCompressSetPassword (zipId as integer, password as char) return integer
public dll "coscompressdll.dll" CosCompressExtractEx(file as char, folder as char, format as char, showProgressWindow as boolean, password as char) return integer



public dll "coshttpdll.dll" CosHttpNewRequest() return integer 
public dll "coshttpdll.dll" CosHttpRequestSetUrl(requestID as integer, url as char) return integer
public dll "coshttpdll.dll" CosHttpRequestSetMethod(requestID as integer, method as char) return integer
public dll "coshttpdll.dll" CosHttpRequestAddHeaderStr(requestID as integer, headerStr as char) return integer
public dll "coshttpdll.dll" CosHttpRequestSetBody(requestID as integer, bodyStr as char, fromFile as boolean) return integer
public dll "coshttpdll.dll" CosHttpSetResponseFile(requestID as integer, responseFile as char) return integer
public dll "coshttpdll.dll" CosHttpSetResponseHeaderFile(requestID as integer, responseHeaderFile as char) return integer
public dll "coshttpdll.dll" CosHttpSendRequest(requestID as integer, onlyHeaders as boolean) return integer
public dll "coshttpdll.dll" CosHttpGetReturnCode(requestID as integer) return integer
public dll "coshttpdll.dll" CosHttpFreeRequest(requestID as integer) return integer
public dll "coshttpdll.dll" CosHttpUseSSL(requestID as integer, useSSL as boolean) return integer 
public dll "coshttpdll.dll" CosHttpIncludeHeaderInResponse(requestID as integer, includeHeader as boolean) return integer 
public dll "coshttpdll.dll" CosHttpSetAuthUser(requestID as integer, user as char) return integer 
public dll "coshttpdll.dll" CosHttpSetAuthPasswd(requestID as integer, passwd as char) return integer
public dll "coshttpdll.dll" CosHttpSetAuthMethod(requestID as integer, authMethod as integer) return integer
public dll "coshttpdll.dll" CosHttpSetTimeout(requestID as integer, secondsTimeout  as integer) return integer
public dll "coshttpdll.dll" CosHttpGetErrorStr(requestID as integer) return char

public getTxtCodeHttp(pCode as integer) return char
Objects begin
    lChText as char
    
end
begin
    
    switch pCode
    begin
        case 200:
            lChText = 'OK';
        case 201:
            lChText = 'Creado';//La petición ha sido completada y ha resultado en la creación de un nuevo recurso.
        case 202:
            lChText = 'Aceptada';//La petición ha sido aceptada para procesamiento, pero este no ha sido completado. La petición eventualmente pudiere no ser satisfecha, ya que podría ser no permitida o prohibida cuando el procesamiento tenga lugar.
        case 203:
            lChText = 'Información no autoritativa (desde HTTP/1.1)';
        case 204:
            lChText = 'Sin contenido';
        case 205 :
            lChText = 'Recargar contenido';
        case 206  :
            lChText = 'Contenido parcial';//La petición servirá parcialmente el contenido solicitado. Esta característica es utilizada por herramientas de descarga como wget para continuar la transferencia de descargas anteriormente interrumpidas, o para dividir una descarga y procesar las partes simultáneamente.
        case 207  :
            lChText = ' Estado múltiple ';//El cuerpo del mensaje que sigue es un mensaje XML y puede contener algún número de códigos de respuesta separados, dependiendo de cuántas subpeticiones sean hechas.

        case 300:
             lChText = 'Múltiples opciones';
        
        case 301:
             lChText = 'Movido permanentemente';
        case 302:
             lChText = 'Movido temporalmente';
        
        case 303:
             lChText = 'Vea otra (desde HTTP/1.1)';
        
        case 304:
             lChText = 'No modificado';
        
        case 305:
            lChText = 'Utilice un proxy (desde HTTP/1.1)';
        
        case 306 :
            lChText = 'Cambie de proxy';
        
        case 307 :
            lChText = 'Redirección temporal (desde HTTP/1.1)';
        case 400:
            lChText = 'Solicitud incorrecta';
        case 401:
            lChText = 'No autorizado';//la autentificación es posible pero ha fallado o aún no ha sido provista
        case 402:
            lChText = 'Pago requerido';//La petición ha sido aceptada para procesamiento, pero este no ha sido completado. La petición eventualmente pudiere no ser satisfecha, ya que podría ser no permitida o prohibida cuando el procesamiento tenga lugar.
        case 403:
            lChText = 'Prohibido';
        case 404:
            lChText = 'No encontrado';
        case 405 :
            lChText = 'Método no permitido'; //Una petición fue hecha a una URI utilizando un método de solicitud no soportado por dicha URI. 
        case 406  :
            lChText = 'No aceptable';
        case 407  :
            lChText = 'Autenticación Proxy requerida';
        case 408  :
            lChText = 'Tiempo de espera agotado';
        case 409  :
            lChText = ' Conflicto';
        case 410  :
            lChText = 'Ya no está disponible';
        default:
            lChText = "Falta añadir texto del error para el código "+ pCode;
    end
    return lChText;
end

Public GetTxtErrSendRequest(pCodErr as integer) return char
objects
begin
     lChText as char
end
begin
    switch pCodErr
    begin
        case 0: lChText='No ha ocurrido ningún error';
        case 1: lChText="Unsupported protocol";
        case 2: lChText="Failed initialization";
        case 3: lChText="RL using bad/illegal format or missing URL";
        case 4: lChText="A requested feature, protocol or option was not found built-in in this libcurl due to a build-time decision";
        case 5: lChText="Couldn't resolve proxy name";
        case 6: lChText="Couldn't resolve host name";
        case 7: lChText="Couldn't connect to server";
        case 8: lChText="FTP: weird server reply ";
        case 9: lChText="Access denied to remote resource";
        case 10: lChText="FTP: The server failed to connect to data port  Fallo al conectar al puerto";
        case 11: lChText="Password desconocida. FTP: unknown PASS reply";
        case 12: lChText="Time out";
        case 13: lChText="FTP: unknown PASV reply";
        case 14: lChText="Formato 227 respuesta desconocida. FTP: unknown 227 response format";
        case 15: lChText="FTP: can't figure out the host in the PASV response";
        case 16: lChText="Error in the HTTP2 framing layer";
        case 17: lChText="FTP: couldn't set file type";
        case 18: lChText="Transferred a partial file";
        case 19: lChText="FTP: couldn't retrieve (RETR failed) the specified file";
        case 20: lChText="Código obsoleto";
        case 21: lChText="Quote command returned error";
        case 22: lChText="HTTP response code said error";
        case 23: lChText="Failed writing received data to disk/application";
        case 24: lChText="Código obsoleto";
        case 25: lChText="Upload failed (at start/before it took off)";
        case 26: lChText="Failed to open/read local data from file/application";
        case 27: lChText="Out of memory";
        case 28: lChText="Timeout was reached";
        case 29: lChText="Código obsoleto";
        case 30: lChText="FTP: command PORT failed";
        case 31: lChText="FTP: command REST failed";
        case 32: lChText="Código obsoleto";
        case 33: lChText="Requested range was not delivered by the server";
        case 34: lChText="Internal problem setting up the POST";
        case 35: lChText="SSL connect error";
        case 36: lChText="Couldn't resume download";
        case 37: lChText="Couldn't read a file.";
        case 38: lChText="LDAP: cannot bind";
        case 39: lChText="LDAP: search failed";
        case 40: lChText="Código obsoleto";
        case 41: lChText="A required function in the library was not found";
        case 42: lChText="Operation was aborted by an application callback";
        case 43: lChText="A libcurl function was given a bad argumen";
        case 44: lChText="Código obsoleto";
        case 45: lChText="Failed binding local connection end";
        case 46: lChText="Código obsoleto";
        case 47: lChText="Number of redirects hit maximum amount";
        case 48: lChText="An unknown option was passed in to libcurl";
        case 49: lChText="Malformed telnet option";
        case 50: lChText="Código obsoleto";
        case 51: lChText="SSL peer certificate or SSH remote key was not OK";
        case 52: lChText="Server returned nothing (no headers, no data)";
        case 53: lChText="SSL crypto engine not found";
        case 54: lChText="Can not set SSL crypto engine as default";
        case 55: lChText="Failed sending data to the peer";
        case 56: lChText="Failure when receiving data from the peer";
        case 57: lChText="Código obsoleto";
        case 58: lChText="Problem with the local SSL certificate";
        case 59: lChText="Couldn't use specified SSL cipher";
        case 60: lChText="Peer certificate cannot be authenticated with given CA certificates";
        case 61: lChText="Unrecognized or bad HTTP Content or Transfer-Encoding";
        case 62: lChText="Invalid LDAP URL";
        case 63: lChText="Maximum file size exceeded";
        case 64: lChText="Requested SSL level failed";
        case 65: lChText="Send failed since rewinding of the data stream failed";
        case 66: lChText="Failed to initialise SSL crypto engine";
        case 67: lChText="Login denied";
        case 68: lChText="TFTP: File Not Found";
        case 69: lChText="TFTP: Access Violation";
        case 70: lChText="Disk full or allocation exceeded";
        case 71: lChText="TFTP: Illegal operation";
        case 72: lChText="TFTP: Unknown transfer ID";
        case 73: lChText="Remote file already exists";
        case 74: lChText="TFTP: No such user";
        case 75: lChText="Conversion failed";
        case 76: lChText="Caller must register CURLOPT_CONV_ callback options";
        case 77: lChText="Problem with the SSL CA cert (path? access rights?)";
        case 78: lChText="Remote file not found";
        case 79: lChText="Error in the SSH layer";
        case 80: lChText="Failed to shut down the SSL connection";
        case 81: lChText="Socket not ready for send/recv";
        case 82: lChText="Failed to load CRL file (path? access rights?, format?)";
        case 83: lChText="Issuer check against peer certificate failed";
        case 84: lChText="FTP: The server did not accept the PRET command.";
        case 85: lChText="RTSP CSeq mismatch or invalid CSeq";
        case 86: lChText="RTSP session error";
        case 87: lChText="Unable to parse FTP file list";
        case 88: lChText="Chunk callback failed";
        case 89: lChText="The max connection limit is reached";
        case 90: lChText="SSL public key does not match pinned public key";
    end
    return lChText;
end

public dll "cosqrdll.dll" CosQRNewCode() return integer
public dll "cosqrdll.dll" CosQRSetPropertyChar (qrcodeId as integer, propertyName as char, propertyValue as char) return integer
public dll "cosqrdll.dll" CosQRSetPropertyInt (qrcodeId as integer, propertyName as char, propertyValue as integer) return integer
public dll "cosqrdll.dll" CosQRGenerateCode (qrcodeId as integer) return integer
public dll "cosqrdll.dll" CosQRFreeCode (qrcodeId as integer) return integer

public dll "cossmtpdll.dll" CosSmtpNewMail() return integer
public dll "cossmtpdll.dll" CosSmtpFreeMail(mailId as integer) return integer
public dll "cossmtpdll.dll" CosSmtpSetUrl(mailId as integer, url as char) return integer
public dll "cossmtpdll.dll" CosSmtpSetFrom(mailId as integer, fromStr as char) return integer
public dll "cossmtpdll.dll" CosSmtpSetSubject(mailId as integer, subjectStr as char) return integer
public dll "cossmtpdll.dll" CosSmtpAddRecipient(mailId as integer, toStr as char, type as integer) return integer
public dll "cossmtpdll.dll" CosSmtpSetBody(mailId as integer, bodyStr as char, fromFile as boolean, isHTML as boolean, charset as char) return integer
public dll "cossmtpdll.dll" CosSmtpSendMail(mailId as integer) return integer
public dll "cossmtpdll.dll" CosSmtpSetAuthUser(mailId as integer , user as char) return integer
public dll "cossmtpdll.dll" CosSmtpSetAuthPasswd(mailId as integer , passwd as char) return integer
public dll "cossmtpdll.dll" CosSmtpSetTimeout(mailId as integer , timeout as integer) return integer
public dll "cossmtpdll.dll" CosSmtpUseSTARTTLS(mailId as integer , useSTARTTLS as boolean) return integer
public dll "cossmtpdll.dll" CosSmtpUseSSL(mailId as integer , useSSL as boolean) return integer
public dll "cossmtpdll.dll" CosSmtpAddResource(mailId as integer, file as char, mimeType as char, mimeName as char, mimeEncoder as char) return integer
public dll "cossmtpdll.dll" CosSmtpAttachFile(mailId as integer, file as char, mimeEncoder as char) return integer
public dll "cossmtpdll.dll" CosSmtpGetReturnCode(mailId as integer) return integer
public dll "cossmtpdll.dll" CosSmtpGetErrorStr(mailId as integer) return char


Public FnControlError(pError as Integer) return char
Objects begin
    lChErrMsg as char
end
begin
    
    switch pError
    begin
        case -1:
            lChErrMsg = "El identificador de email pasado como parámetro no existe o ha sido liberado previamente" ;
        case -2:
            lChErrMsg = "No se ha indicado servidor de envío con la función CosSmtpSetUrl" ;
        case -3:
            lChErrMsg = "No se ha indicado dirección de emisor de email con la función CosSmtpSetFrom" ;
        case -4:
            lChErrMsg = "No se ha indicado dirección de recepción de email con la función CosSmtpAddRecipient" ;
        default:
            lChErrMsg = Module.MsgText(pError);
    end
    Module.MessageBox(lChErrMsg);
end


public function RecorreDoc (pFileName as char, pOutFileName as char, pvarCharset as integer)
objects begin
    doc as integer
end
begin
    varCharset = pvarCharset;
    doc = TTXmlOpenDoc(Module.ProjectDir()+"\"+pFileName);
    NavigateTree(doc);
    TTXmlSaveFormatFileEnc(doc, pOutFileName, varCharset);
    TTXmlFreeDoc(doc);
end


public function NavigateElement(doc as integer, node as integer, level as integer)
objects begin
    curnode as integer
    nodeName as Char
    propValue as Char
    nodeType as integer
    nodeText as Char
end
begin

    curnode = node;
    while TRUE do
    begin
        if curnode == 0 then begin
            break;
        end else begin

            nodeType = TTXmlGetNodeType(doc, curnode);

            switch nodeType
            begin
                case 1://elemento
                begin
                    nodeName = TTXmlGetNodeName(doc, curnode);
                    
                    if nodeName == "eltexto" then
                    begin
                        nodeText = TTXmlGetNodeText(doc, curnode);
                        TTXmlUpdateNodeContent(doc, curnode, "texto modificado ñáéíóú", varCharset);
                        TTXmlUpdateNodeName(doc, curnode, "newtext", varCharset);
                    end    
                end                
                case 3://texto
                begin
                    
                end                
                case 8://comentario
                begin
                    nodeText = TTXmlGetNodeText(doc, curnode);
                    
                    TTXmlRemoveNode(doc, curnode);
                end                
                default:
                begin
                end
            end
        end
        NavigateElement(doc, TTXmlGetFirstChildNode(doc, curnode), level + 1);    
        curnode = TTXmlGetNextNode(doc, curnode);
    end
    
    
end

public function NavigateTree(doc as integer)
objects begin
    rootnode as integer
    node as integer
    curnode as integer
end
begin
    rootnode = TTXmlGetDocRootNode(doc);
    curnode = rootnode;
    NavigateElement(doc, curnode, 0);
end

public Start
begin
    ChDir(CosmosDir+"\bin");
end

public dll "prnpag32.dll" loadPage (pagina as char) return integer
public dll "prnpag32.dll" sendPage(hpage hprinter as integer )return boolean
public dll "prnpag32.dll" loadPrinter(impresora as char )return integer
public dll "prnpag32.dll" preview(hprinter as integer,hParent as integer,max as boolean)return boolean
public dll "prnpag32.dll" openPrinter (hprinter as integer) return boolean
public dll "prnpag32.dll" openPrinterEx (hprinter as integer, bDialog as boolean) return boolean
public dll "prnpag32.dll" closePrinter (hprinter as integer) return boolean


public dll "prnpag32.dll" clearPage(hPage as integer) return boolean
public dll "prnpag32.dll" getPageNum(hPage as integer) return smallint
public DLL "prnpag32.dll" setPaperName(hPrinter as integer,  paperName as char) return boolean
public DLL "prnpag32.dll" calculate(hPage as integer, hPrinter as integer)
public DLL "prnpag32.dll" setupPrinter(hPrinter as integer, hwndparent as integer) return boolean
public DLL "prnpag32.dll" setPaper(hPrinter as integer, paper as smallint)
public DLL "prnpag32.dll" writePage(hPage as integer, hPrinter as integer)
public DLL "prnpag32.dll" showFullOpenPrinterDialog(hPrinter as integer, showPrnDlg as boolean)



public DLL "prnpag32.dll" rootControl(HPage as integer) return integer
public DLL "prnpag32.dll" nextControl(HPage as integer, idm as integer) return integer
public DLL "prnpag32.dll" controlByName(HPage as integer, usrid as char) return integer
public DLL "prnpag32.dll" controlByUsrIdm(HPage as integer, usridm as integer) return integer
public DLL "prnpag32.dll" getControlName(HPage as integer,  idm as integer) return char
public DLL "prnpag32.dll" getControlUsrIdm(HPage as integer, idm as integer) return integer
public DLL "prnpag32.dll" childControl(HPage as integer, idm as integer) return integer
public DLL "prnpag32.dll" getWidth(HPage as integer, idm as integer) return integer
public DLL "prnpag32.dll" getHeight(HPage as integer, idm as integer) return integer
public DLL "prnpag32.dll" parentControl(HPage as integer, idm as integer) return integer
public DLL "prnpag32.dll" setControlText(HPage as integer, idm as integer, text as char)
public DLL "prnpag32.dll" count(HPage as integer, idm as integer) return integer
public DLL "prnpag32.dll" setPropStr(HPage as integer, idm as integer, prop as char, text as char)
public DLL "prnpag32.dll" addBand(HPage as integer, idmGroup as integer, idmBand as integer) return boolean
public DLL "prnpag32.dll" remainingSpace(HPage as integer, idm as integer) return integer
public DLL "prnpag32.dll" setPropInt(HPage as integer, idm as integer, prop as char, valueprop as integer)
public DLL "prnpag32.dll" getPropStr(HPage as integer, idm as integer, prop as char, var text as char, len as integer)
public DLL "prnpag32.dll" getPropInt(HPage as integer, idm as integer, prop as char) return integer
public DLL "prnpag32.dll" moveControl(HPage as integer, idm as integer, x as smallint, y as smallint) return boolean
public DLL "prnpag32.dll" changeSizeControl(HPage as integer, idm as integer, xSize as smallint, ySize as smallint) return boolean
public DLL "prnpag32.dll" getXPos(HPage as integer, idm as integer) return integer
public DLL "prnpag32.dll" getYPos(HPage as integer, idm as integer) return integer
public DLL "prnpag32.dll" setXPos(HPage as integer, idm as integer, xPos as smallint)
public DLL "prnpag32.dll" setYPos(HPage as integer, idm as integer, yPos as smallint)
public DLL "prnpag32.dll" setBoxRoundCornerRadio(HPage as integer, idm as integer, radio as smallint)



public dll "ttxmldll.dll" TTXmlNewDoc(charset as integer) return integer
public dll "ttxmldll.dll" TTXmlNewNode(NodeName as Char) return integer
public dll "ttxmldll.dll" TTXmlNewChild(Doc as integer, ParentNode as integer, NodeName as Char, NodeContent as Char) return integer
public dll "ttxmldll.dll" TTXmlDocSetRootElement(Doc as integer, RootNode as integer)
public dll "ttxmldll.dll" TTXmlNewEncodedProp(Doc as integer, Node as integer, PropName as Char, PropValue as Char, charset as integer)
public dll "ttxmldll.dll" TTXmlSaveFormatFileEnc(Doc as integer, OutputFileName as Char, charset as integer)
public dll "ttxmldll.dll" TTXmlFreeDoc(Doc as integer)
public dll "ttxmldll.dll" TTXmlGetDocBuffer(Doc as integer, charset as integer) return Char
public dll "ttxmldll.dll" TTXmlNewComment(Doc as integer, ParentNode as integer, Comment as Char) return integer
public dll "ttxmldll.dll" TTXmlNewTextChild(Doc as integer, ParentNode as integer, name as Char, Content as Char) return integer
public dll "ttxmldll.dll" TTXmlOpenDoc(docName as Char) return integer
public dll "ttxmldll.dll" TTXmlGetDocRootNode(Doc as integer) return integer
public dll "ttxmldll.dll" TTXmlGetFirstChildNode(Doc as integer, node as integer) return integer
public dll "ttxmldll.dll" TTXmlGetNextNode(Doc as integer, node as integer) return integer
public dll "ttxmldll.dll" TTXmlGetNodeName(Doc as integer, node as integer) return char
public dll "ttxmldll.dll" TTXmlGetEncodedProp(Doc as integer, node as integer, propName as Char, charset as integer) return char
public dll "ttxmldll.dll" TTXmlGetNodeType(Doc as integer, node as integer) return integer
public dll "ttxmldll.dll" TTXmlGetNodeText(Doc as integer, node as integer) return char
public dll "ttxmldll.dll" TTXmlRemoveNode(Doc as integer, node as integer) return boolean
public dll "ttxmldll.dll" TTXmlRemoveProperty(Doc as integer, node as integer, propName as Char) return boolean
public dll "ttxmldll.dll" TTXmlUpdateEncodedProp(Doc as integer, Node as integer, PropName as Char, PropValue as Char, charset as integer) return boolean
public dll "ttxmldll.dll" TTXmlCreateXPathContext(Doc as integer) return integer
public dll "ttxmldll.dll" TTXmlCreateXPathList(Doc as integer, xpathcontext as integer, expression as char) return integer
public dll "ttxmldll.dll" TTXmlGetXPathListNode(Doc as integer, xpathlist as integer, nodeNumber as integer) return integer
public dll "ttxmldll.dll" TTXmlGetXPathListNumNodes(Doc as integer, xpathlist as integer) return integer
public dll "ttxmldll.dll" TTXmlFreeXPathContext(Doc as integer, xpathcontext as integer)
public dll "ttxmldll.dll" TTXmlFreeXPathList(Doc as integer, xpathlist as integer)
public dll "ttxmldll.dll" TTXmlGetEncodedNodeText(Doc as integer, Node as integer, Charset as integer) return char
public dll "ttxmldll.dll" TTXmlNewEncodedTextChild(Doc as integer, ParentNode as integer, name as Char, Content as Char, charset as integer) return integer
public dll "ttxmldll.dll" TTXmlApplyXSLTAndSave(xmlFileName as char, xsltFileName as char, outXmlFile as char, var bytes as integer) return integer
public dll "ttxmldll.dll" TTXmlUpdateNodeContent(Doc as integer, node as integer, Content as Char, charset as integer)
public dll "ttxmldll.dll" TTXmlUpdateNodeName(Doc as integer, node as integer, Content as Char, charset as integer)
public dll "ttxmldll.dll" TTXmlIsBlankNode(Doc as integer, node as integer) return boolean
public dll "ttxmldll.dll" TTXmlGetDocEncodingString(doc as integer) return char
public dll "ttxmldll.dll" TTXmlGetEncodingIdFromString(encodingString as char) return integer
public dll "ttxmldll.dll" TTXmlGetEncodingStringFromId(encodingId as integer) return char

public dll "ttxmldll.dll" TTXmlOpenHtmlDoc(docName as Char) return integer
public dll "ttxmldll.dll" TTXmlOpenHtmlBuffer(buffer as Char) return integer


main 
begin
   ("The license number of comos is:" + License).Trace; 
end

main
objects begin
    s s1 as char
end
begin
    s = "hello";
    s1 = "h____";
    if s like s1 then
        "s is like s1".Trace;
    else
        "s isn't like s1".Trace;
end


On Open 
objects begin
    i as smallint
end
begin
    i=mlist.AddString("a1");
    i=mlist.AddString("a2");
    i=mlist.AddString("a3");
    i=mlist.AddString("a4"); 
end

On Click(sender as char)
objects begin
    s as char
    i as smallint
end
begin
switch sender
begin
    case "badd":
    begin
        s=medit.Text; 
        i=mlist.AddString(s); 
        ("The list has "+ mlist.Count + " elements").Trace;
    end
    case "bdel":
    begin
        i=mlist.Selected; 
        i=mlist.DeleteString(i);
        ("The element" +i + "has been deleted").Trace;  
        ("the list has "+ mlist.Count + " elements").Trace;
    end
end
end

main
objects begin
    Miform as ff
end
begin
    Miform.Run; 
end

On Open 
begin
    list1.GetColumnChars(3).Trace;
    list1.SetColumnChars(3, 14);
    list1.GetColumnChars(3).Trace;
end

On DblClick list1 (item as integer)
objects
begin
    var1 var2 var3 as char
    int1 int2 as smallint
end
begin
    list1.Selected.Trace;
    list1.GetListInto(list1.Selected, var1, var2, var3);
    var1.Trace;
    var2.Trace;           
    var3.Trace;
    int1 = var2;
    int1.Trace;
    list1.GetListColumnInto(list1.Selected, 2, int2);
    int2.Trace;
end
main
objects begin
    mform as f
    s as SqlStatement    
end
begin

    PutEnv("DBPATH",ProjectDir);
    s.SqlExec("database stock");
    mform.list1.LoadSelect("select * from customers", 4);
    mform.list1.SetColumnChars(2, 1); 
    mform.list1.SetColumnAlign(2,1);
    mform.list1.GetColumnAlign(1).Trace;
    mform.Run;
    mform.list1.GetColumnChars(2).Trace;

end

public GenerarListado 
Objects begin
    oprn as PrnDocument
end
begin
    miCheckbox.SetBoxRoundCornerRadio(05);
    BoxCabecera.SetBoxRoundCornerRadio(25);
    BoxCuerpo.SetBoxRoundCornerRadio(25);
   
    oprn.SendPage(self);
    oprn.Preview(null);
end
main
objects
begin
    Listado as cPage 
end
begin
      Listado.GenerarListado();  
end

main
objects
begin
    hprinter as integer
    hpage as integer
    cCursor as SqlCursor
    customer company surname as char
    idgrupo as integer
    linea as smallint default 0
end
begin
    hpage = loadPage(ProjectDir +"\Pags\stockcte.pag");
    idgrupo = controlByName(hpage, "grupo");
   
    loadPrinter(null);
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    cCursor.Prepare("select customer, company, surname from customers order by customer");
    cCursor.Open();
    while cCursor.Fetch( customer, company, surname).Found() do begin
        if linea >= count(hpage, idgrupo) then begin
            sendPage(hpage, hprinter);
            linea = 0;
            clearPage(hpage);
        end

        ++linea;
        setPropInt(hpage, idgrupo, "CurrentRow", linea);
    
        setPropStr(hpage, controlByName(hpage,"idCliente"),"Text", customer);
        setPropStr(hpage, controlByName(hpage,"idCompany"),"Text", company);
        setPropStr(hpage, controlByName(hpage,"idSurname"),"Text", surname);
    end
    cCursor.Close.Free();
    
    showFullOpenPrinterDialog(hprinter, true);
    sendPage(hpage, hprinter);
    
    preview(hprinter, null, null);
end


main
objects
begin
    ocPage as cPage
    oprn as PrnDocument
    i as smallint
end
begin
    oprn.SetBufferPages(100);
    for i = 1 to 100 do begin
        oprn.SendPage(ocPage);
    end
    oprn.Preview();
end


On Open 
begin
    list1.GetColumnChars(3).Trace;
    list1.SetColumnChars(3, 14);
    list1.GetColumnChars(3).Trace;
end

On DblClick list1 (item as integer)
objects
begin
    var1 var2 var3 as char
    int1 int2 as smallint
end
begin
    list1.Selected.Trace;
    list1.GetListInto(list1.Selected, var1, var2, var3);
    var1.Trace;
    var2.Trace;           
    var3.Trace;
    int1 = var2;
    int1.Trace;
    list1.GetListColumnInto(list1.Selected, 2, int2);
    int2.Trace;
end
main
objects begin
    mform as f
    s as SqlStatement    
end
begin

    PutEnv("DBPATH",ProjectDir);
    s.SqlExec("database stock");
    mform.list1.LoadSelect("select * from customers", 4);
    mform.list1.SetColumnChars(2, 1); 
    mform.list1.SetColumnAlign(2,1);
    mform.list1.GetColumnAlign(1).Trace;
    mform.Run;
    mform.list1.GetColumnChars(2).Trace;

end

On Open 
objects begin
    root i as smallint
end
begin
    mlist.SetListCheckable( TRUE , true);
    mlist.IconFile="List Icons";
    root=mlist.AddTreeString(0,"raiz");
    i=mlist.AddTreeString(1,"a1");
    i=mlist.AddTreeString(2,"a11");
    i=mlist.AddTreeString(2,"a12"); 
    i=mlist.AddTreeString(2,"a13"); 
    i=mlist.AddTreeString(3,"a111"); 
    i=mlist.AddTreeString(3,"a112"); 
    i=mlist.AddTreeString(4,"a121"); 
    i=mlist.AddTreeString(1,"a2"); 
end



On event SelChange control mlist(e as event)
objects begin
    idx as integer
end
begin
    idx = mlist.Selected;
    
    if idx >= 0 then begin
        if mlist.IsNodeChecked(idx) then begin
            ctrTxt.Text = "chequeado";
        end else begin
            ctrTxt.Text = "no chequeado";
        end
    end
end

On Click btnChequear
objects begin
    idx as integer
    status as boolean
end
begin
    idx = mlist.Selected;
    
    if idx >= 0 then begin
        status = mlist.IsNodeChecked(idx);
        status = not status;
        mlist.SetNodeChecked(idx, status);
    end
end

On event ListRowChecked control mlist(e as event)
objects begin
    idx as integer
end
begin
    idx = mlist.Selected;
    
    if idx >= 0 then begin
        ctrTxt.Text = "Nodo " +  mlist.GetListText(idx) +" chequeado";
    end
end


On event ListRowUnchecked control mlist(e as event)
objects begin
    idx as integer
end
begin
    idx = mlist.Selected;
    
    if idx >= 0 then begin
        ctrTxt.Text = "Nodo " + mlist.GetListText(idx) +" no chequeado";
    end
end


On event Click control mlist(e as event)
objects begin
    idx as integer
end
begin
    idx = mlist.Selected;
    
    if idx >= 0 then begin
        ctrTxt.Text = "on click en " + mlist.GetListText(mlist.Selected) ;
    end
    
end

main
objects begin
    Miform as frm
end
begin
    Miform.Run; 
end

On Open begin
    
    CargaLista();


end




Private CargaLista
    Objects Begin
        c as SqlCursor
        icon as integer default 0
        texto as char
    End
Begin
    lst1.FieldSeparator = "|";
    lst1.SetColumnType(1 ,1);
    lst1.SetColumnAlign(1 ,2);
    lst1.SetColumnChars(2 ,75);
    lst1.SetColumnChars(3 ,25);
    c.Prepare("select customer, company, surname,  date(today), time(now) from customers where customer < 115");
    c.Open;
    texto = c.FetchTuple;
    While c.Found
    Do begin
        ++icon;
        lst1.AddString(texto);
        If icon%2 == 0 
        then begin
            lst1.SetRowBackground(icon ,Rgb(255, 255,200));

        End
        Else Begin
            lst1.SetRowBackground(icon ,Rgb(255, 255,255));            
        End
        texto = c.FetchTuple;
    end
    c.Close.Free;
End


On Command CmdForegroundColumnas
Objects begin
    i as smallint
end
begin

    for i = 1 to lst1.Count() do begin
        lst1.ResetRowForeground(i);
    end
    for i = 1 to 5 do begin
        If i%2 == 0 then
            lst1.SetColumnForeground(i ,Rgb(0,0,255));    
        else     
            lst1.SetColumnForeground(i ,Rgb(255,0,255));    
    end
end
On Command CmdForegroundFilas
Objects begin
    i as smallint
end
begin
    for i = 1 to 5 do begin
        lst1.ResetColumnForeground(i);
    end
    for i = 1 to lst1.Count() do begin
        If i%2 == 0 
        then begin
            lst1.SetRowForeground(i ,Rgb(255, 0,0));
        End
    end
end
main
objects
begin
      of as frm
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    of.Run();
    
    Sql.Disconnect();
end


On Open begin
    NewAccelerator( "AcceptListEdit", "F1");
    NewAccelerator( "CancelListEdit", "F2");
    CargaLista();

end  
Private CargaLista() 
    Objects Begin
       
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    lstStrings.Reset();    
    

    lstStrings.FieldSeparator = "|";
    


    InstruSelect = "select state, sname from states ";
    LoadString(InstruSelect );


    
End

Private LoadString( pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    state as char
    sname as char
end
begin
        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, sname).Found
        Do begin

            texto = state + "|" +sname;
 
            lstStrings.AddString(texto);                        
        end
        c.Close.Free;
 
end


On Command AcceptListEdit
begin
    lstStrings.ListInvokeAcceptEdit();
end    

On Command CancelListEdit
begin
    lstStrings.ListInvokeCancelEdit();
end    

On Close
begin
    DelAccelerator("F1");
    DelAccelerator("F2");
end    

On event ListAcceptEdit control lstStrings(e as event)
begin
    lstStrings.SetRowForeground(lstStrings.Selected, Rgb(0, 255, 0));
    txtOut.Text = "Edición aceptada";
end

On event ListCancelEdit control lstStrings(e as event)
begin
    lstStrings.SetRowForeground(lstStrings.Selected, Rgb(255, 0, 0));
    txtOut.Text = "Edición cancelada";
end


On event DblClick control lstStrings(e as event)
begin
    lstStrings.EditListColumn(lstStrings.Selected ,lstStrings.GetCurrentItem());
end
main
objects
begin
      of as frm
      i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");

   PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

On Open begin
    CargaLista();
    listSql.SetListSelectionType(0);
    Self.Maximize();
end  
Private CargaLista ()
Begin
    
    listSql.Reset();    
    listSql.SetColumnChars(3,20);
    listSql.AlternateBackColor( Rgb(255, 255, 255) , Rgb(254, 247, 224), 2);
    listSql.FieldSeparator = "|";

    InstruSelect = "select item, supplier,description,retail_price,cost_price,stock,under_stock from items ";

    gNumRows = listSql.LoadSelect(InstruSelect);
    
End




On Command CmdMostarSeleccion
Objects begin
    idxArrayList as miCArray
    NumRegSelect as integer
    i as integer 
    item as smallint
     supplier as integer
    description as char
end
begin
    switch listSql.GetListSelectionType()
    begin
        case 1:begin
           ("Item: "+ listSql.GetListColumnText(listSql.Selected ,3)).Trace;
        end    
        case 2:begin
            idxArrayList.Init(gNumRows);
            NumRegSelect = listSql.GetItemSelected(idxArrayList); //Este método retorna el índice de los elementos seleccionados en un List Box.
            for i = 1 to NumRegSelect do begin
                listSql.GetListInto(idxArrayList[i],item, supplier,description);        
                ("Item: "+ description).Trace;
            end    
        end
    end    
   
end

On event Click control IDBUTTON1(e as event)
objects begin
    lChType as char
end
begin
    switch  listSql.GetListSelectionType()
    begin
        case 0:
            lChType = "NONE";
        case 1:
            lChType = "SINGLE";
        case 2:
            lChType = "MUTISELECT";
    end
    lChType.Trace;
end

On event Click control rb_cambiarSelecion(e as event)
begin
    switch  rb_cambiarSelecion.Selected
    begin
        case 1:
            listSql.SetListSelectionType(0);
        case 2:
            listSql.SetListSelectionType(1);
        case 3:
            listSql.SetListSelectionType(2);
    end


end
Public Init(aSize as smallint)
begin
    self.Resize(aSize);
end
main
objects
begin
    of as frm
    
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");
    
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

On Open begin
    CargaLista();
    lstStrings.SetListSpreadSheetNavigation(true);
end  
Private CargaLista() 
    Objects Begin
        icon as integer default 0
        texto as char
        valor as decimal
        InstruSelectString as char
    End
Begin
    
    lstStrings.Reset();    
    
    lstStrings.SetLockColumns(1);
   
    lstStrings.IconFile = "listaiconosgif";

    lstStrings.FieldSeparator = "|";
    
    FormatListColumnChar(1, 15); //State
    FormatListColumnChar(2, 40); //Customer
    FormatListColumnDate(3, 15);  //Date

      
    FormatListColumnDate(4, 15);  //Date

    FormatListColumnChar(5, 15);  //Status
    FormatListColumnNumeric(6,10,0); //Número de la linea
    lstStrings.SetColumnVisible(6, FALSE);
   
    FormatListColumnNumeric(7, 12,0); //Cod item
    FormatListColumnChar(8, 20);  //Descripcion item

    FormatListColumnNumeric(9, 15 ,0); //Cantidad
    FormatListColumnNumeric(10, 15,0); //Descuento
    FormatListColumnNumeric(11, 20, 2); //Precio     
    lstStrings.SetColumnMask(11,12);


    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " line_nbr, orderlines.item, items.description,  quantity, discount, price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer order by line_nbr";

    LoadString(InstruSelect );
    lstStrings.NumericColumnsFormattedToChar(true);

    
End

Private LoadString( pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin
        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , line_nbr, item, 
                    description,  quantity, discount, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|"+ line_nbr.Using(2) +"|"+ 
                    item.Using(5) +"|"+ description +"|"+  quantity +"|"+ discount +"|"+ 
                price.Using(12) ;
 
            j = lstStrings.AddString(texto);                        
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint)
objects begin
end
Begin
    lstStrings.SetColumnType(pNumColumn,0);
    lstStrings.SetColumnAlign(pNumColumn,0);
    lstStrings.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint)
Objects begin
end
begin
    lstStrings.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then lstStrings.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    lstStrings.SetColumnAlign(pNumColumn,2);//Izda
    lstStrings.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint)
Objects begin
end
begin
    lstStrings.SetColumnType(pNumColumn ,2); //Date
    lstStrings.SetColumnAlign(pNumColumn,2);//Dcha
    lstStrings.SetColumnChars(pNumColumn,pLengthColumns);

end
    



On event ListSpreadSheetColChange control lstStrings(e as event)
begin
    ("Evento ListSpreadSheetColChange el usuario cambio de Columna:"+ lstStrings.GetCurrentItem()).Trace();

end
main
objects
begin
      of as frm
      i dafaultRGB as integer
end
begin
    PutEnv("DRAWLISTLINES", "TRUE");

   PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end

On Open
begin
    ctr_text.Text = "Todos los controles muestran el mismo Skin. Método LoadControlsScrollSkin";
    chkActiva.Checked = TRUE;
end

On event Click control chkActiva(e as event)
begin
    if chkActiva.Checked then begin
        ctr_text.Text = "Control Grid muestra un Skin diferente. Método SetControlScrollSkin";
        Control("micontrolGrid").SetControlScrollSkin(ProjectDir()+"\skin\ControlScroll\salmon\controlskin.txt");
    end else begin
        ctr_text.Text = "Control Grid sin Skin";
        Control("micontrolGrid").SetControlScrollSkin(null);
    end
end
main
objects
begin
    f as frm
end
begin
    Module.LoadControlsScrollSkin(ProjectDir()+"\skin\ControlScroll\orange\controlskin.txt");
    f.Run;
   
end

On Open
Objects Begin
   
end
begin
    Frame.Refresh();
    lst.FieldSeparator = "|";
    lst.AddString("1|Rojo");
    lst.AddString("2|Amarillo");
    lst.AddString("3|Naranja");
    lst.AddString("4|Verde");
    lst.AddString("5|Azul");
    drop_edit.Selected=1;
    drop_list.Selected=1;
    editField_num=1255.28;  
    editFiled_char="Arial,doce";
    editField_Grid_char = "pruebagrid";
    editField_Grid_num = "123213.34";
   
    btn_2.SetProperty("Font","Courier New;Size=24;Bold");

end

On Open
Objects Begin
   
end
begin
    lst.FieldSeparator = "|";
    lst.AddString("1|Rojo");
    lst.AddString("2|Amarillo");
    lst.AddString("3|Naranja");
    lst.AddString("4|Verde");
    lst.AddString("5|Azul");
    drop_edit.Selected=1;
    drop_list.Selected=1;
    editField_num=1255.28;  
    editFiled_char="Arial,doce";
    editField_Grid_char = "pruebagrid";
    editField_Grid_num = "123213.34";
    box1.IgnoreCustomFonts();
    tab1.IgnoreCustomFonts();
    btn_2.IgnoreCustomFonts();
    editFiled_char.IgnoreCustomFonts();
    editField_num.IgnoreCustomFonts();
    editField_Grid_num.IgnoreCustomFonts();
    editField_Grid_char.IgnoreCustomFonts();
    ctr_panel.IgnoreCustomFonts();
    lst.IgnoreCustomFonts();
end

main
objects
begin
    
end
begin
   PutEnv("COSMOSUSECUSTOMFONTS", "TRUE");
   Module.LoadCustomFonts(ProjectDir() + "\CustomFonts\CustomFonts.ini");
   FnCustomFonts();
   FnIgnoreCustomFonts();
end

Private FnCustomFonts()
Objects begin
    oFrm as frmCustomFonts
end
Begin
    oFrm.Run();
end

Private FnIgnoreCustomFonts()
Objects begin
    oFrm as frmIgnoreCustomFonts
end
Begin
    oFrm.Run();
end

main
objects
begin
end
begin
    HugeStrings();
end

private function HugeStrings
objects
begin
    len as integer
    outStream as Stream
    outStr as char default ""
    outStr_2 as char default ""
    outStr_3 as char
    outStr_4 as char
    i as integer
end
begin
    outStr.LoadFromFile(ProjectDir + "\quijote.txt");
    outStr.Length().Trace();    
    
    outStr.Locate("Diego").Trace();
    
    outStr.SubString(outStr.Locate("Diego"), "Diego".Length + 20).Trace();
    outStr[outStr.Locate("Diego"),"Diego".Length + 20].Trace();

    outStr_4 = outStr.SubString(outStr.Locate("Diego"), 40000);
    outStr_4.Length.Trace;
    
    outStr_4 = outStr[outStr.Locate("Diego"), 40000];
    outStr_4.Length.Trace;

    outStr.Count("Diego").Trace();
    outStr.Replace("Diego", "Riego");
    outStr.Count("Diego").Trace();
    outStr.Count("Riego").Trace();
    
    outStr.Locate("Riego").Trace();
    outStr.ReplaceAt("Diego", outStr.Locate("Riego"));
    outStr.Locate("Riego").Trace();
    
    outStr.NumWords().Trace();
    outStr.GetWord(" " , outStr.NumWords()).Trace();

    outStream.Open(ProjectDir + "\quijote_cambiado.txt", 2);
    outStream.Write(outStr);
    outStream.Close();
   
    outStr_2 = "Cosmos".StrRepeat(100000);
    outStr_2.Translate("o", "u");
    outStream.Open(ProjectDir + "\strrepeat.txt", 2);
    outStream.Write(outStr_2);
    outStream.Close();
    
    outStr_3 = outStr_2;
    outStr_3.Length.Trace;
    
    outStr_3 += outStr_2;
    outStr_3.Length.Trace;
    
    outStr_4 = MyGetString(outStr_3);
    outStr_4.Length().Trace();
end

private function MyGetString(str as char) return char
objects begin
end
begin
    return str;
end

On Open
begin
    txtNota = "Un smallint ocupará 2 bytes. Un integer ocupará 4 bytes." + 13.Character() + 10.Character() +
              "Los valores numéricos se almacenarán en el objeto BINARY en el formato propio del procesador (Little Endian o Big Endian). " + 13.Character() + 10.Character() +
              "En el caso de Intel x86 y compatibles, Little endian. Es decir, al comienzo los bytes menos significativos." + 13.Character() + 10.Character();
    numSmallint = 12345;
    numInteger = 12345678;
    
    txtSmallint = " ";
    txtInteger = " ";
    txtSmallintHex = " ";
    txtIntegerHex = " ";
end

On Click btnProcesar
objects begin
    mibin as binary
end
begin
    mibin.LoadFromNumber(numSmallint);
    txtSmallint.Text = mibin.ToCharHex(); //Clase Binary
    txtSmallintHex.Text = numSmallint.ToCharHex(); //Clase Numeric

    mibin.LoadFromNumber(numInteger);
    txtInteger.Text = mibin.ToCharHex(); //Clase Binary
    txtIntegerHex.Text = numInteger.ToCharHex(); //Clase Numeric
  
end
main
objects
begin
    f as frm
end
begin
    f.Run;
end



public javaclass "Test1" ReturnJavaVersion() return char
public javaclass "Test2" pruebaLoadJVM() return char



main
objects
begin
end
begin
    Carga01;
end

private function Carga01()
objects begin
    classpathStr as char default null
    loadJarsFolder as Boolean default FALSE
    loadJavaClasspathFile as Boolean default FALSE
end
begin
    classpathStr = ProjectDir()+ "\jars\jarsloadJVM\Test2.jar"; //String con el CLASSPATH. Le pasas la ruta completa de los archivos jar
    loadJarsFolder = TRUE; //carpeta jars del proyecto
    loadJavaClasspathFile = FALSE; //Carga la información indicada en el fichero java.options del proyecto Cosmos.

    Module.LoadJVM(classpathStr, loadJarsFolder, loadJavaClasspathFile);
 


    ReturnJavaVersion().Trace;
    pruebaLoadJVM().UTF8ToAnsi(1252).Trace;
    "fin".Trace();
end



main
objects begin
    s as char
end
begin
    s = "HELLO";
    s.Lowcase;
    s.Trace;
end

main
objects begin
n as smallint
b as boolean
end
begin
    n = 3;
    n.Trace;
    b= n >= 5;
    b.Trace;
end

On command clientes
begin
    clientes.Run(Self);
end

On command articulos
begin
    articulos.Run(Self);
end

On command provincias
begin
    provincias.Run(Self);
end

On command proveedores
begin
    proveedores.Run(Self);
end
On command unidades
begin
    unidades.Run(Self);
end

On command fpago
begin
    fpago.Run(Self);
end

On command provincia
begin
    provincias.Run(Self);
end



On command Ok
begin
    if miNombre.Text == "" or miNombre.Text != miPassword.Text
    then
        Ok("Clave Incorrecta","Error");
    else
        Exit(1);        
end
main
begin
    if chequeo.Run() == 1 then
    begin
        sentenciaSql.SqlExec("database almacen");
        mainMenu.Run;
        sentenciaSql.SqlExec("close database");    
    end
end    


main
objects begin
    n n1 n2 as smallint
    fec as date 
    hora as time
    f as date
    t as time
    s s1 as char
end
begin
    n1 = 3;
    n2 = 5;
    n =  n1 + n2;
    n.Trace;
    fec = "24/10/96";
    f=fec + 3;
    f.Trace;
    hora="14:12:32";
    t=hora + 2;
    t.Trace;
    s="ho";
    s+="la";
    s.Trace;
    s1 = s + " que tal";
    s1.Trace;
end

main
objects begin
    n as smallint
end
begin
    n = 10;
    n.Trace;
    n-=2;
    n.Trace;
end

main
objects begin
    s s1 as char
end
begin
    s = "hello";
    s1 = "h[e--o]*";
    if s matches s1 then
        "s fits the pattern defined in s1".Trace;
    else
        "s doesn't fit the pattern defined in s1".Trace;
end

main
objects begin
    n1 n2 as smallint
end
begin
    n1 = 3;
    n2 = 5;
    if ( n1 > n2 ) Then
    begin
        ++n1;
        ("n1=" +n1).Trace;
    end else begin
        --n1;
        ("n1="+n1).Trace;
end
end

On Command CmtOpen4Windows
begin

    oMDIChild1.OpenAsMDIChild(Self);    

    oMDIChild2.OpenAsMDIChild(Self);
    oMDIChild3.OpenAsMDIChild(Self);
    oMDIChild4.OpenAsMDIChild(Self);

    oMDIChild1.Frame.Text = "a";
    oMDIChild2.Frame.Text = "b";
    oMDIChild3.Frame.Text = "c";
    oMDIChild4.Frame.Text = "d";


    SetMenu(mimenu);
end

On Command CmdNextChild
begin
    MDINextChild();
end

On Command CmdPreviousChild
begin
    MDIPreviousChild();
end

On Command CmdCascade
begin
    MDICascade();
end

On Command CmdTileVertical
begin
    MDITile(0);
end

On Command CmdTileHorizontal
begin
    MDITile(1);
end

On Command CmdArrangeIcons
begin
    MDIArrangeIcons();
end


main
objects
begin
end
begin
    oMDIClient.Run();
end

public ff()
begin
    self.SetMenu(mmm);
    mm.Track(self, 360,300);
end

On Click b
begin
    ff;
end

On Click id_add
objects begin
    s as char
end
begin
    mm.Add("Hello",NULL,"New1");
    mm.a.Add("Hello2",NULL,"New2");
    mm.b.Add("Hello3",NULL,"New3");
    mm.Option("b").Add("Hello4",NULL,"New4");
end

On Click id_delete
begin
    mm.Option("New3").Delete;
    mm.b.Disabled=TRUE;
end


main
objects begin
    mform as fr
end
begin
    mform.Run;
end

main
objects
begin
    b as boolean
end
begin
    MessageBox("Hello","",64);
end   
 

main
objects begin
    n n1 n2 as smallint
    fec as date 
    hora as time
    f as date
    t as time
end
begin
    n1 = 8;
    n2 = 5;
    n =  n1 - n2;
    n.Trace;
    fec = "24/10/96";
    f=fec - 3;
    f.Trace;
    hora="14:12:32";
    t=hora - 2;
    t.Trace;
end

public asig1()
begin
    self.asig(8);
end

private asig(i as integer)
begin
    self=8;
end
main
objects begin
    d as miinteger
end
begin
    d.asig1();
    d.Trace;
end

main
objects begin
    year as smallint
end
begin
    year = 1995;
    if ( year % 4 == 0 AND year % 100 <> 0 OR year % 400 == 0 ) Then
    begin
        "the year 1995 is leap".Trace;
    end else
    begin
        "the year 1995 isn't leap".Trace;
    end
end

main
objects begin
    i as integer
end
begin
    i = 34234;
    i%=5;
    i.Trace;
end

public FillPage()
begin
    module.Clear;
end
main
OBJECTS  begin
    pg as pag
end

begin
    pg.FillPage;
end

public Clear()
begin
    i=3;
    i.Trace; 
end

On Click (sender as char)
begin
    i=i+5; 
    switch sender
    begin
        case "bmove":
        begin
            mbutton.Move(0+i,0+i);
        end
        case "bsize":
        begin
            mbutton.Size(60+i,50+i); 
        end
    end
end
main
objects
begin
    Mform as fr 
end
begin
    Mform.Run; 
end




On Open 
Objects begin
    paramStr as char
end
begin
    CargaLista(lstStrings, "strings");
    lb_file.ListFile = ProjectDir() + "\Multiidioma.txt";
    
    lb_file.DrawListLines(FALSE);
    lstStrings.DrawListLines(TRUE);
end  
Private CargaLista ( pList as SimpleFormControl, pType as char)
Objects begin
    InstruSelect as char
end
begin
    pList.Reset();    
    pList.IconFile = "listaiconosgif";
    pList.FieldSeparator = "|";
    FormatListColumnChar(1, 15, pList); //State
    FormatListColumnChar(2, 40, pList); //Customer
    FormatListColumnDate(3, 15, pList);  //Date
    FormatListColumnDate(4, 15, pList);  //Date
    FormatListColumnChar(5, 15, pList);  //Status
    FormatListColumnChar(6, 15, pList);  //Descripcion item
    FormatListColumnNumeric(7, 20, 2, pList); //Precio     
    pList.SetColumnMask(7,4);

    InstruSelect = "select customers.state, customers.company , order_date, pay_date , order_status , "+
                    " items.description,  price " +
                    
                    " from orders, orderlines, items , customers"+
                        " where orders.order_nbr = orderlines.order_nbr and orderlines.item = items.item " +
                        " and orderlines.supplier = items.supplier and orders.customer = customers.customer";
    LoadString( pList, InstruSelect );

    
End

Private LoadString(pList as SimpleFormControl, pInstruSelect as char)
Objects begin
    c as SqlCursor
    texto as Char
    customer line_nbr as integer 
    item  quantity discount as smallint
    order_date pay_date as date
    order_status   description as char
    price price2 price3 as decimal (12,2)
    company state as char
    i as integer default 0
    j as integer default 0
    lChIndice as char
    InstruSelectString as char
end
begin

        c.Prepare(pInstruSelect);
    
        c.Open;
        
        While c.Fetch(state, company , order_date, pay_date , order_status , 
                    description, price ).Found
        Do begin

            texto = state + "|" +company +"|"+ order_date.char +"|"+ pay_date.char +"|"+ order_status +"|" +  description +"|"+ price.Using(12) ;
 
            j = pList.AddString(texto ,0);                        
            ++i;
            pList.SetListInfo(j, j);
        end
        c.Close.Free;
 
end


Private FormatListColumnChar(pNumColumn as smallint, pLengthChar as smallint, pList as SimpleFormControl)
objects begin
end
Begin
    pList.SetColumnType(pNumColumn,0);
    pList.SetColumnAlign(pNumColumn,0);
    pList.SetColumnChars(pNumColumn,pLengthChar);
end

Private FormatListColumnNumeric(pNumColumn as smallint, pLengthColumns as smallint, pNumDec as smallint , pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,1); //Numeric
    if pNumDec > 0 then pList.SetColumnNumDec(pNumColumn, pNumDec); //DEcimales
    pList.SetColumnAlign(pNumColumn,2);//Izda
    pList.SetColumnChars(pNumColumn,pLengthColumns);
end

Private FormatListColumnDate(pNumColumn as smallint, pLengthColumns as smallint, pList as SimpleFormControl)
Objects begin
end
begin
    pList.SetColumnType(pNumColumn ,2); //Date
    pList.SetColumnAlign(pNumColumn,2);//Dcha
    pList.SetColumnChars(pNumColumn,pLengthColumns);

end
    
{
    Ejemplo del Multi-idioma
    En el fichero del configuración del proyecto se han definido las siguiente variables de entorno:
    MULTILANGUAGEFILE
    MULTILANGUAGEDEBUGFILE
}
main
objects
begin
    of as frm
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
    
    of.Run();
    Sql.Disconnect();
end


main
objects
begin

end
begin
    Module.SetMultilanguageFile(ProjectDir() + "\Multiidioma_en.txt");

    PutEnv("MULTILANGUAGENOCHANGELABELS", "TRUE"); //No se sustiturán las etiquetas en Form.
    Module.GetMultilanguageTranslation("Guardar").Trace(); //Las etiquetas se pueden consultar.
    CallForm();
end

Private CallForm()
Objects begin
    o as frm
end
begin    
    o.Run;
end

On Open
begin
    ctr_img.Bitmap = ProjectDir()+"/imagenes/felicidad.bmp";
end

On event MouseEnter (e as Event)
begin
    if e.GetControl().GetType() in  ("BOX", "TEXT") then
    begin
        e.GetControl().Foreground = Rgb(0,0,255);
        e.GetControl().Bold = true;
        Txt1.Text = ("Evento MouseEnter sobre " + e.GetControl().Name() );
    end
end

On event MouseExit (e as Event)
begin
    if e.GetControl().GetType() in ("BOX", "TEXT") then
    begin
        e.GetControl().Foreground = Rgb(0,0,0);
        e.GetControl().Bold = false;
        Txt1.Text = ("Evento MouseExit sobre " + e.GetControl().Name() );        
    end
end

On MouseEnter tb1(i as integer)
Begin   
    tb1.SetTabPageIcon(i ,i+30);
End


On MouseExit tb1(i as integer)
Begin   
    tb1.SetTabPageIcon(i ,30-i);
End
main
begin
    f.Run();
    
end

main
OBJECTS begin
    b as smallint
end
begin
    b=23;
    if b IS NOT NULL then
        "b isn't null".Trace;
    else
        "b is null".Trace;
end


On Open
begin
    
    SetEditMode(true);
    Query();
    
 
end





On event Click control id_grid(e as event)
begin
    "On click".Trace();
end

On event ClickHeader control id_grid(e as event)
begin
    "ClickHeader".Trace();
end
{
NOSENDCLICKONGRIDCLICKBODY
No se lance el evento On Click 
cuando se haga click en el cuerpo de un grid.
}
main
objects
begin
oCAutoEditMode as CGrid
end
begin
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("Stock");
    PutEnv("NOSENDCLICKONGRIDCLICKBODY" ,"TRUE");
    oCAutoEditMode.Run;
    Sql.Disconnect;
    Sql.DettachConnection;
end

main
objects begin
    s s1 as char
    b as boolean
end
begin
    s = "hello";
    s1 = "h_";
    if NOT (s like s1) then
        "s isn't like s1".Trace;
    else
        "s is likr s1".Trace;
end

main
OBJECTS begin
    b as smallint  default 1
end
begin
    b=23;
    if b IS NULL then
        "b is null".Trace;
    else
        "b isn't null".Trace;
end

main
begin
    while now.Hour != 12 do ;

    ;
    ;
    ;
    
    repeat ; until now.Minute > 15;
end

main
OBJECTS begin
    b as smallint  default 1
end
begin
    b=23;
    if b IS NULL then
        "b is null".Trace;
    else
        "b isn't null".Trace;
end

On Open begin
    CargaLista();
end


Private CargaLista
    Objects Begin
        icon i as integer default 0
        texto as char
        lDcCantidad as decimal
    End
Begin
    lDcCantidad = 21025.65;

    lst1.FieldSeparator = "|";
    lst1.SetColumnMask(1,4);
    lst1.SetColumnType(1,1);
    lst1.SetColumnNumDec(1,2);
    lst1.SetColumnAlign(1 ,2);
    
    
    for i = 1 to 10 do begin
        ++icon;
        lDcCantidad = lDcCantidad / i;
        texto=lDcCantidad.Using(4) +"|";
        lst1.AddString(texto);
        If icon%2 == 0 
        then begin
            lst1.SetRowBackground(icon ,Rgb(255, 200,200));
        End
        Else Begin
            lst1.SetRowBackground(icon ,Rgb(200, 200,200));
        End

    end
    lst1.NumericColumnsFormattedToChar(true);    

    
    
End


On Command CmdExportXXX
begin
    switch rb_tipoExport.Selected
    begin
        case 1:begin
            lst1.ExportToHTML(GetEnv("DBTEMP")+"\orderlines.html");
        end    
        case 2:begin
            lst1.ExportToODS(GetEnv("DBTEMP")+"\orderlines.ods");

        end    
        case 3:begin
            lst1.ExportToPDF(GetEnv("DBTEMP")+"\orderlines.pdf");
        end    
        case 4:begin
            lst1.ExportToExcel(GetEnv("DBTEMP")+"\orderlines.xls");
        end    

    end

    
end
main
objects
begin
      of as frm
end
begin
    of.Run();
end

On Open
begin
    ShowFrameSizeInTxt();
    CenterControls();
end

On ChangeSize
begin
    ShowFrameSizeInTxt();
    CenterControls();
end

private function ShowFrameSizeInTxt
objects begin
    x y as integer
end
begin
    Frame.GetSize(x, y);
    txt_msg_2.Text = "Width: " + x + " - Height: " + y;
end

private function CenterControls
objects begin
    x y as integer
end
begin
    CenterControl("txt_msg_1");
    CenterControl("txt_msg_2");
end

private function CenterControl (ctrlName as char)
objects begin
    x y as integer
    xCtr yCtr as integer
    xPos yPos as integer
end
begin
    Frame.GetSize(x, y);
    Control(ctrlName).GetSize(xCtr, yCtr);
    Control(ctrlName).GetFramePos(xPos, yPos);
    xPos = (x - xCtr) /2;
    
    Control(ctrlName).Move( xPos,  yPos);
end
main
objects
begin
end
begin
    f.Run;
end


On Open 
objects begin
    i as smallint
end
begin
    i=mlistbox.AddString("a1");
    ("The element " +i + " added").Trace;
    i=mlistbox.AddString("a2");
    ("The element " +i + " added").Trace;
    i=mlistbox.AddString("a3");
    ("The element " +i + " added").Trace;
    i=mlistbox.AddString("a4");
    ("The element " +i + " added").Trace;
end

main
objects
begin
    f as Mform
end
begin

    f.Run;
end 

main
begin
    OpenFileWithDefaultApp ("www.base100.com");
    OpenFileWithDefaultApp (CosmosDir+"\projects\Almafac\logo1.bmp");
end



On event Click control btn_aceptar(e as event)
begin

    switch rb_listado.Selected
    begin
        case 1:
            oCListadoGroup.RunReport(TRUE);
        case 2:
            oCListadoGroup.RunReport(FALSE);
    end

    
end

Public RunReport(pPreview as Boolean) return Boolean
Objects begin
    lChParam as Char
end
begin
    printer.SetDocName("Report of Suppliers/Items");
    printer.SetBufferPages(100);
    vRutaListado=ProjectDir() + "\SuppliersItem.pdf";
    if cursorItems.Prepare
    (
        "select item, items.supplier, description, cost_price, stock, company"
        + " from items, suppliers"
        + " where "       
        + " items.supplier = suppliers.supplier"
        + " order by supplier"
    ).Error != 0 then
        return FALSE;
        
    if cursorItems.Open().Error != 0 then
        return FALSE;

    if not pPreview then begin
        Module.Delete(vRutaListado);
        printer.OpenPrinterPDF(vRutaListado);
    end
   
    printPages();
    
    if pPreview then begin
        printer.Preview;
    end
    
    if not pPreview then begin
       printer.ClosePrinter;
       OpenFileWithDefaultApp(vRutaListado);
    end
    printer.Clear();
    return TRUE;
end

Private printPages()
objects begin
    prevSupplier as integer default -1
    indline as smallint
end
begin

    indline = 1;
    while cursorItems.Fetch
            (
                item1,
                supplier1,
                description1,
                cost_price1,
                stock1,
                company1
            ).Found do begin
        if supplier1 != prevSupplier then // Change of supplier
        begin
            c_linescount.CurrentRow = indline; 
            c_line.Page = 2;
            PrintVars;
            ++indline; 
        end
        else if indline > c_linescount.Count then
        begin
            printer.SendPage(Self);
            Clear;
            indline = 1;
        end
        c_linescount.CurrentRow = indline; 
        c_line.Page = 1;
        PrintVars;
        prevSupplier = supplier1;
        ++indline;
    end
    if indline > 0 then
    begin
      printer.SendPage(Self);
      Clear;
    end
end
main
objects
begin
  
end
begin   
    PutEnv("DBPATH", ProjectDir());
    Sql.Connect("stock");
   
    oFrm.Run();
    Sql.Disconnect();
end

main
objects
begin
    i as integer
end
begin
    Operadornot();
    Operadorand();
    Operadoror();
    Operadorxor();
    Operadorhiftleft();
    Operadorhiftright();
end

private function Operadornot
objects begin
    i as integer
end
begin

    i = 42;
    i.BitNot().Trace;
    i = 1;
    i.BitNot().Trace;
    i = 12342;
    i.BitNot().Trace;

end

private function Operadorand
objects begin
    i as integer
end
begin
    i = 0;
    i.BitAnd(null).Trace;
    i = 2;
    i.BitAnd(3).Trace;
    3.Integer.BitAnd(3).Trace;
end

private function Operadoror
objects begin
    i as integer
end
begin
    i = 0;
    i.BitOr(null).Trace;
    i = 2;
    i.BitOr(3).Trace;
end

private function Operadorxor
objects begin
    i as integer
end
begin
    i = 0;
    i.BitXOr(null).Trace;
    i = 114;
    i.BitXOr(52).Trace;
end

private function Operadorhiftleft
objects begin
    i as integer
end
begin
    i = 0;
    i.BitShiftLeft(null).Trace;
    i = 114;
    i.BitShiftLeft(2).Trace;
end

private function Operadorhiftright
objects begin
    i as integer
end
begin
    i = 0;
    i.BitShiftRight(null).Trace;
    i = 114;
    i.BitShiftRight(2).Trace;
end

{*
 * This method enables and disables the query commands.
 *}
Private disableTableCmd()
objects begin
    cmd as char
end
begin
    
      DisableCommand("AddLine", orderlines.IsCommandDisabled("EditNew"));
      DisableCommand("DeleteLine", orderlines.IsCommandDisabled("Delete"));
      DisableCommand("UpdateLine", orderlines.IsCommandDisabled("EditUpdate"));

end

On Open
begin
    SetEditMode;
    disableTableCmd();
end

On Edit Table (tab as char)
begin
    disableTableCmd();
end

On AcceptEdit Table (tab as char)
begin
    disableTableCmd();
end

On CancelEdit Table (tab as char)
begin
    disableTableCmd();
end

On Fetch Table orders
begin    
    orders.total = 0;
end

{* 
 * Calculate the line total.
 * If the result is greater than 1000000, draws the red total.
 * If it is smaller, draws the blue total
 *}
Private calculateTotalLine()
begin
    orderlines.total = 
        orderlines.quantity 
        *
        orderlines.price
        *
        (1 - (orderlines.discount/100));
    if orderlines.total > 1000000 then
        cTotalLine.Foreground = Rgb(255,0,0);
    else
        cTotalLine.Foreground = Rgb(0,0,255);
end

{* 
 * Calculate the price of the unit in a line
 *}
Private calculatePriceLine()
begin
    orderlines.price = 
        orderlines.total
         /
        (orderlines.quantity *(1 - (orderlines.discount/100)));
end


On Fetch Table orderlines
begin
    calculateTotalLine();
    orders.total += orderlines.total;
end

{*
 * Query by customer
 *}
On Click QueryCliente
objects begin
end
begin
    Sql.SelectWindow
    (Self,
    "select customer, company from customers order by company",
    NULL,
    "Select Customer",
    1,
    orders.customer
    );

end

{*
 * Query by form of payment
 *}
On Click QueryPayForm
objects begin
end
begin
    Sql.SelectWindow
    (Self,
    "select payform, description from payforms",
    NULL,
    "Select a Form of Payment",
    1,
    orders.payform
    );

end


on Exit (ctr as char)
begin           
    switch ctr
    begin
        case in ("cCantidad", "cDescuento", "cPrecio"):
            calculateTotalLine;
        case "cTotalLinea":
            calculatePriceLine;
    end  
end

On Command AddLine
begin
 orderlines.EditNew.Trace;

end

{*
 *this method proves that the article exist before accepting a line and calculates the number of lines
 *}
On Command AcceptEdit
objects begin
    cur as SqlCursor
end
begin
    if orderlines.IsMe(EditingTable) then
    begin
        if Not Sql.Select("select description from items where "
                    "item = "+orderlines.item+
                    " and supplier = "+orderlines.supplier) then
        begin
            "This item does not exist".Trace;
            cItem.SetFocus;
            return;
        end
        if orderlines.Status == "New" then
        begin
            cur.Prepare
            (
                "select max(line_nbr) from orderlines where order_nbr = "
                +
                orders.order_nbr
            );
            cur.Open;
            cur.Fetch(orderlines.line_nbr);
            if cur.Found
            then
                ++orderlines.line_nbr;
            else
                orderlines.line_nbr = 1;
        end
    end
    AcceptEdit;
end

On Command DeleteLine
begin

    barra.Text = NULL;
    if Yes("Do you really want to delete the register ", "Attention !") then 
        if orderlines.Delete then
           barra = "Deleted Order line";
end

On Command UpdateLine
begin
    orderlines.EditUpdate;
end

On QueryEnd table orders
begin
    disableTableCmd();
end

{*
 * This method shows the window of orders selection 
 *}
On Click (ctr as char)
begin
    switch ctr
    begin
        case in ("cItem", "cSupplier"):
        begin
            Sql.SelectWindow
            (Self,
            "select item, supplier, description, retail_price from items order by description",
            NULL,
            "Select an Item",
            1,
            orderlines.item,
            orderlines.supplier,
            orderlines.description,
            orderlines.price
            );
            calculateTotalLine;
        end            
    end
end
main(doRun as boolean default TRUE)
begin
    Sql.AttachConnection;   
    Sql.Connect("stock"); 

    if doRun then
      oOrders.Run;
    else
      oOrders.Open;
end

{*
 * This method enables and disables the query commands.
 *}
Private disableTableCmd()
objects begin
    cmd as char
end
begin
    
      DisableCommand("AddLine", orderlines.IsCommandDisabled("EditNew"));
      DisableCommand("DeleteLine", orderlines.IsCommandDisabled("Delete"));
      DisableCommand("UpdateLine", orderlines.IsCommandDisabled("EditUpdate"));

end

On Open
begin
    SetEditMode;
    QueryByForm();
    disableTableCmd();
 
end

On Edit Table (tab as char)
begin
    disableTableCmd();
end

On AcceptEdit Table (tab as char)
begin
    disableTableCmd();
end

On CancelEdit Table (tab as char)
begin
    disableTableCmd();
end

On Fetch Table orders
begin    
    orders.total = 0;
end

{* 
 * Calculate the line total.
 * If the result is greater than 1000000, draws the red total.
 * If it is smaller, draws the blue total
 *}
Private calculateTotalLine()
begin
    orderlines.total = 
        orderlines.quantity 
        *
        orderlines.price
        *
        (1 - (orderlines.discount/100));
    if orderlines.total > 1000000 then
        cTotalLine.Foreground = Rgb(255,0,0);
    else
        cTotalLine.Foreground = Rgb(0,0,255);
end

{* 
 * Calculate the price of the unit in a line
 *}
Private calculatePriceLine()
begin
    orderlines.price = 
        orderlines.total
         /
        (orderlines.quantity *(1 - (orderlines.discount/100)));
end


On Fetch Table orderlines
begin
    calculateTotalLine();
    orders.total += orderlines.total;
end

{*
 * Query by customer
 *}
On Click QueryCliente
objects begin
end
begin
    Sql.SelectWindow
    (Self,
    "select customer, company from customers order by company",
    NULL,
    "Select Customer",
    1,
    orders.customer
    );

end

{*
 * Query by form of payment
 *}
On Click QueryPayForm
objects begin
end
begin
    Sql.SelectWindow
    (Self,
    "select payform, description from payforms",
    NULL,
    "Select a Form of Payment",
    1,
    orders.payform
    );

end


on Exit (ctr as char)
begin           
    switch ctr
    begin
        case in ("cCantidad", "cDescuento", "cPrecio"):
            calculateTotalLine;
        case "cTotalLinea":
            calculatePriceLine;
    end  
end

On Command AddLine
begin
    orderlines.EditNew;
end

{*
 *this method proves that the article exist before accepting a line and calculates the number of lines
 *}
On Command AcceptEdit
objects begin
    cur as SqlCursor
end
begin
    if orderlines.IsMe(EditingTable) then
    begin
        if Not Sql.Select("select description from items where "
                    "item = "+orderlines.item+
                    " and supplier = "+orderlines.supplier) then
        begin
            "This item does not exist".Trace;
            cItem.SetFocus;
            return;
        end
        if orderlines.Status == "New" then
        begin
            cur.Prepare
            (
                "select max(line_nbr) from orderlines where order_nbr = "
                +
                orders.order_nbr
            );
            cur.Open;
            cur.Fetch(orderlines.line_nbr);
            if cur.Found
            then
                ++orderlines.line_nbr;
            else
                orderlines.line_nbr = 1;
        end
    end
    AcceptEdit;
end

On Command DeleteLine
begin

    barra.Text = NULL;
    if Yes("Do you really want to delete the register ", "Attention !") then 
        if orderlines.Delete then
           barra = "Deleted Order line";
end

On Command UpdateLine
begin
    orderlines.EditUpdate;
end

On QueryEnd table orders
begin
    disableTableCmd();
end

{*
 * This method shows the window of orders selection 
 *}
On Click (ctr as char)
begin
    switch ctr
    begin
        case in ("cItem", "cSupplier"):
        begin
            Sql.SelectWindow
            (Self,
            "select item, supplier, description, retail_price from items order by description",
            NULL,
            "Select an Item",
            1,
            orderlines.item,
            orderlines.supplier,
            orderlines.description,
            orderlines.price
            );
            calculateTotalLine;
        end            
    end
end
main(doRun as boolean default TRUE)
begin
    Sql.AttachConnection;   
    Sql.Connect("stock"); 
    if doRun then
      oOrders.Run;
    else
      oOrders.Open;
end

{*
 * This method enables and disables the query commands.
 *}
Private disableTableCmd()
objects begin
    cmd as char
end
begin
    
      DisableCommand("AddLine", orderlines.IsCommandDisabled("EditNew"));
      DisableCommand("DeleteLine", orderlines.IsCommandDisabled("Delete"));
      DisableCommand("UpdateLine", orderlines.IsCommandDisabled("EditUpdate"));

end

On Open
begin
    SetEditMode;
    QueryByForm();
    disableTableCmd();
    GetQueryByForm(FALSE).Trace;
end

On Edit Table (tab as char)
begin
    disableTableCmd();
end

On AcceptEdit Table (tab as char)
begin
    disableTableCmd();
end

On CancelEdit Table (tab as char)
begin
    disableTableCmd();
end

On Fetch Table orders
begin    
    orders.total = 0;
end

{* 
 * Calculate the line total.
 * If the result is greater than 1000000, draws the red total.
 * If it is smaller, draws the blue total
 *}
Private calculateTotalLine()
begin
    orderlines.total = 
        orderlines.quantity 
        *
        orderlines.price
        *
        (1 - (orderlines.discount/100));
    if orderlines.total > 1000000 then
        cTotalLine.Foreground = Rgb(255,0,0);
    else
        cTotalLine.Foreground = Rgb(0,0,255);
end

{* 
 * Calculate the price of the unit in a line
 *}
Private calculatePriceLine()
begin
    orderlines.price = 
        orderlines.total
         /
        (orderlines.quantity *(1 - (orderlines.discount/100)));
end


On Fetch Table orderlines
begin
    calculateTotalLine();
    orders.total += orderlines.total;
end

{*
 * Query by customer
 *}
On Click QueryCliente
objects begin
end
begin
    Sql.SelectWindow
    (Self,
    "select customer, company from customers order by company",
    NULL,
    "Select Customer",
    1,
    orders.customer
    );

end

{*
 * Query by form of payment
 *}
On Click QueryPayForm
objects begin
end
begin
    Sql.SelectWindow
    (Self,
    "select payform, description from payforms",
    NULL,
    "Select a Form of Payment",
    1,
    orders.payform
    );

end


on Exit (ctr as char)
begin           
    switch ctr
    begin
        case in ("cCantidad", "cDescuento", "cPrecio"):
            calculateTotalLine;
        case "cTotalLinea":
            calculatePriceLine;
    end  
end

On Command AddLine
begin
    orderlines.EditNew;
end

{*
 *this method proves that the article exist before accepting a line and calculates the number of lines
 *}
On Command AcceptEdit
objects begin
    cur as SqlCursor
end
begin
    if orderlines.IsMe(EditingTable) then
    begin
        if Not Sql.Select("select description from items where "
                    "item = "+orderlines.item+
                    " and supplier = "+orderlines.supplier) then
        begin
            "This item does not exist".Trace;
            cItem.SetFocus;
            return;
        end
        if orderlines.Status == "New" then
        begin
            cur.Prepare
            (
                "select max(line_nbr) from orderlines where order_nbr = "
                +
                orders.order_nbr
            );
            cur.Open;
            cur.Fetch(orderlines.line_nbr);
            if cur.Found
            then
                ++orderlines.line_nbr;
            else
                orderlines.line_nbr = 1;
        end
    end
    AcceptEdit;
end

On Command DeleteLine
begin

    barra.Text = NULL;
    if Yes("Do you really want to delete the register ", "Attention !") then 
        if orderlines.Delete then
           barra = "Deleted Order line";
end

On Command UpdateLine
begin
    orderlines.EditUpdate;
end

On QueryEnd table orders
begin
    disableTableCmd();
end

{*
 * This method shows the window of orders selection 
 *}
On Click (ctr as char)
begin
    switch ctr
    begin
        case in ("cItem", "cSupplier"):
        begin
            Sql.SelectWindow
            (Self,
            "select item, supplier, description, retail_price from items order by description",
            NULL,
            "Select an Item",
            1,
            orderlines.item,
            orderlines.supplier,
            orderlines.description,
            orderlines.price
            );
            calculateTotalLine;
        end            
    end
end
main(doRun as boolean default TRUE)
begin
    Sql.AttachConnection;   
    Sql.Connect("stock"); 
    if doRun then
      oOrders.Run;
    else
      oOrders.Open;
end

{*
 * This method enables and disables the query commands.
 *}
Private disableTableCmd()
objects begin
    cmd as char
end
begin
    
      DisableCommand("AddLine", orderlines.IsCommandDisabled("EditNew"));
      DisableCommand("DeleteLine", orderlines.IsCommandDisabled("Delete"));
      DisableCommand("UpdateLine", orderlines.IsCommandDisabled("EditUpdate"));

end

On Open
begin
    SetEditMode;
    disableTableCmd();
 
end

On Edit Table (tab as char)
begin
    disableTableCmd();
end

On AcceptEdit Table (tab as char)
begin
    disableTableCmd();
end

On CancelEdit Table (tab as char)
begin
    disableTableCmd();
end

On Fetch Table orders
begin    
    orders.total = 0;
end

{* 
 * Calculate the line total.
 * If the result is greater than 1000000, draws the red total.
 * If it is smaller, draws the blue total
 *}
Private calculateTotalLine()
begin
    orderlines.total = 
        orderlines.quantity 
        *
        orderlines.price
        *
        (1 - (orderlines.discount/100));
    if orderlines.total > 1000000 then
        cTotalLine.Foreground = Rgb(255,0,0);
    else
        cTotalLine.Foreground = Rgb(0,0,255);
end

{* 
 * Calculate the price of the unit in a line
 *}
Private calculatePriceLine()
begin
    orderlines.price = 
        orderlines.total
         /
        (orderlines.quantity *(1 - (orderlines.discount/100)));
end


On Fetch Table orderlines
begin
    calculateTotalLine();
    orders.total += orderlines.total;
end

{*
 * Query by customer
 *}
On Click QueryCliente
objects begin
end
begin
    Sql.SelectWindow
    (Self,
    "select customer, company from customers order by company",
    NULL,
    "Select Customer",
    1,
    orders.customer
    );

end

{*
 * Query by form of payment
 *}
On Click QueryPayForm
objects begin
end
begin
    Sql.SelectWindow
    (Self,
    "select payform, description from payforms",
    NULL,
    "Select a Form of Payment",
    1,
    orders.payform
    );

end



